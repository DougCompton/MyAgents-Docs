{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MyAgents User Guide","text":"<p>Welcome to the MyAgents User Guide! This comprehensive documentation will help you create, configure, and deploy powerful AI agent teams with integrated toolsets.</p>"},{"location":"#what-is-myagents","title":"What is MyAgents?","text":"<p>MyAgents is a sophisticated AI agent platform that enables you to build teams of specialized AI agents for specific business workflows and domains. Unlike general-purpose AI, MyAgents allows you to create agent teams with:</p> <ul> <li>Domain expertise - Specialized knowledge and context</li> <li>Team coordination - Multiple agents working together</li> <li>Tool integration - Access to external systems via MCP (Model Context Protocol)</li> <li>Configurable behavior - Runtime customization through settings</li> </ul>"},{"location":"#key-concepts","title":"Key Concepts","text":""},{"location":"#teams-of-agents","title":"Teams of Agents","text":"<p>Each YAML file defines a Team of Agents:</p> <ul> <li>Team = Collection of agents working together</li> <li>Agent = Individual AI assistant with specific role</li> <li>Coordination = Agents delegate work to each other</li> </ul>"},{"location":"#agent-types","title":"Agent Types","text":"<p>MyAgents supports four agent types:</p> <ul> <li>LLM Agent - Interactive AI assistant (default)</li> <li>Parallel Agent - Run multiple agents concurrently</li> <li>Loop Agent - Execute agent iteratively</li> <li>Sequence Agent - Sequential pipeline processing</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<p>Here's a simple team with one agent that helps with grocery shopping:</p> <pre><code>version: \"1\"\nid: grocery-assistant\nname: Grocery Shopping Assistant\ndescription: Assists customers with grocery shopping and product recommendations\ninteractive: true\ndefault_agent: shopping_helper\n\nagents:\n  shopping_helper:\n    type: llm\n    name: Shopping Helper\n    description: Helps customers find products\n    instructions:\n      - |\n        You are a friendly grocery shopping assistant. \n        Help customers find products, provide recommendations, \n        and answer questions about ingredients and recipes.\n    toolsets:\n      - duckduckgo\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>Quick start guide to create your first team in minutes.</p>"},{"location":"#agents","title":"Agents","text":"<p>Learn about agent teams, types, and coordination patterns.</p> <ul> <li>Agent Types - LLM, Parallel, Loop, and Sequence agents</li> <li>Creating Teams - Step-by-step team creation</li> <li>Configuration - Complete configuration reference</li> <li>Examples - Real-world team examples</li> </ul>"},{"location":"#tools","title":"Tools","text":"<p>Discover and integrate MCP tools into your agents.</p> <ul> <li>Available Tools - Browse available toolsets</li> <li>Using Tools - Integrate tools in your agents</li> </ul>"},{"location":"#advanced-topics","title":"Advanced Topics","text":"<p>Master advanced features for production deployments.</p> <ul> <li>Settings &amp; Configuration - Runtime configuration</li> <li>Conditional Instructions - Dynamic behavior</li> <li>Multi-Agent Workflows - Complex team orchestration</li> </ul>"},{"location":"#reference","title":"Reference","text":"<p>Technical reference documentation.</p> <ul> <li>YAML Schema - Complete schema documentation</li> </ul>"},{"location":"#common-use-cases","title":"Common Use Cases","text":""},{"location":"#e-commerce","title":"\ud83d\uded2 E-Commerce","text":"<p>Create shopping assistant teams that help customers find products, compare prices, and make purchase decisions.</p>"},{"location":"#content-production","title":"\ud83d\udcdd Content Production","text":"<p>Build content creation teams with researchers, writers, and editors working together.</p>"},{"location":"#business-analytics","title":"\ud83d\udcca Business Analytics","text":"<p>Generate reports with teams that collect data, analyze it, and format professional outputs.</p>"},{"location":"#customer-support","title":"\ud83c\udfaf Customer Support","text":"<p>Route support tickets to specialized agents based on issue type and urgency.</p>"},{"location":"#family-management","title":"\ud83d\udcc5 Family Management","text":"<p>Coordinate meal planning, calendars, household tasks, and family activities with a team of agents.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#multi-agent-teams","title":"\ud83e\udd16 Multi-Agent Teams","text":"<p>Build complex teams with specialized agents that work together to handle sophisticated workflows.</p>"},{"location":"#mcp-tool-integration","title":"\ud83d\udee0\ufe0f MCP Tool Integration","text":"<p>Seamlessly integrate external tools and services using the Model Context Protocol standard.</p>"},{"location":"#dynamic-configuration","title":"\u2699\ufe0f Dynamic Configuration","text":"<p>Configure team behavior at runtime using settings and conditional instructions.</p>"},{"location":"#agent-types_1","title":"\ud83d\udd04 Agent Types","text":"<p>Use LLM, Parallel, Loop, and Sequence agents to create powerful workflows.</p>"},{"location":"#production-ready","title":"\ud83d\udcca Production-Ready","text":"<p>Enterprise-grade architecture with DynamoDB storage, comprehensive logging, and error handling.</p>"},{"location":"#getting-help","title":"Getting Help","text":""},{"location":"#documentation","title":"Documentation","text":"<p>This user guide covers everything from basic concepts to advanced patterns.</p>"},{"location":"#examples","title":"Examples","text":"<p>Check the Examples section for real-world team templates.</p>"},{"location":"#support","title":"Support","text":"<p>For technical issues or questions, contact your system administrator.</p>"},{"location":"#whats-next","title":"What's Next?","text":"<p>Ready to create your first team? Head over to the Getting Started guide!</p> <p>Version: 1.0 Last Updated: 2025-10-25 Platform: MyAgents AI Agent Platform</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you create your first AI agent team in just a few minutes.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Access to the MyAgents system</li> <li>A text editor for creating YAML files</li> <li>Basic understanding of YAML format</li> </ul>"},{"location":"getting-started/#your-first-team-hello-world","title":"Your First Team: Hello World","text":"<p>Let's create a simple team with one agent that introduces itself.</p>"},{"location":"getting-started/#step-1-create-the-team-file","title":"Step 1: Create the Team File","text":"<p>Create a new file named <code>hello-team.yaml</code> in the <code>apps/api/src/agents/</code> directory:</p> <pre><code>version: \"1\"\nid: hello-team\nname: Hello Team\ndescription: A friendly team that introduces itself and answers basic questions\ninteractive: true\ndefault_agent: greeter\n\nagents:\n  greeter:\n    type: llm\n    name: Greeter\n    description: Greets users and provides information\n    instructions:\n      - |\n        You are a friendly AI assistant named Hello Agent. \n        Your purpose is to greet users warmly and help them understand what you can do. \n        Keep your responses concise and friendly.\n</code></pre>"},{"location":"getting-started/#step-2-understand-the-structure","title":"Step 2: Understand the Structure","text":"<p>Let's break down what each property does:</p> <ul> <li><code>version</code>: Schema version (always \"1\")</li> <li><code>id</code>: Unique identifier for your team (use lowercase with hyphens)</li> <li><code>name</code>: Display name shown to users</li> <li><code>description</code>: Brief explanation of what the team does</li> <li><code>interactive</code>: Set to <code>true</code> so the team maintains context across messages</li> <li><code>default_agent</code>: Which agent handles requests by default</li> <li><code>agents</code>: Dictionary of agents in the team</li> </ul>"},{"location":"getting-started/#step-3-test-your-team","title":"Step 3: Test Your Team","text":"<ol> <li>Save the file in <code>apps/api/src/agents/hello-team.yaml</code></li> <li>Restart the API service (if required for team reload)</li> <li>Use the chat interface to interact with your team</li> <li>Try saying: \"Hello! What can you help me with?\"</li> </ol>"},{"location":"getting-started/#adding-tools-to-your-agent","title":"Adding Tools to Your Agent","text":"<p>Now let's enhance your agent with web search capabilities using the DuckDuckGo tool.</p>"},{"location":"getting-started/#updated-team-with-tools","title":"Updated Team with Tools","text":"<pre><code>version: \"1\"\nid: hello-team\nname: Hello Team\ndescription: A friendly team that can search the web and answer questions\ninteractive: true\ndefault_agent: greeter\n\nagents:\n  greeter:\n    type: llm\n    name: Greeter\n    description: Greets users and provides information using web search\n    instructions:\n      - |\n        You are a friendly AI assistant. Greet users warmly and help them find information. \n        When asked about current events or factual information, use the web search tool \n        to find accurate, up-to-date answers.\n    toolsets:\n      - duckduckgo\n</code></pre>"},{"location":"getting-started/#what-changed","title":"What Changed?","text":"<p>We added <code>toolsets: [duckduckgo]</code>, which gives your agent access to web search capabilities.</p>"},{"location":"getting-started/#test-the-enhanced-team","title":"Test the Enhanced Team","text":"<p>Try asking: - \"What's the weather like today?\" - \"Tell me about recent AI developments\" - \"Search for the latest news about electric cars\"</p>"},{"location":"getting-started/#adding-configuration-settings","title":"Adding Configuration Settings","text":"<p>Let's make your team more flexible with settings.</p>"},{"location":"getting-started/#team-with-settings","title":"Team with Settings","text":"<pre><code>version: \"1\"\nid: hello-team\nname: Hello Team\ndescription: A configurable team that adapts its communication style\ninteractive: true\ndefault_agent: greeter\n\nsettings:\n  - name: formalMode\n    title: Formal Communication\n    type: bool\n    description: Use formal, professional language\n    defaultValue: false\n\n  - name: responseLength\n    title: Response Length\n    type: string\n    description: Preferred response length (brief, moderate, detailed)\n    defaultValue: moderate\n\nagents:\n  greeter:\n    type: llm\n    name: Greeter\n    description: Greets users with configurable communication style\n    instructions:\n      - |\n        You are a friendly AI assistant. Keep responses conversational and approachable.\n\n      - if: \"settings.formalMode == true\"\n        content: |\n          COMMUNICATION STYLE: Use formal, professional language. \n          Address users respectfully and maintain business-appropriate tone.\n\n      - if: \"settings.responseLength == \\\"brief\\\"\"\n        content: |\n          RESPONSE LENGTH: Keep responses very brief, typically 1-2 sentences.\n\n      - if: \"settings.responseLength == \\\"detailed\\\"\"\n        content: |\n          RESPONSE LENGTH: Provide detailed, comprehensive responses with examples and explanations.\n\n    toolsets:\n      - duckduckgo\n</code></pre>"},{"location":"getting-started/#understanding-settings","title":"Understanding Settings","text":"<p>Settings allow you to configure team behavior without changing code:</p> <ul> <li>Boolean settings (<code>type: bool</code>) - Toggle features on/off</li> <li>String settings (<code>type: string</code>) - Choose between predefined options</li> <li>Number settings (<code>type: number</code>) - Set numeric thresholds or limits</li> </ul> <p>Conditional instructions use the <code>if</code> property to apply instructions only when certain settings are active.</p>"},{"location":"getting-started/#multi-agent-team-example","title":"Multi-Agent Team Example","text":"<p>For more complex workflows, create teams with multiple specialized agents.</p>"},{"location":"getting-started/#blog-writing-team","title":"Blog Writing Team","text":"<pre><code>version: \"1\"\nid: blog-team\nname: Blog Writing Team\ndescription: Coordinates research, writing, and editing for blog content\ninteractive: true\ndefault_agent: coordinator\n\nagents:\n  coordinator:\n    type: llm\n    name: Coordinator\n    description: Manages the blog writing workflow\n    instructions:\n      - |\n        You are a project coordinator for a blog writing team. When users request a blog post:\n\n        1. Use transfer_task to delegate to 'researcher' for gathering information\n        2. Then delegate to 'writer' for creating the draft\n        3. Finally delegate to 'editor' for review and improvements\n\n        Coordinate the process and present the final result to the user.\n    sub_agents:\n      - researcher\n      - writer\n      - editor\n\n  researcher:\n    type: llm\n    name: Researcher\n    description: Gathers information from the web\n    instructions:\n      - |\n        You are a researcher. Search for current, accurate information on the requested topic. \n        Organize your findings clearly and cite sources.\n    toolsets:\n      - duckduckgo\n\n  writer:\n    type: llm\n    name: Writer\n    description: Creates blog post content\n    instructions:\n      - |\n        You are a skilled writer. Create an engaging blog post based on the research provided. \n        Use clear structure with introduction, body sections with headers, and conclusion. \n        Write in a professional but approachable tone.\n\n  editor:\n    type: llm\n    name: Editor\n    description: Reviews and improves content\n    instructions:\n      - |\n        You are an editor. Review the blog post for grammar, clarity, flow, and engagement. \n        Make improvements and explain your key changes.\n</code></pre>"},{"location":"getting-started/#key-concepts","title":"Key Concepts","text":"<ul> <li>Coordinator agent: Orchestrates the workflow using <code>sub_agents</code></li> <li>Specialist agents: Each handles a specific task (research, write, edit)</li> <li>Task delegation: Uses the <code>transfer_task</code> tool to pass work between agents</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've created your first agent teams. Here's what to explore next:</p>"},{"location":"getting-started/#learn-more-about-teams","title":"Learn More About Teams","text":"<ul> <li>Agent Overview - Deep dive into team architecture</li> <li>Creating Teams - Comprehensive team creation guide</li> <li>Configuration Reference - All configuration options</li> </ul>"},{"location":"getting-started/#explore-tools","title":"Explore Tools","text":"<ul> <li>Available Tools - Browse all available MCP tools</li> <li>Using Tools - Best practices for tool integration</li> </ul>"},{"location":"getting-started/#advanced-features","title":"Advanced Features","text":"<ul> <li>Settings &amp; Configuration - Master runtime configuration</li> <li>Conditional Instructions - Dynamic agent behavior</li> <li>Multi-Agent Workflows - Complex team orchestration patterns</li> </ul>"},{"location":"getting-started/#examples","title":"Examples","text":"<ul> <li>Team Examples - Real-world templates for common use cases</li> </ul>"},{"location":"getting-started/#quick-reference","title":"Quick Reference","text":""},{"location":"getting-started/#minimal-team-structure","title":"Minimal Team Structure","text":"<pre><code>version: \"1\"\nid: team-id\nname: Team Name\ndescription: What the team does\ndefault_agent: agent_name\n\nagents:\n  agent_name:\n    type: llm\n    name: Agent Name\n    description: What this agent does\n    instructions:\n      - \"\": Detailed instructions for the agent...\n</code></pre>"},{"location":"getting-started/#team-with-tools","title":"Team with Tools","text":"<pre><code>version: \"1\"\nid: team-id\nname: Team Name\ndescription: What the team does\ndefault_agent: agent_name\n\nagents:\n  agent_name:\n    type: llm\n    name: Agent Name\n    description: What this agent does\n    instructions:\n      - \"\": Instructions...\n    toolsets:\n      - duckduckgo\n      - memory-server\n</code></pre>"},{"location":"getting-started/#interactive-vs-non-interactive","title":"Interactive vs Non-Interactive","text":"<p>Interactive (<code>interactive: true</code>): - Team stays active across multiple messages - Use for: conversations, iterative work, multi-step tasks - Examples: Shopping assistants, content creation, consulting</p> <p>Non-Interactive (omit property or set to <code>false</code>): - Team returns to switchboard after completing request - Use for: quick queries, single transactions, calculations - Examples: Weather lookups, currency conversion, simple data retrieval</p>"},{"location":"getting-started/#common-pitfalls-to-avoid","title":"Common Pitfalls to Avoid","text":""},{"location":"getting-started/#incorrect-yaml-syntax","title":"\u274c Incorrect YAML Syntax","text":"<pre><code>interactive: \"true\"  # Wrong - string instead of boolean\n</code></pre>"},{"location":"getting-started/#correct-yaml-syntax","title":"\u2705 Correct YAML Syntax","text":"<pre><code>interactive: true  # Correct - boolean value\n</code></pre>"},{"location":"getting-started/#missing-required-fields","title":"\u274c Missing Required Fields","text":"<pre><code>version: \"1\"\nid: my-team\nagents:\n  helper: {}  # Missing required fields\n</code></pre>"},{"location":"getting-started/#all-required-fields","title":"\u2705 All Required Fields","text":"<pre><code>version: \"1\"\nid: my-team\nname: My Team\ndescription: What it does\ndefault_agent: helper\n\nagents:\n  helper:\n    type: llm\n    name: Helper\n    description: Helps users\n    instructions:\n      - \"\": Instructions here\n</code></pre>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/#team-doesnt-load","title":"Team Doesn't Load","text":"<ul> <li>Check YAML syntax (use a YAML validator)</li> <li>Verify all required fields are present</li> <li>Check server logs for specific errors</li> <li>Ensure file is in <code>apps/api/src/agents/</code> directory</li> </ul>"},{"location":"getting-started/#tools-dont-work","title":"Tools Don't Work","text":"<ul> <li>Verify toolset name spelling (case-sensitive)</li> <li>Check that toolset is registered in system</li> <li>Review tool-specific configuration requirements</li> </ul>"},{"location":"getting-started/#conditional-instructions-not-working","title":"Conditional Instructions Not Working","text":"<ul> <li>Verify setting name matches exactly</li> <li>Check expression syntax: <code>setting.&lt;name&gt; == &lt;value&gt;</code></li> <li>Use quotes for string values: <code>setting.mode == \"value\"</code></li> </ul>"},{"location":"getting-started/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the documentation - Review relevant sections in this guide</li> <li>Validate your YAML - Use an online YAML validator</li> <li>Check logs - Look for error messages in server logs</li> <li>Review examples - Compare your team to working examples</li> <li>Contact support - Reach out to your system administrator</li> </ol> <p>Next: Understanding Teams | Available Tools</p>"},{"location":"advanced/conditional-instructions/","title":"Conditional Instructions","text":"<p>Dynamic agent behavior using conditional logic based on settings.</p>"},{"location":"advanced/conditional-instructions/#what-are-conditional-instructions","title":"What are Conditional Instructions?","text":"<p>Conditional instructions allow agents to adapt their behavior based on:</p> <ul> <li>\u2699\ufe0f Settings - User preferences and configuration</li> <li>\ud83d\udd04 Dynamic behavior - Different instructions for different scenarios</li> <li>\ud83c\udf9b\ufe0f Feature flags - Enable/disable functionality</li> </ul>"},{"location":"advanced/conditional-instructions/#basic-syntax","title":"Basic Syntax","text":""},{"location":"advanced/conditional-instructions/#instruction-structure","title":"Instruction Structure","text":"<pre><code>instructions:\n  - if: \"settings.setting_name == value\"\n    content: |\n      Instructions when condition is true\n  - |\n    Default instructions (always included)\n</code></pre>"},{"location":"advanced/conditional-instructions/#simple-example","title":"Simple Example","text":"<pre><code>agents:\n  assistant:\n    instructions:\n      - if: \"settings.expert_mode == true\"\n        content: |\n          You are in expert mode. Provide technical details,\n          use industry terminology, and include advanced concepts.\n\n      - |\n        You are in standard mode. Use accessible language\n        and explain concepts clearly.\n</code></pre>"},{"location":"advanced/conditional-instructions/#supported-conditions","title":"Supported Conditions","text":""},{"location":"advanced/conditional-instructions/#boolean-settings","title":"Boolean Settings","text":"<p>Check if boolean setting is true: <pre><code>instructions:\n  - if: \"settings.verbose == true\"\n    content: |\n      Verbose mode active - provide detailed explanations\n</code></pre></p> <p>Check if boolean setting is false: <pre><code>instructions:\n  - if: \"settings.verbose == false\"\n    content: |\n      Concise mode - keep responses brief\n</code></pre></p> <p>Note: The <code>content</code> property holds the instruction text when using <code>if</code> conditions.</p>"},{"location":"advanced/conditional-instructions/#string-settings","title":"String Settings","text":"<p>String equality: <pre><code>instructions:\n  - if: \"settings.format == \\\"json\\\"\"\n    content: |\n      Output in JSON format\n</code></pre></p> <p>String inequality: <pre><code>instructions:\n  - if: \"settings.dietary_restrictions != \\\"none\\\"\"\n    content: |\n      Filter recipes by restriction: {settings.dietary_restrictions}\n</code></pre></p> <p>Note: String values must be double-quoted within the condition.</p>"},{"location":"advanced/conditional-instructions/#supported-operators","title":"Supported Operators","text":"<p>\u2705 Fully Supported: - <code>==</code> - Equality (booleans, strings, numbers) - <code>!=</code> - Inequality (booleans, strings, numbers)</p> <p>\u274c NOT Supported: - Negation operators (<code>!</code>) - Logical operators (<code>&amp;&amp;</code>, <code>||</code>) - Comparison operators (<code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>) - Complex expressions with parentheses</p> <p>Workaround for logical operators: Use separate explicit conditions for each case:</p> <pre><code>instructions:\n  - if: \"settings.verbose == true\"\n    content: |\n      Verbose instructions\n\n  - |\n    Default (non-verbose) instructions include implicit handling\n    of when verbose is false\n</code></pre>"},{"location":"advanced/conditional-instructions/#evaluation-order","title":"Evaluation Order","text":"<p>Instructions are evaluated in order from top to bottom. All matching conditions are included and concatenated.</p>"},{"location":"advanced/conditional-instructions/#best-practice-ordering","title":"Best Practice Ordering","text":"<pre><code># \u2705 GOOD - Base instructions first, then conditionals\ninstructions:\n  - |\n    Default instructions (base behavior)\n\n  - if: \"settings.expert_mode == true\"\n    content: |\n      Additional expert instructions\n</code></pre>"},{"location":"advanced/conditional-instructions/#common-patterns","title":"Common Patterns","text":""},{"location":"advanced/conditional-instructions/#mode-switching","title":"Mode Switching","text":"<pre><code>settings:\n  - name: mode\n    type: string\n    title: Experience Mode\n    description: Adjust explanations based on user experience level\n    defaultValue: intermediate\n\nagents:\n  instructor:\n    instructions:\n      - if: \"settings.mode == \\\"beginner\\\"\"\n        content: |\n          BEGINNER MODE\n          - Define all terms\n          - Start with basics\n          - Step-by-step guidance\n          - Lots of examples\n          - Avoid jargon\n\n      - if: \"settings.mode == \\\"intermediate\\\"\"\n        content: |\n          INTERMEDIATE MODE\n          - Assume basic knowledge\n          - Practical focus\n          - Some technical terms okay\n          - Balanced explanations\n\n      - if: \"settings.mode == \\\"expert\\\"\"\n        content: |\n          EXPERT MODE\n          - Advanced concepts\n          - Technical terminology\n          - Architectural discussions\n          - Best practices and trade-offs\n\n      - |\n        Standard instruction set\n</code></pre>"},{"location":"advanced/conditional-instructions/#feature-flags","title":"Feature Flags","text":"<pre><code>settings:\n  - name: enable_web_search\n    type: bool\n    title: Enable Web Search\n    description: Allow searching the web for current information\n    defaultValue: true\n\n  - name: enable_memory\n    type: bool\n    title: Enable Memory\n    description: Store and retrieve context from memory\n    defaultValue: true\n\nagents:\n  assistant:\n    toolsets:\n      - duckduckgo\n      - memory-server\n    instructions:\n      - |\n        Base capabilities:\n        - Answer questions using training data\n\n      - if: \"settings.enable_web_search == true\"\n        content: |\n          Web search enabled:\n          - Use web search for current information\n          - Include sources in responses\n\n      - if: \"settings.enable_memory == true\"\n        content: |\n          Memory enabled:\n          - Store important findings for future reference\n          - Retrieve relevant context from previous interactions\n          - Build knowledge base over time\n</code></pre>"},{"location":"advanced/conditional-instructions/#output-format-switching","title":"Output Format Switching","text":"<pre><code>settings:\n  - name: output_format\n    type: string\n    title: Output Format\n    description: Format for generated content\n    defaultValue: markdown\n\nagents:\n  formatter:\n    instructions:\n      - if: \"settings.output_format == \\\"markdown\\\"\"\n        content: |\n          Format in Markdown:\n          - Use # for headings\n          - Use **bold** and *italic*\n          - Use - for bullet points\n          - Use ``` for code blocks\n\n      - if: \"settings.output_format == \\\"json\\\"\"\n        content: |\n          Format as JSON:\n          - Valid JSON syntax\n          - Proper escaping\n          - No trailing commas\n          - Include structure: {\"title\": \"...\", \"content\": \"...\"}\n\n      - if: \"settings.output_format == \\\"html\\\"\"\n        content: |\n          Format as HTML:\n          - Use semantic tags\n          - Proper nesting\n          - Close all tags\n\n      - |\n        Use markdown format (default)\n</code></pre>"},{"location":"advanced/conditional-instructions/#tone-adaptation","title":"Tone Adaptation","text":"<pre><code>settings:\n  - name: tone\n    type: string\n    title: Content Tone\n    description: Writing style and formality\n    defaultValue: friendly\n\nagents:\n  customer_service:\n    instructions:\n      - if: \"settings.tone == \\\"professional\\\"\"\n        content: |\n          Professional tone:\n          - \"Thank you for contacting us\"\n          - \"I'd be happy to assist you with...\"\n          - Use proper grammar and formal language\n\n      - if: \"settings.tone == \\\"friendly\\\"\"\n        content: |\n          Friendly tone:\n          - \"Hi there! How can I help?\"\n          - \"I'm happy to help you with that!\"\n          - Warm and approachable\n\n      - if: \"settings.tone == \\\"casual\\\"\"\n        content: |\n          Casual tone:\n          - \"Hey! What's up?\"\n          - \"Sure thing! Let me help you out\"\n          - Relaxed and conversational\n\n      - |\n        Standard professional-friendly tone\n</code></pre>"},{"location":"advanced/conditional-instructions/#priority-levels","title":"Priority Levels","text":"<pre><code>settings:\n  - name: priority\n    type: string\n    title: Priority Level\n    description: Request priority level\n    defaultValue: normal\n\nagents:\n  support_agent:\n    toolsets:\n      - notification-server\n    instructions:\n      - if: \"settings.priority == \\\"urgent\\\"\"\n        content: |\n          \ud83d\udea8 URGENT PRIORITY\n          - Respond immediately\n          - Escalate to senior team if needed\n          - Send notification to managers\n          - Follow up within 15 minutes\n\n      - if: \"settings.priority == \\\"high\\\"\"\n        content: |\n          \u26a1 HIGH PRIORITY\n          - Prioritize this request\n          - Respond within 1 hour\n          - Notify relevant team members\n\n      - if: \"settings.priority == \\\"normal\\\"\"\n        content: |\n          \ud83d\udccb NORMAL PRIORITY\n          - Standard response time (within 4 hours)\n          - Follow normal procedures\n\n      - if: \"settings.priority == \\\"low\\\"\"\n        content: |\n          \ud83d\udccc LOW PRIORITY\n          - Process when time allows\n          - Standard response within 24 hours\n\n      - |\n          Standard support workflow\n</code></pre>"},{"location":"advanced/conditional-instructions/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"advanced/conditional-instructions/#layered-feature-enablement","title":"Layered Feature Enablement","text":"<p>Build up capabilities with multiple feature flags:</p> <pre><code>settings:\n  - name: enable_search\n    type: bool\n    title: Enable Search\n    description: Enable web search capabilities\n    defaultValue: true\n\n  - name: enable_memory\n    type: bool\n    title: Enable Memory\n    description: Enable persistent memory\n    defaultValue: true\n\n  - name: enable_notifications\n    type: bool\n    title: Enable Notifications\n    description: Enable push notifications\n    defaultValue: false\n\nagents:\n  assistant:\n    toolsets:\n      - duckduckgo\n      - memory-server\n      - notification-server\n    instructions:\n      - |\n          Core capabilities:\n          - Answer questions using training data\n\n      - if: \"settings.enable_search == true\"\n        content: |\n          Search capability enabled:\n          - Use web search for current information\n          - Cite sources\n\n      - if: \"settings.enable_memory == true\"\n        content: |\n          Memory capability enabled:\n          - Store important context\n          - Retrieve relevant history\n          - Build knowledge over time\n\n      - if: \"settings.enable_notifications == true\"\n        content: |\n          Notification capability enabled:\n          - Send notifications for important updates\n          - Alert user of completed tasks\n</code></pre>"},{"location":"advanced/conditional-instructions/#context-aware-behavior","title":"Context-Aware Behavior","text":"<p>Adjust behavior based on user type:</p> <pre><code>settings:\n  - name: user_type\n    type: string\n    title: User Type\n    description: Type of user (student, professional, researcher)\n    defaultValue: professional\n\n  - name: detail_level\n    type: string\n    title: Detail Level\n    description: Level of detail in responses (brief, normal, detailed)\n    defaultValue: normal\n\nagents:\n  adaptive_assistant:\n    instructions:\n      - |\n          Base instructions for all users\n\n      - if: \"settings.user_type == \\\"student\\\"\"\n        content: |\n          Student context:\n          - Educational focus\n          - Define technical terms\n          - Include learning resources\n\n      - if: \"settings.user_type == \\\"professional\\\"\"\n        content: |\n          Professional context:\n          - Business implications\n          - Practical applications\n          - ROI considerations\n\n      - if: \"settings.user_type == \\\"researcher\\\"\"\n        content: |\n          Researcher context:\n          - Academic rigor\n          - Methodology details\n          - Citations and references\n\n      - if: \"settings.detail_level == \\\"brief\\\"\"\n        content: |\n          Brief mode:\n          - Concise responses\n          - Key points only\n          - Executive summary style\n\n      - if: \"settings.detail_level == \\\"detailed\\\"\"\n        content: |\n          Detailed mode:\n          - Comprehensive explanations\n          - In-depth analysis\n          - Multiple examples\n</code></pre>"},{"location":"advanced/conditional-instructions/#conditional-tool-access","title":"Conditional Tool Access","text":"<p>Control which tools are used based on settings:</p> <pre><code>settings:\n  - name: data_source\n    type: string\n    title: Data Source\n    description: Where to retrieve information from\n    defaultValue: web_and_memory\n\nagents:\n  information_agent:\n    toolsets:\n      - duckduckgo\n      - memory-server\n    instructions:\n      - |\n          Information retrieval agent\n\n      - if: \"settings.data_source == \\\"web_only\\\"\"\n        content: |\n          Web-only mode:\n          - Use duckduckgo for all queries\n          - Do not use memory-server\n          - Fresh data every time\n\n      - if: \"settings.data_source == \\\"memory_only\\\"\"\n        content: |\n          Memory-only mode:\n          - Search memory-server only\n          - Do not use web search\n          - Return cached data if available\n          - Inform user if data not in memory\n\n      - if: \"settings.data_source == \\\"web_and_memory\\\"\"\n        content: |\n          Combined mode:\n          1. Check memory-server for cached data first\n          2. If cache miss, search web via duckduckgo\n          3. Store findings in memory-server\n          4. Return comprehensive results\n\n      - if: \"settings.data_source == \\\"offline\\\"\"\n        content: |\n          Offline mode:\n          - Use training data only\n          - No external tools\n          - Note limitations to user\n</code></pre>"},{"location":"advanced/conditional-instructions/#best-practices","title":"Best Practices","text":""},{"location":"advanced/conditional-instructions/#write-clear-conditions","title":"Write Clear Conditions","text":"<p>Good: <pre><code>instructions:\n  - if: \"settings.mode == \\\"expert\\\"\"\n    content: |\n      Expert mode instructions\n</code></pre></p> <p>Bad: <pre><code>instructions:\n  - if: \"settings.m == \\\"e\\\"\"\n    content: |\n      Unclear what this checks\n</code></pre></p>"},{"location":"advanced/conditional-instructions/#always-include-default","title":"Always Include Default","text":"<p>Good: <pre><code>instructions:\n  - if: \"settings.expert_mode == true\"\n    content: |\n      Expert instructions\n\n  - |\n      DEFAULT - Standard instructions\n</code></pre></p> <p>Bad: <pre><code>instructions:\n  - if: \"settings.expert_mode == true\"\n    content: |\n      Expert instructions\n\n  # No default! What happens in standard mode?\n</code></pre></p>"},{"location":"advanced/conditional-instructions/#keep-conditions-simple","title":"Keep Conditions Simple","text":"<p>Good: <pre><code>instructions:\n  - if: \"settings.expert_mode == true\"\n    content: |\n      Clear, simple condition\n\n  - if: \"settings.format == \\\"json\\\"\"\n    content: |\n      Clear equality check\n</code></pre></p>"},{"location":"advanced/conditional-instructions/#document-complex-settings","title":"Document Complex Settings","text":"<pre><code>settings:\n  - name: priority\n    type: string\n    title: Priority Level\n    description: Request priority (low, normal, high, urgent). Affects response time and escalation rules.\n    defaultValue: normal\n\nagents:\n  support:\n    instructions:\n      # High priority = Immediate detailed response\n      - if: \"settings.priority == \\\"high\\\"\"\n        content: |\n          High priority request - provide immediate response\n\n      # Default = Standard response\n      - |\n          Standard mode - balanced response\n</code></pre>"},{"location":"advanced/conditional-instructions/#testing-conditional-instructions","title":"Testing Conditional Instructions","text":""},{"location":"advanced/conditional-instructions/#test-each-path","title":"Test Each Path","text":"<p>For this configuration: <pre><code>settings:\n  - name: mode\n    type: string\n    title: Mode\n    description: Operation mode\n    defaultValue: standard\n\nagents:\n  assistant:\n    instructions:\n      - if: \"settings.mode == \\\"advanced\\\"\"\n        content: |\n          Advanced instructions\n      - if: \"settings.mode == \\\"simple\\\"\"\n        content: |\n          Simple instructions\n      - |\n          Standard instructions\n</code></pre></p> <p>Test cases: 1. Set <code>mode = \"advanced\"</code> \u2192 Should see advanced instructions + standard 2. Set <code>mode = \"simple\"</code> \u2192 Should see simple instructions + standard 3. Set <code>mode = \"standard\"</code> \u2192 Should see standard instructions only</p>"},{"location":"advanced/conditional-instructions/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"advanced/conditional-instructions/#missing-default","title":"Missing Default","text":"<p>\u274c Problem: <pre><code>instructions:\n  - if: \"settings.expert_mode == true\"\n    content: |\n      Expert instructions\n  # No default!\n</code></pre></p> <p>\u2705 Solution: <pre><code>instructions:\n  - if: \"settings.expert_mode == true\"\n    content: |\n      Expert instructions\n  - |\n      Standard instructions (default)\n</code></pre></p>"},{"location":"advanced/conditional-instructions/#wrong-comparison-operator","title":"Wrong Comparison Operator","text":"<p>\u274c Problem: <pre><code>instructions:\n  - if: \"settings.format = \\\"json\\\"\"\n    content: |\n      Single = is assignment, not comparison!\n</code></pre></p> <p>\u2705 Solution: <pre><code>instructions:\n  - if: \"settings.format == \\\"json\\\"\"\n    content: |\n      Double == for equality check\n</code></pre></p>"},{"location":"advanced/conditional-instructions/#attempting-unsupported-operators","title":"Attempting Unsupported Operators","text":"<p>\u274c Problem: <pre><code>instructions:\n  - if: \"!settings.verbose\"\n    content: |\n      Negation not supported!\n  - if: \"settings.a &amp;&amp; settings.b\"\n    content: |\n      Logical operators not supported!\n</code></pre></p> <p>\u2705 Solution: <pre><code>instructions:\n  - if: \"settings.verbose == true\"\n    content: |\n      Verbose instructions\n  - |\n      Non-verbose behavior in default\n</code></pre></p>"},{"location":"advanced/conditional-instructions/#next-steps","title":"Next Steps","text":"<ul> <li>Settings - Complete settings documentation</li> <li>Configuration Reference - Full schema</li> <li>Agent Examples - Teams using conditionals</li> <li>Multi-Agent Workflows - Advanced patterns</li> </ul> <p>Related: Settings | Configuration | Creating Teams</p>"},{"location":"advanced/multi-agent/","title":"Multi-Agent Workflows","text":"<p>Complex workflows using multiple specialized agents working together.</p>"},{"location":"advanced/multi-agent/#overview","title":"Overview","text":"<p>Multi-agent workflows enable:</p> <ul> <li>\ud83c\udfaf Specialization - Each agent excels at specific tasks</li> <li>\ud83d\udd04 Collaboration - Agents delegate work to each other</li> <li>\ud83d\udcca Parallel Processing - Multiple agents execute concurrently</li> <li>\ud83d\udd01 Sequential Pipelines - Ordered processing through stages</li> <li>\ud83c\udf33 Hierarchical Organization - Multi-level coordination</li> </ul>"},{"location":"advanced/multi-agent/#sub-agent-discovery","title":"Sub-Agent Discovery","text":"<p>When an LLM agent has <code>sub_agents</code> defined, the system automatically provides information about available sub-agents in the agent's instructions. This happens through the <code>&lt;SubAgents /&gt;</code> data tag, which is auto-appended at runtime.</p>"},{"location":"advanced/multi-agent/#automatic-behavior","title":"Automatic Behavior","text":"<p>You don't need to manually add the <code>&lt;SubAgents /&gt;</code> tag to your instructions. The system automatically:</p> <ol> <li>Detects when an agent has the <code>sub_agents</code> property</li> <li>Appends the <code>&lt;SubAgents /&gt;</code> data tag to the agent's instructions</li> <li>Expands the tag at runtime with detailed information about each sub-agent</li> </ol>"},{"location":"advanced/multi-agent/#what-gets-included","title":"What Gets Included","text":"<p>The expanded <code>&lt;SubAgents /&gt;</code> tag provides:</p> <ul> <li>Name - The sub-agent's identifier</li> <li>Description - What the sub-agent does</li> <li>Instructions (preview) - First 200 characters of the sub-agent's instructions</li> </ul> <p>This information helps the coordinator agent understand which sub-agent to delegate to.</p>"},{"location":"advanced/multi-agent/#example","title":"Example","text":"<p>Given this agent definition:</p> <pre><code>agents:\n  coordinator:\n    name: coordinator\n    description: Routes requests to specialists\n    instructions:\n      - |\n        You are a coordinator. Analyze requests and delegate to the appropriate specialist.\n    sub_agents:\n      - technical_support\n      - billing_support\n\n  technical_support:\n    name: technical_support\n    description: Handles technical issues\n    instructions:\n      - |\n        Diagnose and resolve technical problems.\n        Provide step-by-step solutions.\n\n  billing_support:\n    name: billing_support\n    description: Handles billing inquiries\n    instructions:\n      - |\n        Address billing questions and process refunds.\n</code></pre> <p>The coordinator agent automatically receives expanded instructions like:</p> <pre><code>You are a coordinator. Analyze requests and delegate to the appropriate specialist.\n\nAvailable Sub-Agents:\n- technical_support: Handles technical issues\n  Instructions: Diagnose and resolve technical problems. Provide step-by-step solutions.\n\n- billing_support: Handles billing inquiries\n  Instructions: Address billing questions and process refunds.\n</code></pre>"},{"location":"advanced/multi-agent/#manual-override","title":"Manual Override","text":"<p>If you want to customize the sub-agent information, you can manually include <code>&lt;SubAgents /&gt;</code> in your instructions. The system will detect the existing tag and won't duplicate it.</p> <pre><code>coordinator:\n  instructions:\n    - |\n      You are a coordinator.\n\n      &lt;SubAgents /&gt;\n\n      Use the transfer_task tool to delegate work.\n  sub_agents:\n    - specialist_a\n    - specialist_b\n</code></pre>"},{"location":"advanced/multi-agent/#sharing-data-between-agents","title":"Sharing Data Between Agents","text":"<p>Agents can pass their outputs to other agents using the <code>output_key</code> property. This enables sophisticated workflows where agents build on each other's work.</p>"},{"location":"advanced/multi-agent/#how-it-works","title":"How It Works","text":"<ol> <li>Agent Saves Output: An agent with <code>output_key</code> saves its response for later use</li> <li>Other Agents Reference: Other agents use <code>{keyName}</code> placeholders in their instructions to access saved outputs</li> <li>Automatic Replacement: Placeholders are replaced with the actual content before the agent runs</li> </ol>"},{"location":"advanced/multi-agent/#basic-example","title":"Basic Example","text":"<pre><code>version: \"1\"\nid: research-writing\nname: Research &amp; Writing Team\ndescription: Research followed by content creation\ninteractive: true\ndefault_agent: coordinator\n\nagents:\n  coordinator:\n    type: llm\n    name: Coordinator\n    description: Manages workflow\n    instructions:\n      - |\n        First, transfer_task to researcher.\n        After research completes, transfer_task to writer.\n    sub_agents:\n      - researcher\n      - writer\n\n  researcher:\n    type: llm\n    name: Researcher\n    description: Conducts research\n    output_key: research_summary    # Save output for later\n    instructions:\n      - |\n        Research the topic and provide a comprehensive summary\n        with key facts, statistics, and sources.\n    toolsets:\n      - duckduckgo\n\n  writer:\n    type: llm\n    name: Writer\n    description: Creates content from research\n    instructions:\n      - |\n        Write an article based on this research:\n\n        {research_summary}    # Use researcher's output\n\n        Create engaging, well-structured content.\n</code></pre> <p>Execution Flow:</p> <ol> <li>Coordinator delegates to researcher</li> <li>Researcher completes and saves its output</li> <li>Coordinator delegates to writer</li> <li>Writer receives the research content and creates the article</li> </ol>"},{"location":"advanced/multi-agent/#use-case-multi-stage-pipeline","title":"Use Case: Multi-Stage Pipeline","text":"<p>Agents can build on each other's work through multiple stages:</p> <pre><code>agents:\n  stage_1_collector:\n    type: llm\n    output_key: raw_data\n    instructions:\n      - |\n        Collect data on the topic.\n        Output format: Bullet points with sources.\n\n  stage_2_analyzer:\n    type: llm\n    output_key: analysis\n    instructions:\n      - |\n        Analyze this data:\n        {raw_data}\n\n        Identify trends, insights, and key findings.\n\n  stage_3_visualizer:\n    type: llm\n    output_key: chart_recommendations\n    instructions:\n      - |\n        Based on this analysis:\n        {analysis}\n\n        Recommend visualizations (charts, graphs, tables).\n\n  stage_4_writer:\n    type: llm\n    instructions:\n      - |\n        Write a comprehensive report using:\n\n        Data: {raw_data}\n        Analysis: {analysis}\n        Visualizations: {chart_recommendations}\n</code></pre>"},{"location":"advanced/multi-agent/#use-case-parallel-collection-synthesis","title":"Use Case: Parallel Collection + Synthesis","text":"<p>Multiple agents work in parallel, then a coordinator synthesizes:</p> <pre><code>agents:\n  coordinator:\n    type: llm\n    name: Synthesis Coordinator\n    instructions:\n      - |\n        First, use parallel_researchers to gather information.\n        Then synthesize all findings into a comprehensive report.\n    sub_agents:\n      - parallel_researchers\n\n  parallel_researchers:\n    type: parallel\n    name: Multi-Source Researchers\n    instructions:\n      - |\n        Combine all research perspectives:\n\n        Academic: {academic_findings}\n        Industry: {industry_findings}\n        News: {news_findings}\n\n        Create a unified research brief.\n    sub_agents:\n      - academic_researcher\n      - industry_researcher\n      - news_researcher\n\n  academic_researcher:\n    type: llm\n    output_key: academic_findings\n    instructions:\n      - |\n        Research academic sources and scholarly papers.\n    toolsets:\n      - duckduckgo\n\n  industry_researcher:\n    type: llm\n    output_key: industry_findings\n    instructions:\n      - |\n        Research industry reports and expert analysis.\n    toolsets:\n      - duckduckgo\n\n  news_researcher:\n    type: llm\n    output_key: news_findings\n    instructions:\n      - |\n        Research recent news and current trends.\n    toolsets:\n      - duckduckgo\n</code></pre>"},{"location":"advanced/multi-agent/#use-case-iterative-refinement-with-context","title":"Use Case: Iterative Refinement with Context","text":"<p>Loop agents can reference initial input and progressively improve:</p> <pre><code>agents:\n  initial_writer:\n    type: llm\n    output_key: draft_v1\n    instructions:\n      - |\n        Write a first draft on the topic.\n\n  refinement_loop:\n    type: loop\n    max_iterations: 3\n    name: Content Refiner\n    instructions:\n      - |\n        Iteratively improve the content.\n        Original draft: {draft_v1}\n\n        Each iteration should enhance clarity and quality.\n    sub_agents:\n      - content_improver\n\n  content_improver:\n    type: llm\n    output_key: draft_v1    # Overwrites each iteration\n    instructions:\n      - |\n        Improve this content:\n        {draft_v1}\n\n        Focus on clarity, flow, and impact.\n</code></pre>"},{"location":"advanced/multi-agent/#important-details","title":"Important Details","text":"<p>When Saved Outputs Are Available: - \u2705 Available to all agents during the same conversation turn - \u274c NOT saved between different chat messages - \u274c NOT shared between different users</p> <p>Using Placeholders: - <code>{keyName}</code> \u2192 Replaced with the saved output - <code>{missing_key}</code> \u2192 Left as-is if the key doesn't exist - Whitespace is ignored: <code>{  keyName  }</code> works the same as <code>{keyName}</code></p> <p>Naming Your Keys: - Use descriptive names: <code>research_summary</code>, <code>analysis_results</code> - Snake_case recommended: <code>user_preferences</code>, <code>raw_data</code> - Dashes and dots also work: <code>key-with-dashes</code>, <code>key.with.dots</code></p>"},{"location":"advanced/multi-agent/#best-practices","title":"Best Practices","text":"<p>1. Use Descriptive Keys</p> <pre><code># \u2705 Good - Clear purpose\noutput_key: research_findings\noutput_key: technical_analysis\noutput_key: user_preferences\n\n# \u274c Bad - Unclear\noutput_key: data\noutput_key: result\noutput_key: output\n</code></pre> <p>2. Document State Dependencies</p> <pre><code>agents:\n  analyzer:\n    instructions:\n      - |\n        # This agent requires 'research_findings' from researcher\n        Analyze these findings:\n        {research_findings}\n</code></pre> <p>3. Provide Fallback Content</p> <pre><code>agents:\n  writer:\n    instructions:\n      - |\n        Research findings:\n        {research_findings}\n\n        If no research is available above, conduct your own research first.\n</code></pre> <p>4. Use Sequential Types for Dependencies</p> <p>When agents depend on each other's outputs, use <code>sequence</code> type:</p> <pre><code>pipeline:\n  type: sequence\n  sub_agents:\n    - collector    # output_key: raw_data\n    - analyzer     # uses {raw_data}\n    - reporter     # uses {raw_data} and {analysis}\n</code></pre>"},{"location":"advanced/multi-agent/#common-patterns","title":"Common Patterns","text":"<p>Pattern 1: Research \u2192 Write <pre><code>researcher: output_key: research\nwriter: uses {research}\n</code></pre></p> <p>Pattern 2: Collect \u2192 Analyze \u2192 Report <pre><code>collector: output_key: data\nanalyzer: uses {data}, output_key: insights\nreporter: uses {data} and {insights}\n</code></pre></p> <p>Pattern 3: Parallel Gather \u2192 Synthesize <pre><code>agent_a: output_key: findings_a\nagent_b: output_key: findings_b\nagent_c: output_key: findings_c\nsynthesizer: uses {findings_a}, {findings_b}, {findings_c}\n</code></pre></p> <p>Pattern 4: Draft \u2192 Iterate \u2192 Finalize <pre><code>drafter: output_key: draft\nrefiner_loop: uses {draft}, overwrites output_key: draft\nfinalizer: uses {draft}\n</code></pre></p>"},{"location":"advanced/multi-agent/#troubleshooting","title":"Troubleshooting","text":"<p>Placeholder not replaced (shows <code>{keyName}</code> in output):</p> <p>Check: - \u2705 The earlier agent has <code>output_key</code> defined - \u2705 The earlier agent completed successfully - \u2705 Key name matches exactly (case-sensitive) - \u2705 Agents ran in the correct order</p> <p>Missing or incorrect data:</p> <p>Verify: - \u2705 The coordinator delegates to agents in the right sequence - \u2705 The agent that saves the output ran before the agent that uses it - \u2705 No typos in key names</p> <p>Data not available in next conversation:</p> <p>Remember: - Saved outputs only last for one conversation turn - For data that needs to persist between conversations, use the <code>memory-server</code> toolset</p>"},{"location":"advanced/multi-agent/#team-patterns","title":"Team Patterns","text":""},{"location":"advanced/multi-agent/#hub-and-spoke","title":"Hub-and-Spoke","text":"<p>One coordinator routes requests to specialized agents.</p> <p>Structure: <pre><code>      Coordinator\n      /    |    \\\n     /     |     \\\n  Agent  Agent  Agent\n    A      B      C\n</code></pre></p> <p>When to use: - Multiple specialist domains - Clear routing logic - Independent specialist tasks</p> <p>Example: <pre><code>version: \"1\"\nid: customer-support\nname: Customer Support Team\ndescription: Routes support tickets to appropriate specialists\ninteractive: true\ndefault_agent: coordinator\n\nagents:\n  coordinator:\n    type: llm\n    name: Support Coordinator\n    description: Routes tickets based on issue type\n    instructions:\n      - |\n        Analyze the customer's issue and route:\n          - Technical problems \u2192 transfer_task to technical_support\n          - Billing questions \u2192 transfer_task to billing_support\n          - Account issues \u2192 transfer_task to account_support\n\n          Provide context when delegating.\n    sub_agents:\n      - technical_support\n      - billing_support\n      - account_support\n\n  technical_support:\n    type: llm\n    name: Technical Support Specialist\n    description: Handles technical issues\n    instructions:\n      - |\n        Diagnose and resolve technical problems.\n          Provide step-by-step solutions with documentation links.\n    toolsets:\n      - memory-server\n\n  billing_support:\n    type: llm\n    name: Billing Support Specialist\n    description: Handles billing inquiries\n    instructions:\n      - |\n        Address billing questions, process refunds, update payment methods.\n          Always verify account ownership first.\n    toolsets:\n      - memory-server\n\n  account_support:\n    type: llm\n    name: Account Support Specialist\n    description: Handles account management\n    instructions:\n      - |\n        Assist with passwords, settings, security, and account deletion.\n          Security-first approach - verify identity before changes.\n    toolsets:\n      - memory-server\n</code></pre></p> <p>Benefits: - \u2705 Clear separation of concerns - \u2705 Easy to add new specialists - \u2705 Simple routing logic</p> <p>Trade-offs: - \u26a0\ufe0f Coordinator becomes bottleneck - \u26a0\ufe0f No direct communication between specialists</p>"},{"location":"advanced/multi-agent/#hierarchical-delegation","title":"Hierarchical Delegation","text":"<p>Multi-level coordination with teams managing teams.</p> <p>Structure: <pre><code>    Project Manager\n          |\n    Team Lead\n      /      \\\n  Agent A   Agent B\n</code></pre></p> <p>When to use: - Complex projects with sub-projects - Multiple levels of expertise - Workflow requires coordination at different levels</p> <p>Example: <pre><code>version: \"1\"\nid: content-production\nname: Content Production Team\ndescription: Manages multi-stage content creation with research, writing, and editing teams\ninteractive: true\ndefault_agent: project_manager\n\nagents:\n  project_manager:\n    type: llm\n    name: Project Manager\n    description: Oversees entire content production\n    instructions:\n      - |\n          Coordinate content creation:\n          1. Understand requirements\n          2. Delegate to research_team_lead\n          3. Then delegate to writing_team_lead with research\n          4. Review final output\n    sub_agents:\n      - research_team_lead\n      - writing_team_lead\n\n  research_team_lead:\n    type: llm\n    name: Research Team Lead\n    description: Coordinates research efforts\n    instructions:\n      - |\n          Manage research phase:\n          - Assign specific research angles to specialists\n          - Synthesize findings\n          - Create research brief\n    sub_agents:\n      - academic_researcher\n      - news_researcher\n      - expert_researcher\n\n  academic_researcher:\n    type: llm\n    name: Academic Researcher\n    description: Researches academic sources\n    toolsets:\n      - duckduckgo\n\n  news_researcher:\n    type: llm\n    name: News Researcher\n    description: Researches current news\n    toolsets:\n      - duckduckgo\n\n  expert_researcher:\n    type: llm\n    name: Expert Researcher\n    description: Researches expert opinions\n    toolsets:\n      - duckduckgo\n\n  writing_team_lead:\n    type: llm\n    name: Writing Team Lead\n    description: Coordinates writing and editing\n    instructions:\n      - |\n          Manage writing phase:\n          1. Have writer create draft from research\n          2. Have editor polish the draft\n          3. Deliver final version\n    sub_agents:\n      - content_writer\n      - copy_editor\n\n  content_writer:\n    type: llm\n    name: Content Writer\n    description: Writes content\n    model: anthropic\n\n  copy_editor:\n    type: llm\n    name: Copy Editor\n    description: Edits and polishes\n    model: anthropic\n</code></pre></p> <p>Benefits: - \u2705 Scales to complex workflows - \u2705 Clear chain of command - \u2705 Specialized team coordination</p> <p>Trade-offs: - \u26a0\ufe0f More complexity to manage - \u26a0\ufe0f Longer execution paths - \u26a0\ufe0f Coordination overhead</p>"},{"location":"advanced/multi-agent/#parallel-processing","title":"Parallel Processing","text":"<p>Multiple agents execute simultaneously.</p> <p>Structure: <pre><code>  Parallel Coordinator\n    /    |    \\\n   /     |     \\\nAgent   Agent  Agent\n  A       B      C\n\n(All execute concurrently)\n</code></pre></p> <p>When to use: - Independent tasks - Multi-perspective analysis - Batch processing - Time-sensitive workflows</p> <p>Example: <pre><code>version: \"1\"\nid: product-analyzer\nname: Product Analysis Team\ndescription: Analyzes products from multiple perspectives simultaneously\ndefault_agent: comprehensive_analyzer\n\nagents:\n  comprehensive_analyzer:\n    type: parallel\n    name: Multi-Perspective Analyzer\n    description: Coordinates parallel analysis\n    instructions:\n      - |\n          Synthesize insights from all perspectives:\n\n          1. **Overview** - Combined assessment\n          2. **Technical Analysis** - From technical_analyst\n          3. **Business Analysis** - From business_analyst\n          4. **User Analysis** - From user_analyst\n          5. **Recommendations** - Based on all perspectives\n    sub_agents:\n      - technical_analyst\n      - business_analyst\n      - user_analyst\n\n  technical_analyst:\n    type: llm\n    name: Technical Analyst\n    description: Technical feasibility assessment\n    instructions:\n      - |\n          Analyze technical aspects:\n          - Implementation complexity\n          - Scalability\n          - Security considerations\n          - Technical risks\n          - Maintenance requirements\n\n  business_analyst:\n    type: llm\n    name: Business Analyst\n    description: Business value assessment\n    instructions:\n      - |\n          Analyze business aspects:\n          - Market opportunity\n          - ROI potential\n          - Competitive advantage\n          - Resource requirements\n          - Business risks\n\n  user_analyst:\n    type: llm\n    name: User Experience Analyst\n    description: User impact assessment\n    instructions:\n      - |\n          Analyze user aspects:\n          - User value\n          - Usability\n          - Accessibility\n          - Adoption barriers\n          - User satisfaction potential\n</code></pre></p> <p>Benefits: - \u2705 Faster execution (concurrent) - \u2705 Multiple perspectives - \u2705 Independent analysis</p> <p>Trade-offs: - \u26a0\ufe0f Cannot use tools in parallel agent (only sub-agents) - \u26a0\ufe0f Results must be synthesized - \u26a0\ufe0f No communication between executing agents</p>"},{"location":"advanced/multi-agent/#sequential-pipeline","title":"Sequential Pipeline","text":"<p>Ordered processing through defined stages.</p> <p>Structure: <pre><code>Stage 1 \u2192 Stage 2 \u2192 Stage 3 \u2192 Stage 4\n</code></pre></p> <p>When to use: - Multi-stage processes - Each stage depends on previous - Quality gates between stages - Progressive refinement</p> <p>Example: <pre><code>version: \"1\"\nid: report-generator\nname: Report Generation Team\ndescription: Generates business reports through structured pipeline\ndefault_agent: report_pipeline\n\nagents:\n  report_pipeline:\n    type: sequence\n    name: Report Generation Pipeline\n    description: Sequential report creation\n    instructions:\n      - |\n          Generate comprehensive report through stages:\n          1. Data collection and validation\n          2. Statistical analysis\n          3. Visualization recommendations\n          4. Executive summary writing\n    sub_agents:\n      - data_collector\n      - data_analyst\n      - visualization_specialist\n      - summary_writer\n\n  data_collector:\n    type: llm\n    name: Data Collector\n    description: Collects and validates data\n    instructions:\n      - |\n          Stage 1: Data Collection\n          - Gather required data\n          - Validate completeness\n          - Check for anomalies\n          - Organize for analysis\n\n  data_analyst:\n    type: llm\n    name: Data Analyst\n    description: Analyzes data statistically\n    instructions:\n      - |\n          Stage 2: Analysis\n          - Calculate key metrics\n          - Identify trends\n          - Perform statistical tests\n          - Generate insights\n\n  visualization_specialist:\n    type: llm\n    name: Visualization Specialist\n    description: Designs visualizations\n    instructions:\n      - |\n          Stage 3: Visualizations\n          - Recommend chart types\n          - Design visual layouts\n          - Specify data presentation\n          - Highlight key findings\n\n  summary_writer:\n    type: llm\n    name: Executive Summary Writer\n    description: Writes executive summary\n    model: anthropic\n    instructions:\n      - |\n          Stage 4: Summary\n          - Write executive overview\n          - Highlight key findings\n          - Provide recommendations\n          - Include next steps\n</code></pre></p> <p>Benefits: - \u2705 Clear workflow stages - \u2705 Quality control at each step - \u2705 Each stage specialized</p> <p>Trade-offs: - \u26a0\ufe0f Sequential (not parallel) - \u26a0\ufe0f Failure in one stage blocks later stages - \u26a0\ufe0f Cannot use tools in sequence agent (only sub-agents)</p>"},{"location":"advanced/multi-agent/#loop-refinement","title":"Loop Refinement","text":"<p>Iterative improvement through repeated execution.</p> <p>Structure: <pre><code>Input \u2192 Agent \u2192 Output \u2192 Agent \u2192 Output \u2192 Agent \u2192 Final\n       (Iteration 1)    (Iteration 2)    (Iteration 3)\n</code></pre></p> <p>When to use: - Content refinement - Progressive improvement - Quality iteration - Problem solving</p> <p>Example: <pre><code>version: \"1\"\nid: content-refiner\nname: Content Refinement Team\ndescription: Iteratively refines content to perfection\ndefault_agent: refinement_loop\n\nagents:\n  refinement_loop:\n    type: loop\n    name: Content Refinement Loop\n    max_iterations: 3\n    description: Iteratively improves content\n    instructions:\n      - |\n          Refinement strategy:\n          - Iteration 1: Structure and organization\n          - Iteration 2: Clarity and language\n          - Iteration 3: Style and polish\n\n          Each iteration builds on the previous.\n    sub_agents:\n      - content_improver\n\n  content_improver:\n    type: llm\n    name: Content Improver\n    description: Improves content each iteration\n    model: anthropic\n    instructions:\n      - |\n          Improve the content:\n          - Fix issues from previous iteration\n          - Enhance clarity and flow\n          - Strengthen arguments\n          - Polish language\n          - Maintain core message\n</code></pre></p> <p>Benefits: - \u2705 Progressive improvement - \u2705 Quality refinement - \u2705 Converges to better output</p> <p>Trade-offs: - \u26a0\ufe0f Cost increases linearly with iterations - \u26a0\ufe0f Diminishing returns after 3-4 iterations - \u26a0\ufe0f Must have exactly 1 sub-agent</p>"},{"location":"advanced/multi-agent/#combining-patterns","title":"Combining Patterns","text":"<p>Mix patterns for sophisticated workflows.</p>"},{"location":"advanced/multi-agent/#parallel-sequential","title":"Parallel + Sequential","text":"<p>Parallel research feeding into sequential writing:</p> <pre><code>version: \"1\"\nid: research-writing-team\nname: Research &amp; Writing Team\ndescription: Parallel research followed by sequential content creation\ninteractive: true\ndefault_agent: coordinator\n\nagents:\n  coordinator:\n    type: llm\n    name: Project Coordinator\n    description: Coordinates overall workflow\n    instructions:\n      - |\n          Two-phase workflow:\n          1. Parallel research phase \u2192 multi_source_researcher\n          2. Sequential writing phase \u2192 content_pipeline\n    sub_agents:\n      - multi_source_researcher\n      - content_pipeline\n\n  # PARALLEL: Research from multiple sources\n  multi_source_researcher:\n    type: parallel\n    name: Multi-Source Researcher\n    description: Researches from multiple angles\n    instructions:\n      - |\n          Synthesize research from all sources:\n          - Academic findings\n          - News and trends\n          - Expert opinions\n          - Create comprehensive research brief\n    sub_agents:\n      - academic_researcher\n      - news_researcher\n      - expert_researcher\n\n  academic_researcher:\n    type: llm\n    name: Academic Researcher\n    toolsets:\n      - duckduckgo\n\n  news_researcher:\n    type: llm\n    name: News Researcher\n    toolsets:\n      - duckduckgo\n\n  expert_researcher:\n    type: llm\n    name: Expert Researcher\n    toolsets:\n      - duckduckgo\n\n  # SEQUENTIAL: Writing pipeline\n  content_pipeline:\n    type: sequence\n    name: Content Creation Pipeline\n    description: Sequential content creation\n    instructions:\n      - |\n          Create content through stages:\n          1. Draft from research\n          2. SEO optimization\n          3. Final editing\n    sub_agents:\n      - draft_writer\n      - seo_optimizer\n      - copy_editor\n\n  draft_writer:\n    type: llm\n    name: Draft Writer\n    model: anthropic\n\n  seo_optimizer:\n    type: llm\n    name: SEO Optimizer\n\n  copy_editor:\n    type: llm\n    name: Copy Editor\n    model: anthropic\n</code></pre>"},{"location":"advanced/multi-agent/#hub-and-spoke-loop","title":"Hub-and-Spoke + Loop","text":"<p>Coordinator routes to specialists, including a refinement loop:</p> <pre><code>version: \"1\"\nid: content-team\nname: Content Team\ndescription: Routes content requests with iterative refinement option\ninteractive: true\ndefault_agent: coordinator\n\nagents:\n  coordinator:\n    type: llm\n    name: Content Coordinator\n    description: Routes content requests\n    instructions:\n      - |\n          Route based on request:\n          - New content \u2192 quick_writer\n          - Existing content to improve \u2192 refinement_loop\n          - Research needed \u2192 researcher\n    sub_agents:\n      - quick_writer\n      - refinement_loop\n      - researcher\n\n  quick_writer:\n    type: llm\n    name: Quick Writer\n    description: Creates new content quickly\n    model: anthropic\n\n  refinement_loop:\n    type: loop\n    max_iterations: 3\n    name: Content Refinement Loop\n    description: Iteratively improves existing content\n    instructions:\n      - |\n          Progressive refinement over 3 iterations\n    sub_agents:\n      - content_polisher\n\n  content_polisher:\n    type: llm\n    name: Content Polisher\n    model: anthropic\n\n  researcher:\n    type: llm\n    name: Researcher\n    toolsets:\n      - duckduckgo\n</code></pre>"},{"location":"advanced/multi-agent/#workflow-design-best-practices","title":"Workflow Design Best Practices","text":""},{"location":"advanced/multi-agent/#keep-it-simple","title":"Keep It Simple","text":"<p>Start with simple patterns and add complexity only when needed.</p> <p>Good - Start simple: <pre><code># Single coordinator with specialists\nagents:\n  coordinator:\n    sub_agents:\n      - specialist_a\n      - specialist_b\n</code></pre></p> <p>Bad - Overly complex: <pre><code># Unnecessary hierarchy\nagents:\n  top_coordinator:\n    sub_agents:\n      - mid_coordinator_1\n        sub_agents:\n          - low_coordinator_1\n            sub_agents:\n              - specialist\n</code></pre></p>"},{"location":"advanced/multi-agent/#clear-responsibilities","title":"Clear Responsibilities","text":"<p>Each agent should have clear, focused responsibility.</p> <p>Good: <pre><code>technical_support:\n  description: Handles technical issues and bugs\n\nbilling_support:\n  description: Handles billing and payment questions\n</code></pre></p> <p>Bad: <pre><code>general_support:\n  description: Handles everything\n</code></pre></p>"},{"location":"advanced/multi-agent/#minimize-delegation-depth","title":"Minimize Delegation Depth","text":"<p>Avoid deep delegation chains.</p> <p>Good - 2 levels: <pre><code>Coordinator \u2192 Specialist\n</code></pre></p> <p>Acceptable - 3 levels: <pre><code>Manager \u2192 Team Lead \u2192 Specialist\n</code></pre></p> <p>Bad - Too deep: <pre><code>Executive \u2192 Manager \u2192 Lead \u2192 Coordinator \u2192 Specialist\n</code></pre></p>"},{"location":"advanced/multi-agent/#use-appropriate-types","title":"Use Appropriate Types","text":"<p>Choose the right agent type for the workflow.</p> <p>Parallel for independent tasks: <pre><code># Good - Independent analysis\nmulti_analyst:\n  type: parallel\n  sub_agents:\n    - technical_analyst\n    - business_analyst\n    - user_analyst\n</code></pre></p> <p>Sequential for dependent stages: <pre><code># Good - Each stage needs previous output\npipeline:\n  type: sequence\n  sub_agents:\n    - stage_1_collector\n    - stage_2_processor\n    - stage_3_formatter\n</code></pre></p> <p>Loop for refinement: <pre><code># Good - Iterative improvement\nrefiner:\n  type: loop\n  max_iterations: 3\n  sub_agents:\n    - content_improver\n</code></pre></p>"},{"location":"advanced/multi-agent/#common-patterns_1","title":"Common Patterns","text":""},{"location":"advanced/multi-agent/#content-creation-factory","title":"Content Creation Factory","text":"<pre><code># Parallel research \u2192 Sequential creation \u2192 Loop refinement\nresearcher (parallel)\n  \u2192 writer (sequence)\n    \u2192 refiner (loop)\n</code></pre>"},{"location":"advanced/multi-agent/#customer-service-router","title":"Customer Service Router","text":"<pre><code># Hub-and-spoke with specialized agents\ncoordinator\n  \u251c\u2500\u2500 technical_support\n  \u251c\u2500\u2500 billing_support\n  \u2514\u2500\u2500 account_support\n</code></pre>"},{"location":"advanced/multi-agent/#data-processing-pipeline","title":"Data Processing Pipeline","text":"<pre><code># Sequential stages\ncollector \u2192 validator \u2192 analyzer \u2192 reporter\n</code></pre>"},{"location":"advanced/multi-agent/#multi-perspective-analyzer","title":"Multi-Perspective Analyzer","text":"<pre><code># Parallel analysis\nanalyzer (parallel)\n  \u251c\u2500\u2500 perspective_1\n  \u251c\u2500\u2500 perspective_2\n  \u2514\u2500\u2500 perspective_3\n</code></pre>"},{"location":"advanced/multi-agent/#debugging-multi-agent-workflows","title":"Debugging Multi-Agent Workflows","text":""},{"location":"advanced/multi-agent/#trace-execution-flow","title":"Trace Execution Flow","text":"<p>Use clear logging in instructions:</p> <pre><code>coordinator:\n  instructions:\n    - |\n        [COORDINATOR] Analyzing request type...\n        [COORDINATOR] Routing to technical_support\n\ntechnical_support:\n  instructions:\n    - |\n        [TECHNICAL_SUPPORT] Received request from coordinator\n        [TECHNICAL_SUPPORT] Processing technical issue...\n</code></pre>"},{"location":"advanced/multi-agent/#test-individual-agents","title":"Test Individual Agents","text":"<p>Test each agent independently before integration:</p> <pre><code># Test agent in isolation\ntest_technical_support:\n  # Same as technical_support but standalone\n  # Test with sample inputs\n</code></pre>"},{"location":"advanced/multi-agent/#validate-delegation-logic","title":"Validate Delegation Logic","text":"<p>Ensure routing logic is clear and correct:</p> <pre><code>coordinator:\n  instructions:\n    - |\n          Routing logic:\n          - \"error\" OR \"bug\" \u2192 technical_support\n          - \"payment\" OR \"invoice\" OR \"refund\" \u2192 billing_support\n          - \"password\" OR \"login\" OR \"account\" \u2192 account_support\n\n          Log routing decision for debugging.\n</code></pre>"},{"location":"advanced/multi-agent/#performance-considerations","title":"Performance Considerations","text":""},{"location":"advanced/multi-agent/#execution-time","title":"Execution Time","text":"Pattern Time Complexity Notes Hub-and-Spoke 2\u00d7 (coordinator + specialist) Simple routing overhead Hierarchical 3-4\u00d7 (multiple levels) Each level adds overhead Parallel ~1\u00d7 (as slow as slowest) Concurrent execution Sequential N\u00d7 (N = stages) Each stage is sequential Loop N\u00d7 (N = iterations) Linear with iterations"},{"location":"advanced/multi-agent/#cost-optimization","title":"Cost Optimization","text":"<p>Parallel processing: - Higher total LLM calls - Lower wall-clock time - Good for time-sensitive workflows</p> <p>Sequential processing: - Same total LLM calls as parallel - Higher wall-clock time - Good for dependent stages</p> <p>Loop refinement: - Cost increases with iterations - Keep iterations to 2-4 - Diminishing returns after that</p>"},{"location":"advanced/multi-agent/#next-steps","title":"Next Steps","text":"<ul> <li>Agent Types - Understanding LLM, Parallel, Loop, Sequence</li> <li>Agent Examples - Complete team templates</li> <li>Creating Teams - Building teams</li> <li>Settings - Runtime configuration</li> <li>Conditional Instructions - Dynamic behavior</li> </ul> <p>Related: Agent Types | Agent Examples | Configuration</p>"},{"location":"advanced/multi-persona/","title":"Multi-Persona Workflows","text":"<p>Master complex agent orchestration with multiple specialized personas.</p>"},{"location":"advanced/multi-persona/#overview","title":"Overview","text":"<p>Multi-persona agents combine specialized roles to handle complex workflows that require:</p> <ul> <li>Domain expertise across multiple areas</li> <li>Sequential processing steps</li> <li>Parallel specialist consultation</li> <li>Quality control and review</li> <li>Coordinated task execution</li> </ul>"},{"location":"advanced/multi-persona/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"advanced/multi-persona/#pattern-1-coordinator-specialist","title":"Pattern 1: Coordinator-Specialist","text":"<p>One coordinator manages multiple specialists.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Coordinator    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502         \u2502        \u2502        \u2502\n\u250c\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u25bc\u2500\u2500\u2500\u2510\n\u2502Spec A \u2502 \u2502Spec B\u2502 \u2502Spec C\u2502 \u2502Spec D\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Example:</p> <pre><code>{\n  \"id\": \"support-router\",\n  \"name\": \"Customer Support Router\",\n  \"description\": \"Routes support tickets to appropriate specialists\",\n  \"interactive\": true,\n  \"agents\": [\n    {\n      \"name\": \"coordinator\",\n      \"description\": \"Routes tickets to specialists\",\n      \"instructions\": [\n        {\n          \"content\": \"Analyze support requests and delegate to:\\n- technical_support for bugs and technical issues\\n- billing_support for payment questions\\n- account_support for account access\\n\\nUse transfer_task to delegate.\"\n        }\n      ],\n      \"subAgents\": [\"technical_support\", \"billing_support\", \"account_support\"]\n    },\n    {\n      \"name\": \"technical_support\",\n      \"description\": \"Handles technical issues\",\n      \"instructions\": [\n        {\"content\": \"Provide technical troubleshooting...\"}\n      ]\n    },\n    {\n      \"name\": \"billing_support\",\n      \"description\": \"Handles billing inquiries\",\n      \"instructions\": [\n        {\"content\": \"Address payment questions...\"}\n      ]\n    },\n    {\n      \"name\": \"account_support\",\n      \"description\": \"Handles account management\",\n      \"instructions\": [\n        {\"content\": \"Assist with account settings...\"}\n      ]\n    }\n  ]\n}\n</code></pre> <p>When to use: - Support routing - Request triage - Domain-specific consultation - Parallel specialist input</p>"},{"location":"advanced/multi-persona/#pattern-2-sequential-pipeline","title":"Pattern 2: Sequential Pipeline","text":"<p>Tasks flow through defined sequence.</p> <pre><code>Request \u2192 Step 1 \u2192 Step 2 \u2192 Step 3 \u2192 Result\n</code></pre> <p>Example: Content Creation</p> <pre><code>{\n  \"id\": \"content-pipeline\",\n  \"name\": \"Content Creation Pipeline\",\n  \"description\": \"Creates content through research, writing, and editing stages\",\n  \"interactive\": true,\n  \"agents\": [\n    {\n      \"name\": \"project_manager\",\n      \"description\": \"Manages content creation workflow\",\n      \"instructions\": [\n        {\n          \"content\": \"Coordinate content creation:\\n1. Delegate to researcher for information gathering\\n2. Send research to writer for content creation\\n3. Send draft to editor for review\\n4. Present final content\\n\\nEnsure quality at each stage.\"\n        }\n      ],\n      \"subAgents\": [\"researcher\", \"writer\", \"editor\"]\n    },\n    {\n      \"name\": \"researcher\",\n      \"description\": \"Gathers information\",\n      \"instructions\": [\n        {\"content\": \"Research topic thoroughly. Find facts, statistics, expert opinions. Cite all sources.\"}\n      ],\n      \"toolsets\": [\"duckduckgo\"]\n    },\n    {\n      \"name\": \"writer\",\n      \"description\": \"Creates content\",\n      \"instructions\": [\n        {\"content\": \"Write engaging content based on research. Use clear structure: intro, body, conclusion.\"}\n      ]\n    },\n    {\n      \"name\": \"editor\",\n      \"description\": \"Reviews and improves\",\n      \"instructions\": [\n        {\"content\": \"Edit for grammar, clarity, flow, and accuracy. Note improvements made.\"}\n      ]\n    }\n  ]\n}\n</code></pre> <p>When to use: - Content creation (research \u2192 write \u2192 edit) - Order processing (validate \u2192 process \u2192 fulfill) - Report generation (collect \u2192 analyze \u2192 format) - Quality workflows (create \u2192 review \u2192 approve)</p>"},{"location":"advanced/multi-persona/#pattern-3-hierarchical-delegation","title":"Pattern 3: Hierarchical Delegation","text":"<p>Multi-level coordination.</p> <pre><code>             Project Manager\n                    \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                       \u2502\n   Team Lead A            Team Lead B\n        \u2502                       \u2502\n   \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510             \u250c\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2510\n   \u2502         \u2502             \u2502         \u2502\nWorker A1  Worker A2   Worker B1  Worker B2\n</code></pre> <p>Example: Research Project</p> <pre><code>{\n  \"id\": \"research-project\",\n  \"name\": \"Research Project Manager\",\n  \"description\": \"Manages complex research projects with multiple teams\",\n  \"interactive\": true,\n  \"agents\": [\n    {\n      \"name\": \"project_manager\",\n      \"description\": \"Oversees entire project\",\n      \"instructions\": [\n        {\"content\": \"Coordinate research project:\\n1. Define research scope\\n2. Delegate to team leads\\n3. Synthesize findings\\n4. Present comprehensive report\"}\n      ],\n      \"subAgents\": [\"data_team_lead\", \"analysis_team_lead\"]\n    },\n    {\n      \"name\": \"data_team_lead\",\n      \"description\": \"Manages data collection team\",\n      \"instructions\": [\n        {\"content\": \"Coordinate data collection:\\n1. Delegate to web_researcher\\n2. Delegate to data_analyst\\n3. Compile findings\"}\n      ],\n      \"subAgents\": [\"web_researcher\", \"data_analyst\"]\n    },\n    {\n      \"name\": \"analysis_team_lead\",\n      \"description\": \"Manages analysis team\",\n      \"instructions\": [\n        {\"content\": \"Coordinate analysis:\\n1. Receive data from data team\\n2. Delegate analysis tasks\\n3. Generate insights\"}\n      ],\n      \"subAgents\": [\"statistical_analyst\", \"report_writer\"]\n    },\n    {\n      \"name\": \"web_researcher\",\n      \"description\": \"Researches online sources\",\n      \"instructions\": [{\"content\": \"Search and gather information...\"}],\n      \"toolsets\": [\"duckduckgo\"]\n    },\n    {\n      \"name\": \"data_analyst\",\n      \"description\": \"Analyzes collected data\",\n      \"instructions\": [{\"content\": \"Process and analyze data...\"}]\n    },\n    {\n      \"name\": \"statistical_analyst\",\n      \"description\": \"Performs statistical analysis\",\n      \"instructions\": [{\"content\": \"Apply statistical methods...\"}]\n    },\n    {\n      \"name\": \"report_writer\",\n      \"description\": \"Writes final report\",\n      \"instructions\": [{\"content\": \"Create comprehensive report...\"}]\n    }\n  ]\n}\n</code></pre> <p>When to use: - Large projects - Complex organizations - Multi-stage workflows - Enterprise systems</p>"},{"location":"advanced/multi-persona/#delegation-mechanics","title":"Delegation Mechanics","text":""},{"location":"advanced/multi-persona/#using-transfer_task","title":"Using transfer_task","text":"<p>The <code>transfer_task</code> tool is automatically available to personas with <code>subAgents</code>.</p> <p>Coordinator instructions:</p> <pre><code>{\n  \"name\": \"coordinator\",\n  \"subAgents\": [\"specialist_a\", \"specialist_b\"],\n  \"instructions\": [\n    {\n      \"content\": \"Coordinate tasks:\\n\\n**Delegation:**\\n1. Analyze request to determine which specialist is needed\\n2. Use transfer_task with:\\n   - target_persona: Name of specialist\\n   - task_description: Clear description of what to do\\n3. Wait for specialist to complete\\n4. Process results and present to user\\n\\n**Available specialists:**\\n- specialist_a: Handles X type tasks\\n- specialist_b: Handles Y type tasks\"\n    }\n  ]\n}\n</code></pre>"},{"location":"advanced/multi-persona/#delegation-best-practices","title":"Delegation Best Practices","text":"<p>DO: - Provide clear task descriptions - One specialist at a time - Wait for completion before next delegation - Process specialist results before presenting to user</p> <p>DON'T: - Delegate to unavailable personas - Try to delegate multiple tasks simultaneously - Skip result processing - Delegate without clear purpose</p>"},{"location":"advanced/multi-persona/#tool-distribution","title":"Tool Distribution","text":""},{"location":"advanced/multi-persona/#who-gets-tools","title":"Who Gets Tools?","text":"<p>Coordinators: Usually no tools - Just delegate via <code>transfer_task</code> - Focus on workflow management</p> <p>Specialists: Tools as needed - Each specialist gets required tools - Minimal tool overlap</p> <p>Example:</p> <pre><code>{\n  \"agents\": [\n    {\n      \"name\": \"coordinator\",\n      \"subAgents\": [\"researcher\", \"writer\"],\n      \"toolsets\": []  // No tools needed\n    },\n    {\n      \"name\": \"researcher\",\n      \"toolsets\": [\"duckduckgo\"]  // Needs web search\n    },\n    {\n      \"name\": \"writer\",\n      \"toolsets\": []  // No tools needed, uses research\n    }\n  ]\n}\n</code></pre>"},{"location":"advanced/multi-persona/#state-management","title":"State Management","text":""},{"location":"advanced/multi-persona/#context-preservation","title":"Context Preservation","text":"<p>Specialists inherit context from coordinator: - User's original request - Conversation history - Previous specialist outputs</p>"},{"location":"advanced/multi-persona/#passing-information","title":"Passing Information","text":"<p>Coordinator receives specialist output:</p> <pre><code>User: \"Write a blog post about AI\"\n\u2192 Coordinator delegates to researcher\n\u2190 Researcher returns findings\n\u2192 Coordinator delegates to writer with findings\n\u2190 Writer returns draft\n\u2192 Coordinator presents to user\n</code></pre> <p>Specialists don't directly interact:</p> <pre><code>\u274c Researcher \u2192 Writer (direct)\n\u2705 Researcher \u2192 Coordinator \u2192 Writer (via coordinator)\n</code></pre>"},{"location":"advanced/multi-persona/#error-handling","title":"Error Handling","text":""},{"location":"advanced/multi-persona/#specialist-failures","title":"Specialist Failures","text":"<p>Coordinators should handle specialist errors:</p> <pre><code>{\n  \"name\": \"coordinator\",\n  \"instructions\": [\n    {\n      \"content\": \"Error handling:\\n\\n**If specialist fails:**\\n1. Acknowledge the issue to user\\n2. Try alternative approach if available\\n3. Provide partial results if possible\\n4. Escalate if necessary\\n\\n**Don't:**\\n- Expose internal errors to user\\n- Retry indefinitely\\n- Proceed without required information\"\n    }\n  ]\n}\n</code></pre>"},{"location":"advanced/multi-persona/#validation","title":"Validation","text":"<p>Coordinator validates specialist output:</p> <pre><code>{\n  \"content\": \"After receiving specialist results:\\n\\n1. **Validate:**\\n   - Is output complete?\\n   - Does it address the task?\\n   - Is quality acceptable?\\n\\n2. **If invalid:**\\n   - Request clarification/revision\\n   - Provide specific feedback\\n   - Re-delegate if needed\\n\\n3. **If valid:**\\n   - Process results\\n   - Continue workflow\\n   - Present to user\"\n}\n</code></pre>"},{"location":"advanced/multi-persona/#performance-optimization","title":"Performance Optimization","text":""},{"location":"advanced/multi-persona/#minimize-delegations","title":"Minimize Delegations","text":"<p>Inefficient: <pre><code>Coordinator \u2192 A \u2192 Coordinator \u2192 B \u2192 Coordinator \u2192 C\n(3 delegations)\n</code></pre></p> <p>Efficient: <pre><code>Coordinator \u2192 A (includes B and C work)\n(1 delegation)\n</code></pre></p>"},{"location":"advanced/multi-persona/#batch-related-tasks","title":"Batch Related Tasks","text":"<p>Combine similar tasks into one delegation:</p> <p>Before: <pre><code>1. Delegate: \"Search for product reviews\"\n2. Delegate: \"Search for product pricing\"\n3. Delegate: \"Search for product availability\"\n</code></pre></p> <p>After: <pre><code>1. Delegate: \"Search for product reviews, pricing, and availability\"\n</code></pre></p>"},{"location":"advanced/multi-persona/#testing-multi-persona-agents","title":"Testing Multi-Persona Agents","text":""},{"location":"advanced/multi-persona/#test-each-persona","title":"Test Each Persona","text":"<ol> <li>Test base instructions of each persona</li> <li>Verify tools work for each specialist</li> <li>Check error handling at each level</li> </ol>"},{"location":"advanced/multi-persona/#test-delegation-paths","title":"Test Delegation Paths","text":"<ol> <li>Test each delegation route</li> <li>Verify context preservation</li> <li>Check result passing</li> <li>Test error scenarios</li> </ol>"},{"location":"advanced/multi-persona/#test-complete-workflows","title":"Test Complete Workflows","text":"<ol> <li>End-to-end testing</li> <li>Multiple user requests in sequence</li> <li>Edge cases and error conditions</li> <li>Performance under load</li> </ol>"},{"location":"advanced/multi-persona/#common-patterns-library","title":"Common Patterns Library","text":""},{"location":"advanced/multi-persona/#research-write-edit","title":"Research-Write-Edit","text":"<pre><code>{\n  \"agents\": [\n    {\"name\": \"coordinator\", \"subAgents\": [\"researcher\", \"writer\", \"editor\"]},\n    {\"name\": \"researcher\", \"toolsets\": [\"duckduckgo\"]},\n    {\"name\": \"writer\"},\n    {\"name\": \"editor\"}\n  ]\n}\n</code></pre>"},{"location":"advanced/multi-persona/#validate-process-notify","title":"Validate-Process-Notify","text":"<pre><code>{\n  \"agents\": [\n    {\"name\": \"coordinator\", \"subAgents\": [\"validator\", \"processor\", \"notifier\"]},\n    {\"name\": \"validator\"},\n    {\"name\": \"processor\", \"toolsets\": [\"memory-server\"]},\n    {\"name\": \"notifier\", \"toolsets\": [\"notification-server\"]}\n  ]\n}\n</code></pre>"},{"location":"advanced/multi-persona/#triage-route-resolve","title":"Triage-Route-Resolve","text":"<pre><code>{\n  \"agents\": [\n    {\"name\": \"triage\", \"subAgents\": [\"tech_support\", \"billing\", \"account\"]},\n    {\"name\": \"tech_support\"},\n    {\"name\": \"billing\"},\n    {\"name\": \"account\"}\n  ]\n}\n</code></pre>"},{"location":"advanced/multi-persona/#next-steps","title":"Next Steps","text":"<ul> <li>Agent Examples - Complete multi-persona examples</li> <li>Creating Agents - Build your own</li> <li>Settings - Configure behavior dynamically</li> </ul> <p>Related: Agent Overview | Agent Examples | Creating Agents</p>"},{"location":"advanced/settings/","title":"Settings","text":"<p>Runtime configuration that allows users to customize team and agent behavior without code changes.</p>"},{"location":"advanced/settings/#what-are-settings","title":"What are Settings?","text":"<p>Settings are configurable options that:</p> <ul> <li>\ud83c\udf9b\ufe0f Give users control over team behavior</li> <li>\ud83d\udd04 Change at runtime (no code deployment needed)</li> <li>\ud83d\udcdd Integrate with conditional instructions</li> <li>\ud83c\udfaf Enable feature flags and modes</li> <li>\u2699\ufe0f Customize output formats and preferences</li> </ul>"},{"location":"advanced/settings/#basic-settings","title":"Basic Settings","text":""},{"location":"advanced/settings/#simple-boolean-toggle","title":"Simple Boolean Toggle","text":"<pre><code>settings:\n  - name: verbose_mode\n    type: bool\n    title: Verbose Output\n    description: Include detailed explanations in responses\n    defaultValue: false\n</code></pre> <p>Usage in agent: <pre><code>agents:\n  assistant:\n    instructions:\n      - if: \"settings.verbose_mode\"\n        content: |\n          VERBOSE MODE\n          - Provide detailed explanations\n          - Show reasoning process\n          - Include examples and context\n\n      - |\n          STANDARD MODE\n          - Provide concise responses\n          - Focus on key information\n</code></pre></p>"},{"location":"advanced/settings/#string-option","title":"String Option","text":"<pre><code>settings:\n  - name: output_format\n    type: string\n    title: Output Format\n    description: Format for generated content\n    defaultValue: markdown\n</code></pre> <p>Usage in agent: <pre><code>agents:\n  writer:\n    instructions:\n      - if: \"settings.output_format == 'markdown'\"\n        content: |\n          Format output in Markdown:\n          - Use ## for headings\n          - Use **bold** and *italic*\n          - Use bullet points and numbered lists\n          - Use code blocks with ```\n\n      - if: \"settings.output_format == 'html'\"\n        content: |\n          Format output in HTML:\n          - Use &lt;h2&gt; for headings\n          - Use &lt;strong&gt; and &lt;em&gt;\n          - Use &lt;ul&gt; and &lt;ol&gt; for lists\n          - Use &lt;pre&gt;&lt;code&gt; for code\n\n      - if: \"settings.output_format == 'plain_text'\"\n        content: |\n          Format output in plain text:\n          - Use simple headings with caps\n          - No formatting markup\n          - Use dashes for lists\n          - Indent code examples\n</code></pre></p>"},{"location":"advanced/settings/#numeric-setting","title":"Numeric Setting","text":"<pre><code>settings:\n  - name: max_results\n    type: number\n    title: Maximum Results\n    description: Number of results to return\n    defaultValue: 10\n</code></pre> <p>Usage in agent: <pre><code>agents:\n  searcher:\n    toolsets:\n      - product-catalog\n    instructions:\n      - |\n          Search products and return up to {settings.max_results} results.\n          Present top matches based on relevance and quality.\n</code></pre></p>"},{"location":"advanced/settings/#setting-types","title":"Setting Types","text":""},{"location":"advanced/settings/#boolean-settings","title":"Boolean Settings","text":"<p>Use for: - Feature toggles - Mode switches - Enable/disable options</p> <p>Example - Feature Flags: <pre><code>settings:\n  - name: seo_mode\n    type: bool\n    title: SEO Optimization\n    description: Optimize content for search engines\n    defaultValue: false\n\n  - name: include_images\n    type: bool\n    title: Include Images\n    description: Add image suggestions to content\n    defaultValue: true\n\n  - name: fact_check\n    type: bool\n    title: Fact Checking\n    description: Verify claims against multiple sources\n    defaultValue: false\n</code></pre></p> <p>Agent usage: <pre><code>content_writer:\n  instructions:\n    - if: \"settings.seo_mode\"\n      content: |\n        Apply SEO optimization:\n        - Target keyword in title and headings\n        - Meta description under 160 chars\n        - Internal linking opportunities\n        - Image alt text\n\n    - if: \"settings.include_images\"\n      content: |\n        Suggest relevant images:\n        - Describe ideal image for each section\n        - Provide alt text\n        - Note image placement\n\n    - if: \"settings.fact_check\"\n      content: |\n        Fact-check all claims:\n        - Search for authoritative sources\n        - Cross-reference information\n        - Include citations\n\n    - |\n        Create engaging content following standard guidelines.\n</code></pre></p>"},{"location":"advanced/settings/#string-settings","title":"String Settings","text":"<p>Use for: - Predefined options - Output formats - Style preferences - Modes with multiple options</p> <p>Example - Style Preferences: <pre><code>settings:\n  - name: tone\n    type: string\n    title: Content Tone\n    description: Writing style and formality\n    defaultValue: conversational\n\n  - name: length\n    type: string\n    title: Response Length\n    description: Desired response length\n    defaultValue: moderate\n</code></pre></p> <p>Agent usage: <pre><code>assistant:\n  instructions:\n    # Tone variations\n    - if: \"settings.tone == 'professional'\"\n      content: |\n        Professional tone:\n        - Formal language\n        - Third-person perspective\n        - Industry terminology\n        - Authoritative voice\n\n    - if: \"settings.tone == 'conversational'\"\n      content: |\n        Conversational tone:\n        - Friendly, approachable\n        - Second-person (\"you\")\n        - Simple language\n        - Relatable examples\n\n    - if: \"settings.tone == 'friendly'\"\n      content: |\n        Friendly tone:\n        - Warm and welcoming\n        - Personal touches\n        - Encouraging language\n        - Empathetic responses\n\n    - if: \"settings.tone == 'academic'\"\n      content: |\n        Academic tone:\n        - Scholarly language\n        - Evidence-based\n        - Formal citations\n        - Objective analysis\n\n    - if: \"settings.tone == 'humorous'\"\n      content: |\n        Humorous tone:\n        - Light and entertaining\n        - Appropriate jokes\n        - Witty observations\n        - Playful language\n\n    # Length variations\n    - if: \"settings.length == 'brief'\"\n      content: |\n        Keep responses brief (1-2 paragraphs).\n        Focus on essential information only.\n\n    - if: \"settings.length == 'moderate'\"\n      content: |\n        Provide moderate detail (3-5 paragraphs).\n        Include key points with some elaboration.\n\n    - if: \"settings.length == 'detailed'\"\n      content: |\n        Provide comprehensive detail (6+ paragraphs).\n        Include examples, context, and thorough explanations.\n</code></pre></p>"},{"location":"advanced/settings/#number-settings","title":"Number Settings","text":"<p>Use for: - Limits and thresholds - Quantity preferences - Numeric parameters</p> <p>Example - Numeric Controls: <pre><code>settings:\n  - name: max_results\n    type: number\n    title: Maximum Results\n    description: Maximum number of search results\n    defaultValue: 10\n\n  - name: price_limit\n    type: number\n    title: Price Limit\n    description: Maximum price in USD\n    defaultValue: 100\n\n  - name: target_word_count\n    type: number\n    title: Target Word Count\n    description: Desired article length\n    defaultValue: 1500\n</code></pre></p> <p>Agent usage: <pre><code>shopping_agent:\n  instructions:\n    - |\n        Product recommendations:\n        - Return up to {settings.max_results} products\n        - Filter out items over ${settings.price_limit}\n        - Sort by relevance and value\n        - Present in order of match quality\n</code></pre></p>"},{"location":"advanced/settings/#conditional-instructions-with-settings","title":"Conditional Instructions with Settings","text":""},{"location":"advanced/settings/#simple-conditions","title":"Simple Conditions","text":"<p>Check if setting is true (implicit): <pre><code>instructions:\n  - if: \"settings.expert_mode\"\n    content: |\n      Expert mode active - provide technical details\n</code></pre></p> <p>Check if setting is true (explicit): <pre><code>instructions:\n  - if: \"settings.expert_mode == true\"\n    content: |\n      Expert mode active - provide technical details\n</code></pre></p> <p>Check if setting is false: <pre><code>instructions:\n  - if: \"settings.expert_mode == false\"\n    content: |\n      Standard mode - use accessible language\n</code></pre></p> <p>String equality: <pre><code>instructions:\n  - if: \"settings.format == \\\"json\\\"\"\n    content: |\n      Output in JSON format\n</code></pre></p>"},{"location":"advanced/settings/#multiple-conditions-pattern","title":"Multiple Conditions Pattern","text":"<p>Since logical operators (<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>, <code>!=</code>) are NOT supported, use separate conditional blocks:</p> <p>Instead of AND (expert AND verbose): <pre><code># \u274c NOT SUPPORTED: settings.expert_mode &amp;&amp; settings.verbose\n\n# \u2705 CORRECT: Use two separate conditionals\ninstructions:\n  - if: \"settings.expert_mode == true\"\n    content: |\n      Expert mode instructions\n\n  - if: \"settings.verbose == true\"\n    content: |\n      Verbose mode instructions\n</code></pre></p> <p>Instead of OR (markdown OR html): <pre><code># \u274c NOT SUPPORTED: settings.format == 'markdown' || settings.format == 'html'\n\n# \u2705 CORRECT: Use separate conditionals for each case\ninstructions:\n  - if: \"settings.format == \\\"markdown\\\"\"\n    content: |\n      Use Markdown formatting\n\n  - if: \"settings.format == \\\"html\\\"\"\n    content: |\n      Use HTML formatting\n</code></pre></p> <p>Supported Operators: - \u2705 <code>==</code> (equality for booleans, strings, and numbers) - \u2705 <code>!=</code> (inequality for booleans, strings, and numbers) - \u274c <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> (NOT supported) - \u274c <code>&amp;&amp;</code>, <code>||</code>, <code>!</code> (NOT supported)</p> <p>See Conditional Instructions for more details.</p>"},{"location":"advanced/settings/#common-setting-patterns","title":"Common Setting Patterns","text":""},{"location":"advanced/settings/#feature-flags","title":"Feature Flags","text":"<p>Enable/disable functionality:</p> <pre><code>settings:\n  - name: enable_web_search\n    type: bool\n    title: Enable Web Search\n    description: Allow searching the web for current information\n    defaultValue: true\n\n  - name: enable_notifications\n    type: bool\n    title: Enable Notifications\n    description: Send push notifications for updates\n    defaultValue: false\n\n  - name: enable_memory\n    type: bool\n    title: Enable Memory\n    description: Remember preferences and context\n    defaultValue: true\n</code></pre> <p>Agent usage: <pre><code>assistant:\n  toolsets:\n    - duckduckgo\n    - notification-server\n    - memory-server\n  instructions:\n    - if: \"settings.enable_web_search\"\n      content: |\n        Web search enabled - use duckduckgo for current information\n\n    - \"!settings.enable_web_search\": |\n        Web search disabled - use training data only\n\n    - if: \"settings.enable_notifications\"\n      content: |\n        Send important updates via notification-server\n\n    - if: \"settings.enable_memory\"\n      content: |\n        Store user preferences and context in memory-server\n\n    - |\n        Core assistant functionality\n</code></pre></p>"},{"location":"advanced/settings/#user-preferences","title":"User Preferences","text":"<p>Store user-specific preferences:</p> <pre><code>settings:\n  - name: temperature_unit\n    type: string\n    title: Temperature Unit\n    description: Display temperatures in Fahrenheit or Celsius\n    defaultValue: F\n\n  - name: date_format\n    type: string\n    title: Date Format\n    description: Preferred date display format\n    defaultValue: MM/DD/YYYY\n\n  - name: timezone\n    type: string\n    title: Timezone\n    description: User timezone for scheduling\n    defaultValue: America/New_York\n</code></pre>"},{"location":"advanced/settings/#dietary-restrictions","title":"Dietary Restrictions","text":"<p>Common in e-commerce and food teams:</p> <pre><code>settings:\n  - name: dietary_restrictions\n    type: string\n    title: Dietary Restrictions\n    description: Filter products and recipes by dietary needs\n    defaultValue: none\n\n  - name: allergies\n    type: string\n    title: Allergies\n    description: Food allergies to avoid\n    defaultValue: none\n</code></pre> <p>Agent usage: <pre><code>meal_planner:\n  toolsets:\n    - product-catalog\n  instructions:\n    - if: \"settings.dietary_restrictions != \\\"none\\\"\"\n      content: |\n        Filter all recipes and products by: {settings.dietary_restrictions}\n        Clearly label dietary attributes.\n        Verify ingredients meet restrictions.\n\n    - if: \"settings.allergies != \\\"none\\\"\"\n      content: |\n        CRITICAL: Exclude all products containing: {settings.allergies}\n        Double-check ingredient lists.\n        Warn if allergen information unavailable.\n\n    - |\n        Provide meal plans and shopping lists.\n</code></pre></p>"},{"location":"advanced/settings/#experience-level","title":"Experience Level","text":"<p>Adjust complexity based on user expertise:</p> <pre><code>settings:\n  - name: experience_level\n    type: string\n    title: Experience Level\n    description: User's expertise in this domain\n    allowed_values:\n      - beginner\n      - intermediate\n      - advanced\n      - expert\n    defaultValue: intermediate\n</code></pre> <p>Agent usage: <pre><code>instructor:\n  instructions:\n    - if: \"settings.experience_level == 'beginner'\"\n      content: |\n        Beginner level:\n        - Define all technical terms\n        - Start with fundamentals\n        - Provide step-by-step guidance\n        - Include lots of examples\n        - Avoid jargon\n\n    - if: \"settings.experience_level == 'intermediate'\"\n      content: |\n        Intermediate level:\n        - Assume basic knowledge\n        - Focus on practical applications\n        - Introduce advanced concepts gradually\n        - Provide context and rationale\n\n    - if: \"settings.experience_level == 'advanced'\"\n      content: |\n        Advanced level:\n        - Assume strong foundation\n        - Focus on nuance and edge cases\n        - Discuss trade-offs and alternatives\n        - Reference best practices\n\n    - if: \"settings.experience_level == 'expert'\"\n      content: |\n        Expert level:\n        - Discuss advanced techniques\n        - Debate architectural decisions\n        - Explore cutting-edge approaches\n        - Challenge assumptions\n</code></pre></p>"},{"location":"advanced/settings/#best-practices","title":"Best Practices","text":""},{"location":"advanced/settings/#setting-design","title":"Setting Design","text":"<p>Clear Labels: <pre><code># Good\nlabel: Temperature Unit\nlabel: Output Format\nlabel: Enable Web Search\n\n# Bad\nlabel: Temp\nlabel: Format\nlabel: Search\n</code></pre></p> <p>Descriptive Descriptions: <pre><code># Good\ndescription: Display temperatures in Fahrenheit or Celsius\n\n# Bad\ndescription: Temperature setting\n</code></pre></p> <p>Sensible Defaults: <pre><code># Good - Safe, common defaults\ndefault_value: false  # for feature flags\ndefault_value: 10     # for reasonable limits\ndefault_value: markdown  # for common format\n\n# Bad - Unusual defaults\ndefault_value: true   # for experimental features\ndefault_value: 1000   # for unreasonable limits\n</code></pre></p> <p>Limited Options: <pre><code># Good - Manageable set of options\nallowed_values:\n  - small\n  - medium\n  - large\n\n# Bad - Too many options\nallowed_values:\n  - option1\n  - option2\n  ... (20 more options)\n</code></pre></p>"},{"location":"advanced/settings/#instruction-organization","title":"Instruction Organization","text":"<p>Group related conditions: <pre><code>instructions:\n  # Tone settings\n  - if: \"settings.tone == 'professional'\"\n    content: |\n      Professional tone instructions\n  - if: \"settings.tone == 'casual'\"\n    content: |\n      Casual tone instructions\n\n  # Format settings\n  - if: \"settings.format == 'json'\"\n    content: |\n      JSON format instructions\n  - if: \"settings.format == 'yaml'\"\n    content: |\n      YAML format instructions\n\n  # Default\n  - |\n      Standard instructions\n</code></pre></p> <p>Default fallback: Always include a default instruction (empty condition):</p> <pre><code>instructions:\n  - if: \"settings.expert_mode\"\n    content: |\n      Expert instructions\n\n  - |\n      DEFAULT - Standard instructions (always present)\n</code></pre>"},{"location":"advanced/settings/#setting-validation","title":"Setting Validation","text":"<p>Use allowed_values for strings: <pre><code># Good - Constrained options\nsettings:\n  - name: color\n    type: string\n    allowed_values:\n      - red\n      - blue\n      - green\n    defaultValue: blue\n\n# Bad - No constraints\nsettings:\n  - name: color\n    type: string\n    # User can enter anything\n    defaultValue: blue\n</code></pre></p> <p>Set reasonable ranges for numbers: <pre><code># Add validation in agent instructions\ninstructions:\n  - |\n      Validate settings:\n      - max_results must be between 1 and 100\n      - price_limit must be positive\n      - If invalid, use default and notify user\n</code></pre></p>"},{"location":"advanced/settings/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"advanced/settings/#dependent-settings","title":"Dependent Settings","text":"<p>Settings that affect each other:</p> <pre><code>settings:\n  - name: research_mode\n    type: bool\n    title: Research Mode\n    description: Conduct thorough research before responding\n    defaultValue: false\n\n  - name: max_sources\n    type: number\n    title: Maximum Sources\n    description: Number of sources to check (research mode only)\n    defaultValue: 5\n</code></pre> <p>Agent usage: <pre><code>researcher:\n  toolsets:\n    - duckduckgo\n  instructions:\n    - if: \"settings.research_mode\"\n      content: |\n        RESEARCH MODE ACTIVE\n        - Search up to {settings.max_sources} sources\n        - Cross-reference information\n        - Provide citations\n        - Note conflicting information\n\n    - |\n        Standard response (max_sources setting ignored)\n</code></pre></p>"},{"location":"advanced/settings/#dynamic-settings","title":"Dynamic Settings","text":"<p>Settings that change based on context:</p> <pre><code>settings:\n  - name: auto_mode\n    type: bool\n    title: Auto Mode\n    description: Automatically adjust settings based on request\n    defaultValue: false\n\n  - name: detail_level\n    type: string\n    title: Detail Level\n    description: Response detail level (ignored in auto mode)\n    allowed_values:\n      - brief\n      - normal\n      - detailed\n    defaultValue: normal\n</code></pre> <p>Agent usage: <pre><code>adaptive_assistant:\n  instructions:\n    - if: \"settings.auto_mode\"\n      content: |\n        AUTO MODE\n        - Detect request complexity\n        - Adjust detail level automatically:\n          - Simple question \u2192 brief response\n          - Complex question \u2192 detailed response\n          - Research request \u2192 exhaustive response\n\n    - \"!settings.auto_mode &amp;&amp; settings.detail_level == 'brief'\": |\n        Brief responses (user preference)\n\n    - \"!settings.auto_mode &amp;&amp; settings.detail_level == 'detailed'\": |\n        Detailed responses (user preference)\n\n    - |\n        Normal detail level\n</code></pre></p>"},{"location":"advanced/settings/#setting-profiles","title":"Setting Profiles","text":"<p>Predefined combinations of settings:</p> <pre><code>settings:\n  - name: profile\n    type: string\n    title: User Profile\n    description: Predefined setting combinations\n    allowed_values:\n      - student\n      - professional\n      - researcher\n      - casual\n    defaultValue: casual\n</code></pre> <p>Agent usage: <pre><code>assistant:\n  instructions:\n    - if: \"settings.profile == 'student'\"\n      content: |\n        STUDENT PROFILE\n        - Educational tone\n        - Detailed explanations\n        - Include examples\n        - Cite sources\n        - Avoid jargon\n\n    - if: \"settings.profile == 'professional'\"\n      content: |\n        PROFESSIONAL PROFILE\n        - Business-focused\n        - Concise and efficient\n        - Industry terminology okay\n        - Actionable insights\n        - Data-driven\n\n    - if: \"settings.profile == 'researcher'\"\n      content: |\n        RESEARCHER PROFILE\n        - Academic rigor\n        - Comprehensive citations\n        - Multiple perspectives\n        - Thorough analysis\n        - Primary sources preferred\n\n    - if: \"settings.profile == 'casual'\"\n      content: |\n        CASUAL PROFILE\n        - Friendly tone\n        - Conversational style\n        - Simple explanations\n        - Practical focus\n</code></pre></p>"},{"location":"advanced/settings/#next-steps","title":"Next Steps","text":"<ul> <li>Conditional Instructions - Advanced conditional logic</li> <li>Configuration Reference - Complete settings schema</li> <li>Agent Examples - Teams using settings</li> <li>Multi-Agent Workflows - Complex team patterns</li> </ul> <p>Related: Conditional Instructions | Configuration | Creating Teams</p>"},{"location":"agents/agent-types/","title":"Agent Types","text":"<p>MyAgents supports four execution types that enable different processing patterns for your AI teams.</p>"},{"location":"agents/agent-types/#overview","title":"Overview","text":"Type Purpose Use Cases LLM Agent Interactive AI assistant Conversations, analysis, content creation Parallel Agent Concurrent execution Multi-perspective analysis, batch processing Loop Agent Iterative refinement Content improvement, problem solving Sequence Agent Sequential pipeline Multi-stage workflows, progressive processing"},{"location":"agents/agent-types/#llm-agent","title":"LLM Agent","text":"<p>The LLM Agent is the default agent type - a standard interactive AI assistant powered by large language models.</p>"},{"location":"agents/agent-types/#characteristics","title":"Characteristics","text":"<ul> <li>\u2705 Interactive conversations with context</li> <li>\u2705 Access to tools and external systems</li> <li>\u2705 Can delegate to other agents</li> <li>\u2705 Full instruction customization</li> <li>\u2705 Streaming responses</li> </ul>"},{"location":"agents/agent-types/#configuration","title":"Configuration","text":"<pre><code>agents:\n  assistant:\n    type: llm  # Can be omitted (default)\n    name: Research Assistant\n    description: Conducts web research and analysis\n    model: anthropic\n    instructions:\n      - |\n        You are a research assistant. Conduct thorough web research \n          using available tools. Provide well-sourced, accurate information \n          with citations.\n    toolsets:\n      - duckduckgo\n      - memory-server\n</code></pre>"},{"location":"agents/agent-types/#key-properties","title":"Key Properties","text":"Property Required Description <code>type</code> No Set to <code>\"llm\"</code> or omit (default) <code>name</code> Yes Agent display name <code>description</code> Yes Brief role description <code>model</code> No LLM provider: <code>\"anthropic\"</code> or <code>\"gpt-4o\"</code> <code>instructions</code> Yes Behavioral guidelines <code>toolsets</code> No Available tool access <code>sub_agents</code> No Agents this can delegate to"},{"location":"agents/agent-types/#use-cases","title":"Use Cases","text":"<p>Content Creation <pre><code>content_writer:\n  type: llm\n  name: Content Writer\n  description: Creates blog posts and articles\n  model: anthropic\n  instructions:\n    - |\n      Create engaging, SEO-optimized content. Use clear structure \n        with headings, bullet points, and examples. Target 1000-1500 words.\n  toolsets:\n    - duckduckgo\n</code></pre></p> <p>Customer Support <pre><code>support_agent:\n  type: llm\n  name: Support Agent\n  description: Handles customer inquiries\n  instructions:\n    - |\n      Provide friendly, helpful support. Check knowledge base first,  then escalate complex issues to technical team.\n  sub_agents:\n    - technical_specialist\n  toolsets:\n    - memory-server\n</code></pre></p> <p>Data Analysis <pre><code>analyst:\n  type: llm\n  name: Data Analyst\n  description: Analyzes datasets and generates insights\n  model: gpt-4o\n  instructions:\n    - |\n      Analyze provided data thoroughly. Identify trends, anomalies, \n        and actionable insights. Present findings with visualizations.\n</code></pre></p>"},{"location":"agents/agent-types/#best-practices","title":"Best Practices","text":"<ol> <li>Clear Instructions: Define scope, constraints, and output format</li> <li>Appropriate Tools: Only include tools the agent needs</li> <li>Model Selection: Use Claude for analysis/writing, GPT-4 for general tasks</li> <li>Sub-Agent Design: Structure delegations hierarchically</li> </ol>"},{"location":"agents/agent-types/#parallel-agent","title":"Parallel Agent","text":"<p>The Parallel Agent executes multiple sub-agents concurrently and combines their results.</p>"},{"location":"agents/agent-types/#characteristics_1","title":"Characteristics","text":"<ul> <li>\u2705 Concurrent execution of sub-agents</li> <li>\u2705 Results combined automatically</li> <li>\u2705 Ideal for multi-perspective analysis</li> <li>\u2705 Reduces total processing time</li> <li>\u26a0\ufe0f Does not support tools directly</li> <li>\u26a0\ufe0f Cannot be interactive</li> </ul>"},{"location":"agents/agent-types/#configuration_1","title":"Configuration","text":"<pre><code>agents:\n  multi_perspective_analyzer:\n    type: parallel\n    name: Multi-Perspective Analyzer\n    description: Analyzes content from multiple viewpoints simultaneously\n    instructions:\n      - |\n          Combine insights from all perspectives into a comprehensive analysis. \n          Identify agreements, contradictions, and unique insights from each viewpoint.\n    sub_agents:\n      - technical_perspective\n      - business_perspective\n      - user_perspective\n\n  technical_perspective:\n    type: llm\n    name: Technical Perspective\n    description: Technical feasibility analysis\n    instructions:\n      - |\n          Analyze from a technical standpoint: implementation complexity, \n          scalability, maintainability, and technical risks.\n\n  business_perspective:\n    type: llm\n    name: Business Perspective\n    description: Business value analysis\n    instructions:\n      - |\n          Analyze from a business standpoint: ROI, market opportunity, \n          competitive advantage, and resource requirements.\n\n  user_perspective:\n    type: llm\n    name: User Perspective\n    description: User experience analysis\n    instructions:\n      - |\n          Analyze from a user standpoint: usability, accessibility, \n          user value, and adoption barriers.\n</code></pre>"},{"location":"agents/agent-types/#key-properties_1","title":"Key Properties","text":"Property Required Description <code>type</code> Yes Must be <code>\"parallel\"</code> <code>name</code> Yes Agent display name <code>description</code> Yes Brief role description <code>instructions</code> Yes How to combine sub-agent results <code>sub_agents</code> Yes Array of agents to execute concurrently <code>toolsets</code> No \u26a0\ufe0f Not supported for parallel agents"},{"location":"agents/agent-types/#execution-flow","title":"Execution Flow","text":"<pre><code>User Request\n     \u2502\n     \u25bc\nParallel Agent\n     \u2502\n     \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u25bc         \u25bc         \u25bc         \u25bc\nSub-Agent 1  Sub-Agent 2  Sub-Agent 3  Sub-Agent 4\n     \u2502         \u2502         \u2502         \u2502\n     \u2502    (Execute Concurrently)  \u2502\n     \u2502         \u2502         \u2502         \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u25bc\n      Combine Results\n              \u2502\n              \u25bc\n         Final Response\n</code></pre>"},{"location":"agents/agent-types/#use-cases_1","title":"Use Cases","text":"<p>Product Review Analysis <pre><code>product_reviewer:\n  type: parallel\n  name: Product Review Team\n  description: Multi-dimensional product analysis\n  instructions:\n    - |\n        Synthesize all perspectives into a balanced review with:\n        - Overall recommendation\n        - Key strengths and weaknesses\n        - Best use cases\n        - Alternative considerations\n  sub_agents:\n    - features_analyst\n    - price_analyst\n    - quality_analyst\n    - support_analyst\n</code></pre></p> <p>Content Fact-Checking <pre><code>fact_checker:\n  type: parallel\n  name: Fact Checking Team\n  description: Verifies claims from multiple sources\n  instructions:\n    - |\n        Cross-reference all findings. Report verification status for each claim:\n        - Confirmed (multiple sources agree)\n        - Disputed (sources conflict)\n        - Unverified (insufficient information)\n  sub_agents:\n    - source_checker_1\n    - source_checker_2\n    - source_checker_3\n</code></pre></p> <p>Competitive Analysis <pre><code>competitor_analyzer:\n  type: parallel\n  name: Competitive Analysis Team\n  description: Analyzes multiple competitors simultaneously\n  instructions:\n    - |\n        Create a competitive landscape summary:\n        - Feature comparison matrix\n        - Pricing positioning\n        - Market differentiation\n        - Strategic recommendations\n  sub_agents:\n    - competitor_a_analyst\n    - competitor_b_analyst\n    - competitor_c_analyst\n</code></pre></p>"},{"location":"agents/agent-types/#best-practices_1","title":"Best Practices","text":"<ol> <li>Independent Sub-Agents: Each sub-agent should work independently</li> <li>Clear Synthesis: Main agent combines results coherently</li> <li>Balanced Load: Sub-agents should have similar complexity</li> <li>Error Handling: One sub-agent failure doesn't block others</li> </ol>"},{"location":"agents/agent-types/#limitations","title":"Limitations","text":"<ul> <li>\u274c Cannot use <code>toolsets</code> directly (sub-agents can have tools)</li> <li>\u274c Cannot be set as <code>interactive: true</code></li> <li>\u274c Sub-agents cannot communicate with each other during execution</li> </ul>"},{"location":"agents/agent-types/#loop-agent","title":"Loop Agent","text":"<p>The Loop Agent executes an agent iteratively to refine or improve content.</p>"},{"location":"agents/agent-types/#characteristics_2","title":"Characteristics","text":"<ul> <li>\u2705 Iterative refinement and improvement</li> <li>\u2705 Each iteration builds on previous results</li> <li>\u2705 Configurable iteration count</li> <li>\u2705 Automatic convergence</li> <li>\u26a0\ufe0f Requires exactly one sub-agent</li> <li>\u26a0\ufe0f Cannot use tools directly</li> </ul>"},{"location":"agents/agent-types/#configuration_2","title":"Configuration","text":"<pre><code>agents:\n  content_refiner:\n    type: loop\n    name: Content Refiner\n    description: Iteratively improves content quality\n    max_iterations: 3\n    instructions:\n      - |\n          Review the content from the previous iteration and:\n          1. Identify areas for improvement\n          2. Enhance clarity and readability\n          3. Strengthen arguments\n          4. Polish language and style\n\n          On the final iteration, provide the polished final version.\n    sub_agents:\n      - content_editor\n\n  content_editor:\n    type: llm\n    name: Content Editor\n    description: Edits and refines content\n    instructions:\n      - |\n          Edit the provided content for:\n          - Grammar and spelling\n          - Clarity and conciseness\n          - Flow and structure\n          - Impact and engagement\n</code></pre>"},{"location":"agents/agent-types/#key-properties_2","title":"Key Properties","text":"Property Required Description <code>type</code> Yes Must be <code>\"loop\"</code> <code>name</code> Yes Agent display name <code>description</code> Yes Brief role description <code>instructions</code> Yes What to do each iteration <code>max_iterations</code> Yes Number of iterations (1-10) <code>sub_agents</code> Yes Array with exactly one agent <code>toolsets</code> No \u26a0\ufe0f Not supported for loop agents"},{"location":"agents/agent-types/#execution-flow_1","title":"Execution Flow","text":"<pre><code>User Request + Initial Content\n         \u2502\n         \u25bc\n    Iteration 1\n         \u2502\n    [Sub-Agent]\n         \u2502\n         \u25bc\n    Iteration 2\n         \u2502\n    [Sub-Agent] (receives previous output)\n         \u2502\n         \u25bc\n    Iteration 3\n         \u2502\n    [Sub-Agent] (receives previous output)\n         \u2502\n         \u25bc\n   Final Result\n</code></pre>"},{"location":"agents/agent-types/#use-cases_2","title":"Use Cases","text":"<p>Content Polish Loop <pre><code>polish_loop:\n  type: loop\n  name: Content Polish Loop\n  description: Progressively polishes content to perfection\n  max_iterations: 3\n  instructions:\n    - |\n        Iteration by iteration, improve:\n        1. First pass: Structure and organization\n        2. Second pass: Language and clarity\n        3. Final pass: Style and impact\n  sub_agents:\n    - polisher\n\npolisher:\n  type: llm\n  name: Content Polisher\n  model: anthropic\n  instructions:\n    - |\n        Improve the content while maintaining the core message.\n        Focus on readability, engagement, and professionalism.\n</code></pre></p> <p>Code Review Loop <pre><code>code_reviewer:\n  type: loop\n  name: Code Review Loop\n  description: Iteratively reviews and improves code\n  max_iterations: 2\n  instructions:\n    - |\n        Each iteration:\n        1. Identify code smells and issues\n        2. Suggest specific improvements\n        3. Check against best practices\n  sub_agents:\n    - code_analyst\n\ncode_analyst:\n  type: llm\n  name: Code Analyst\n  instructions:\n    - |\n        Analyze code for:\n        - Correctness and bugs\n        - Performance issues\n        - Security vulnerabilities\n        - Maintainability concerns\n</code></pre></p> <p>Problem Solving Loop <pre><code>problem_solver:\n  type: loop\n  name: Problem Solving Loop\n  description: Iteratively refines solutions\n  max_iterations: 3\n  instructions:\n    - |\n        Each iteration:\n        1. Analyze the current solution\n        2. Identify weaknesses or gaps\n        3. Refine and enhance the approach\n  sub_agents:\n    - solution_refiner\n\nsolution_refiner:\n  type: llm\n  name: Solution Refiner\n  model: gpt-4o\n  instructions:\n    - |\n        Evaluate the solution critically and suggest improvements.\n        Consider edge cases, efficiency, and robustness.\n</code></pre></p>"},{"location":"agents/agent-types/#best-practices_2","title":"Best Practices","text":"<ol> <li>Reasonable Iterations: 2-4 iterations typically sufficient</li> <li>Clear Progress: Each iteration should meaningfully improve</li> <li>Convergence: Instructions should guide toward refinement, not reimagining</li> <li>Final Polish: Last iteration should produce final deliverable</li> </ol>"},{"location":"agents/agent-types/#limitations_1","title":"Limitations","text":"<ul> <li>\u274c Cannot use <code>toolsets</code> directly (sub-agent can have tools)</li> <li>\u274c Must have exactly one sub-agent</li> <li>\u274c <code>max_iterations</code> must be between 1 and 10</li> <li>\u26a0\ufe0f Cost increases linearly with iterations</li> </ul>"},{"location":"agents/agent-types/#sequence-agent","title":"Sequence Agent","text":"<p>The Sequence Agent processes content through a defined sequential pipeline.</p>"},{"location":"agents/agent-types/#characteristics_3","title":"Characteristics","text":"<ul> <li>\u2705 Sequential, ordered processing</li> <li>\u2705 Each agent receives previous agent's output</li> <li>\u2705 Clear workflow stages</li> <li>\u2705 Specialized agents for each stage</li> <li>\u26a0\ufe0f Cannot use tools directly</li> <li>\u26a0\ufe0f Cannot be interactive</li> </ul>"},{"location":"agents/agent-types/#configuration_3","title":"Configuration","text":"<pre><code>agents:\n  content_pipeline:\n    type: sequence\n    name: Content Creation Pipeline\n    description: Research, write, and edit content sequentially\n    instructions:\n      - |\n          Coordinate the content creation workflow:\n          1. Research phase gathers information\n          2. Writing phase creates draft\n          3. Editing phase polishes final version\n\n          Ensure each phase builds effectively on the previous.\n    sub_agents:\n      - researcher\n      - writer\n      - editor\n\n  researcher:\n    type: llm\n    name: Researcher\n    description: Gathers information and sources\n    instructions:\n      - |\n          Research the topic thoroughly. Provide:\n          - Key facts and statistics\n          - Important concepts\n          - Relevant sources\n          - Suggested angles\n    toolsets:\n      - duckduckgo\n\n  writer:\n    type: llm\n    name: Writer\n    description: Creates content from research\n    instructions:\n      - |\n          Using the research provided, write a comprehensive article.\n          Create engaging content with clear structure and flow.\n\n  editor:\n    type: llm\n    name: Editor\n    description: Polishes and finalizes content\n    instructions:\n      - |\n          Review and polish the draft. Ensure:\n          - Grammar and spelling are perfect\n          - Flow is smooth\n          - Message is clear and impactful\n          - Length is appropriate\n</code></pre>"},{"location":"agents/agent-types/#key-properties_3","title":"Key Properties","text":"Property Required Description <code>type</code> Yes Must be <code>\"sequence\"</code> <code>name</code> Yes Agent display name <code>description</code> Yes Brief role description <code>instructions</code> Yes Overall workflow coordination <code>sub_agents</code> Yes Array of agents in execution order <code>toolsets</code> No \u26a0\ufe0f Not supported for sequence agents"},{"location":"agents/agent-types/#execution-flow_2","title":"Execution Flow","text":"<pre><code>User Request\n     \u2502\n     \u25bc\nAgent 1 (Research)\n     \u2502\n     \u25bc\nAgent 2 (Write) \u2190 receives Agent 1 output\n     \u2502\n     \u25bc\nAgent 3 (Edit) \u2190 receives Agent 2 output\n     \u2502\n     \u25bc\nFinal Result\n</code></pre>"},{"location":"agents/agent-types/#use-cases_3","title":"Use Cases","text":"<p>Blog Post Production <pre><code>blog_production:\n  type: sequence\n  name: Blog Production Pipeline\n  description: Complete blog post creation workflow\n  instructions:\n    - |\n        Create a publication-ready blog post through:\n        1. Topic research and outline\n        2. Draft creation\n        3. SEO optimization\n        4. Final editing\n  sub_agents:\n    - research_phase\n    - draft_phase\n    - seo_phase\n    - editing_phase\n</code></pre></p> <p>Report Generation <pre><code>report_generator:\n  type: sequence\n  name: Report Generator\n  description: Generates comprehensive business reports\n  instructions:\n    - |\n        Generate a professional report:\n        1. Collect and validate data\n        2. Perform analysis\n        3. Create visualizations\n        4. Write executive summary\n  sub_agents:\n    - data_collector\n    - data_analyst\n    - visualization_creator\n    - summary_writer\n</code></pre></p> <p>Document Translation Pipeline <pre><code>translation_pipeline:\n  type: sequence\n  name: Translation Pipeline\n  description: Translates and localizes documents\n  instructions:\n    - |\n        Complete translation workflow:\n        1. Analyze source document\n        2. Translate content\n        3. Localize cultural references\n        4. Quality review\n  sub_agents:\n    - source_analyzer\n    - translator\n    - localizer\n    - qa_reviewer\n</code></pre></p> <p>Customer Onboarding <pre><code>onboarding_flow:\n  type: sequence\n  name: Customer Onboarding Flow\n  description: Guides new customers through setup\n  instructions:\n    - |\n        Onboard customers step-by-step:\n        1. Collect requirements\n        2. Configure account\n        3. Setup integrations\n        4. Provide training\n  sub_agents:\n    - requirements_collector\n    - account_configurator\n    - integration_specialist\n    - trainer\n</code></pre></p>"},{"location":"agents/agent-types/#best-practices_3","title":"Best Practices","text":"<ol> <li>Logical Order: Arrange sub-agents in natural workflow sequence</li> <li>Clear Handoffs: Each agent should produce output suitable for next agent</li> <li>Specialization: Each stage agent should be focused and specialized</li> <li>Error Recovery: Early stages should validate inputs thoroughly</li> </ol>"},{"location":"agents/agent-types/#limitations_2","title":"Limitations","text":"<ul> <li>\u274c Cannot use <code>toolsets</code> directly (sub-agents can have tools)</li> <li>\u274c Cannot be set as <code>interactive: true</code></li> <li>\u274c Execution is strictly sequential (no parallelism)</li> <li>\u26a0\ufe0f Failure in one stage blocks subsequent stages</li> </ul>"},{"location":"agents/agent-types/#choosing-the-right-type","title":"Choosing the Right Type","text":""},{"location":"agents/agent-types/#decision-tree","title":"Decision Tree","text":"<pre><code>Need real-time interaction?\n\u251c\u2500 YES \u2192 LLM Agent\n\u2514\u2500 NO \u2192 Need processing pattern?\n         \u251c\u2500 Multiple concurrent perspectives \u2192 Parallel Agent\n         \u251c\u2500 Iterative refinement \u2192 Loop Agent\n         \u251c\u2500 Sequential pipeline \u2192 Sequence Agent\n         \u2514\u2500 Single-step processing \u2192 LLM Agent\n</code></pre>"},{"location":"agents/agent-types/#comparison-matrix","title":"Comparison Matrix","text":"Requirement LLM Parallel Loop Sequence Interactive conversations \u2705 \u274c \u274c \u274c Direct tool access \u2705 \u274c \u274c \u274c Sub-agent delegation \u2705 \u2705 \u2705 \u2705 Concurrent execution \u274c \u2705 \u274c \u274c Iterative refinement \u274c \u274c \u2705 \u274c Sequential workflow \u274c \u274c \u274c \u2705 Result combination N/A Auto Iterative Sequential"},{"location":"agents/agent-types/#use-case-mapping","title":"Use Case Mapping","text":"Scenario Recommended Type Why Customer chat support LLM Agent Interactive, needs tools Multi-expert analysis Parallel Agent Concurrent perspectives Content refinement Loop Agent Iterative improvement Content production Sequence Agent Sequential stages Quick lookup LLM Agent Simple, single-step Brainstorming Parallel Agent Multiple viewpoints Problem solving Loop Agent Progressive refinement Report generation Sequence Agent Collect \u2192 Analyze \u2192 Write"},{"location":"agents/agent-types/#combining-types","title":"Combining Types","text":"<p>You can combine agent types within a single team for sophisticated workflows.</p>"},{"location":"agents/agent-types/#example-research-writing-team","title":"Example: Research &amp; Writing Team","text":"<pre><code>version: \"1\"\nid: research-writing-team\nname: Research &amp; Writing Team\ndescription: Comprehensive content creation with research and refinement\ndefault_agent: coordinator\n\nagents:\n  coordinator:\n    type: llm\n    name: Project Coordinator\n    description: Manages overall workflow\n    instructions:\n      - |\n          Coordinate content creation:\n          1. Route research requests to research_pipeline\n          2. Route writing requests to content_refiner\n          3. Provide final deliverables to user\n    sub_agents:\n      - research_pipeline\n      - content_refiner\n\n  # Parallel Agent for multi-source research\n  research_pipeline:\n    type: parallel\n    name: Research Pipeline\n    description: Researches from multiple angles\n    instructions:\n      - |\n          Combine all research into comprehensive brief with:\n          - Facts and statistics\n          - Expert opinions\n          - Counterarguments\n          - Source citations\n    sub_agents:\n      - academic_researcher\n      - news_researcher\n      - expert_researcher\n\n  academic_researcher:\n    type: llm\n    name: Academic Researcher\n    description: Finds academic sources\n    toolsets:\n      - duckduckgo\n\n  news_researcher:\n    type: llm\n    name: News Researcher\n    description: Finds recent news\n    toolsets:\n      - duckduckgo\n\n  expert_researcher:\n    type: llm\n    name: Expert Researcher\n    description: Finds expert opinions\n    toolsets:\n      - duckduckgo\n\n  # Sequence Agent for structured writing\n  content_refiner:\n    type: sequence\n    name: Content Refinement Pipeline\n    description: Creates and polishes content\n    instructions:\n      - |\n          Process content through:\n          1. Drafting based on research\n          2. Structural editing\n          3. Final polish\n    sub_agents:\n      - drafter\n      - structural_editor\n      - copy_editor\n\n  drafter:\n    type: llm\n    name: Draft Writer\n    description: Creates initial draft\n\n  structural_editor:\n    type: llm\n    name: Structural Editor\n    description: Improves structure and flow\n\n  copy_editor:\n    type: llm\n    name: Copy Editor\n    description: Final polish and proofreading\n</code></pre>"},{"location":"agents/agent-types/#performance-considerations","title":"Performance Considerations","text":""},{"location":"agents/agent-types/#execution-time","title":"Execution Time","text":"Type Time Complexity Notes LLM Agent 1x Single execution Parallel Agent ~1x Concurrent (as slow as slowest sub-agent) Loop Agent N\u00d71x N = max_iterations Sequence Agent N\u00d71x N = number of sub-agents"},{"location":"agents/agent-types/#cost-implications","title":"Cost Implications","text":"<ul> <li>Parallel: Cost of all sub-agents, but faster wall-clock time</li> <li>Loop: Linear cost increase with iterations</li> <li>Sequence: Linear cost increase with pipeline length</li> <li>LLM: Single execution cost</li> </ul>"},{"location":"agents/agent-types/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Parallel: Keep sub-agents similar in complexity</li> <li>Loop: Use 2-3 iterations typically (more = diminishing returns)</li> <li>Sequence: Minimize pipeline length when possible</li> <li>General: Cache results when appropriate</li> </ol>"},{"location":"agents/agent-types/#troubleshooting","title":"Troubleshooting","text":""},{"location":"agents/agent-types/#common-issues","title":"Common Issues","text":"<p>Parallel Agent Not Working - \u2705 Check: Have you defined sub-agents? - \u2705 Check: Are sub-agents independent (no communication needed)? - \u2705 Check: Did you add instructions for combining results?</p> <p>Loop Agent Not Improving - \u2705 Check: Are instructions guiding refinement? - \u2705 Check: Is max_iterations reasonable (2-4)? - \u2705 Check: Can the sub-agent access necessary context?</p> <p>Sequence Agent Failing - \u2705 Check: Are sub-agents in correct order? - \u2705 Check: Does each agent produce suitable input for the next? - \u2705 Check: Are early stages validating inputs?</p> <p>Type Not Recognized - \u2705 Check: Did you spell type correctly? (<code>\"llm\"</code>, <code>\"parallel\"</code>, <code>\"loop\"</code>, <code>\"sequence\"</code>) - \u2705 Check: Is the type in quotes? - \u2705 Check: Is the YAML syntax valid?</p>"},{"location":"agents/agent-types/#next-steps","title":"Next Steps","text":"<ul> <li>Creating Agents - Build your first team</li> <li>Configuration - Complete reference</li> <li>Examples - Real-world templates</li> <li>Multi-Agent Workflows - Complex patterns</li> </ul> <p>Related: Overview | Creating Teams | Examples</p>"},{"location":"agents/configuration/","title":"Configuration Reference","text":"<p>Complete reference for all agent team configuration options.</p>"},{"location":"agents/configuration/#team-level-configuration","title":"Team-Level Configuration","text":""},{"location":"agents/configuration/#version","title":"version","text":"<p>Type: <code>string</code> Required: Yes Valid Values: <code>\"1\"</code></p> <p>Schema version for forward compatibility.</p> <pre><code>version: \"1\"\n</code></pre>"},{"location":"agents/configuration/#id","title":"id","text":"<p>Type: <code>string</code> Required: Yes Pattern: <code>^[a-z][a-z0-9-]{2,49}$</code></p> <p>Unique identifier for the team across the system.</p> <p>Requirements: - Must start with lowercase letter - Can contain: lowercase letters, numbers, hyphens - Length: 3-50 characters - Must be unique across all teams</p> <p>Examples: <pre><code># Valid\nid: weather-team\nid: customer-support\nid: blog-writer-v2\nid: analytics-dashboard\n\n# Invalid\nid: Weather-Team    # No uppercase\nid: wt              # Too short (&lt; 3)\nid: _weather        # Cannot start with underscore\nid: weather team    # No spaces\n</code></pre></p>"},{"location":"agents/configuration/#name","title":"name","text":"<p>Type: <code>string</code> Required: Yes Length: 5-100 characters</p> <p>User-facing display name for the team.</p> <pre><code>name: Weather Assistant Team\nname: Customer Support\nname: Blog Writing &amp; Editing\n</code></pre> <p>Guidelines: - Use title case - Be descriptive and user-friendly - Can include spaces and special characters - Shown in UI and chat interface</p>"},{"location":"agents/configuration/#description","title":"description","text":"<p>Type: <code>string</code> Required: Yes Length: 20-500 characters</p> <p>Brief summary of team capabilities - critical for switchboard routing decisions.</p> <pre><code>description: Provides current weather conditions, forecasts, and severe weather alerts for any location worldwide\n</code></pre> <p>Best Practices: - \u2705 Describe what problems the team solves - \u2705 Use action-oriented language - \u2705 Focus on user benefits - \u2705 Be specific about capabilities - \u274c Avoid vague descriptions - \u274c Don't describe implementation details</p> <p>Examples:</p> <p>Good: <pre><code>description: Routes customer support inquiries to specialized agents handling technical issues, billing questions, and account management\n\ndescription: Researches topics using web search, creates comprehensive blog posts, and edits content for publication\n\ndescription: Helps users find grocery products, plan meals, create shopping lists, and discover recipes based on dietary preferences\n</code></pre></p> <p>Poor: <pre><code>description: A team that helps with stuff\n\ndescription: Uses multiple agents to process requests\n\ndescription: Team for customer support\n</code></pre></p>"},{"location":"agents/configuration/#default_agent","title":"default_agent","text":"<p>Type: <code>string</code> Required: Yes</p> <p>Name of the entry-point agent - must match an agent name in the <code>agents</code> section.</p> <pre><code>default_agent: coordinator\n\nagents:\n  coordinator:    # Must match default_agent\n    # Configuration...\n</code></pre> <p>Common Patterns: - <code>coordinator</code> - For teams with routing/delegation - <code>assistant</code> - For single-purpose teams - <code>manager</code> - For hierarchical teams - Team-specific names (e.g., <code>shopping_assistant</code>, <code>weather_helper</code>)</p>"},{"location":"agents/configuration/#interactive","title":"interactive","text":"<p>Type: <code>boolean</code> Required: No Default: <code>false</code></p> <p>Controls whether team remains active after processing messages.</p> <pre><code># Team persists for multi-turn conversations\ninteractive: true\n\n# Team returns to switchboard after each response\ninteractive: false\n</code></pre> <p>When to use <code>true</code>: - Shopping and browsing experiences - Content creation with iteration - Multi-step workflows - Learning and tutorials</p> <p>When to use <code>false</code> (default): - Quick lookups - Single-transaction tasks - Automated processes - Simple utilities</p>"},{"location":"agents/configuration/#settings","title":"settings","text":"<p>Type: <code>array</code> of setting objects Required: No</p> <p>Defines runtime configuration options accessible to agents via conditional instructions.</p> <pre><code>settings:\n  - name: expert_mode\n    type: bool\n    title: Expert Mode\n    description: Show advanced technical details\n    defaultValue: false\n\n  - name: temperature_unit\n    type: string\n    title: Temperature Unit\n    description: Display temperatures in Fahrenheit or Celsius\n    defaultValue: F\n\n  - name: max_results\n    type: number\n    title: Maximum Results\n    description: Number of search results to return\n    defaultValue: 5\n</code></pre>"},{"location":"agents/configuration/#setting-object-properties","title":"Setting Object Properties","text":"Property Type Required Description <code>name</code> string Yes Unique setting identifier (camelCase or snake_case) <code>type</code> string Yes Data type: <code>\"boolean\"</code>, <code>\"string\"</code>, or <code>\"number\"</code> <code>title</code> string Yes User-facing display name <code>description</code> string Yes Explanation of what the setting controls <code>defaultValue</code> boolean/string/number Yes Default value matching the type"},{"location":"agents/configuration/#setting-types","title":"Setting Types","text":"<p>Boolean Settings: <pre><code>- name: verbose_mode\n  type: bool\n  title: Verbose Output\n  description: Include detailed explanations and reasoning\n  defaultValue: false\n</code></pre></p> <p>String Settings: <pre><code>- name: output_format\n  type: string\n  title: Output Format\n  description: Format for generated content\n  defaultValue: markdown\n</code></pre></p> <p>Number Settings: <pre><code>- name: result_limit\n  type: number\n  title: Result Limit\n  description: Maximum number of items to return\n  defaultValue: 10\n</code></pre></p> <p>See Settings Guide for detailed documentation.</p>"},{"location":"agents/configuration/#agents","title":"agents","text":"<p>Type: <code>object</code> Required: Yes</p> <p>Map of agent names to agent configurations.</p> <pre><code>agents:\n  coordinator:\n    # Agent configuration\n\n  specialist_1:\n    # Agent configuration\n\n  specialist_2:\n    # Agent configuration\n</code></pre> <p>Requirements: - Must contain at least one agent - Agent names must be unique within team - <code>default_agent</code> must reference one of these agents</p>"},{"location":"agents/configuration/#agent-level-configuration","title":"Agent-Level Configuration","text":""},{"location":"agents/configuration/#type","title":"type","text":"<p>Type: <code>string</code> Required: No Default: <code>\"llm\"</code> Valid Values: <code>\"llm\"</code>, <code>\"parallel\"</code>, <code>\"loop\"</code>, <code>\"sequence\"</code></p> <p>Specifies the agent execution pattern.</p> <pre><code># Standard interactive agent (default)\nagent1:\n  type: llm\n\n# Concurrent execution\nagent2:\n  type: parallel\n\n# Iterative refinement\nagent3:\n  type: loop\n  max_iterations: 3\n\n# Sequential pipeline\nagent4:\n  type: sequence\n</code></pre>"},{"location":"agents/configuration/#type-comparison","title":"Type Comparison","text":"Type Purpose Requires sub_agents Supports tools Supports interactive <code>llm</code> Interactive assistant No Yes Yes <code>parallel</code> Concurrent execution Yes No* No <code>loop</code> Iterative refinement Yes (1 only) No* No <code>sequence</code> Sequential pipeline Yes No* No <p>* Sub-agents can have tools</p> <p>See Agent Types for detailed documentation.</p>"},{"location":"agents/configuration/#name_1","title":"name","text":"<p>Type: <code>string</code> Required: Yes Pattern: <code>^[a-z][a-z0-9_]{2,49}$</code></p> <p>Unique identifier for the agent within the team scope.</p> <pre><code>agents:\n  product_specialist:    # Valid\n    name: Product Specialist\n\n  price_analyst:         # Valid\n    name: Price Analyst\n</code></pre> <p>Requirements: - Must start with lowercase letter - Can contain: lowercase letters, numbers, underscores - Length: 3-50 characters - Must be unique within team - Use snake_case convention</p> <p>Examples: <pre><code># Valid\ncoordinator\ntechnical_support\ncontent_writer\ndata_analyst\n\n# Invalid\nProductSpecialist    # No camelCase\nps                   # Too short\nagent-1              # No hyphens (use underscores)\n_coordinator         # Cannot start with underscore\n</code></pre></p>"},{"location":"agents/configuration/#description_1","title":"description","text":"<p>Type: <code>string</code> Required: Yes Length: 10-200 characters</p> <p>Brief summary of the agent's role and responsibilities.</p> <pre><code>agents:\n  researcher:\n    description: Conducts web research and gathers authoritative sources\n\n  writer:\n    description: Creates engaging, SEO-optimized blog content\n\n  editor:\n    description: Reviews and polishes content for grammar, clarity, and style\n</code></pre> <p>Guidelines: - One sentence - Focus on primary responsibility - Use active voice - Be specific about the agent's expertise</p>"},{"location":"agents/configuration/#model","title":"model","text":"<p>Type: <code>string</code> Required: No Valid Values: <code>\"anthropic\"</code>, <code>\"gpt-4o\"</code></p> <p>Specifies which LLM provider to use for this agent.</p> <pre><code>agents:\n  analyst:\n    model: anthropic    # Claude models\n\n  writer:\n    model: gpt-4o       # GPT-4 models\n\n  calculator:\n    # No model specified - uses system default\n</code></pre>"},{"location":"agents/configuration/#model-selection-guide","title":"Model Selection Guide","text":"<p>Claude (anthropic): - \u2705 Long-form writing - \u2705 Detailed analysis - \u2705 Complex reasoning - \u2705 Code review - \u2705 Creative content</p> <p>GPT-4 (gpt-4o): - \u2705 General-purpose tasks - \u2705 Broad knowledge - \u2705 Consistent performance - \u2705 Fast responses - \u2705 Multi-domain expertise</p> <p>When to specify: - Optimize for specific task types - Manage costs (different pricing) - Performance requirements - Quality preferences</p>"},{"location":"agents/configuration/#instructions","title":"instructions","text":"<p>Type: <code>array</code> of instruction objects Required: Yes</p> <p>Defines agent behavior through conditional and default instructions.</p>"},{"location":"agents/configuration/#simple-instructions","title":"Simple Instructions","text":"<pre><code>agents:\n  assistant:\n    instructions:\n      - |\n          You are a helpful assistant. Provide clear, accurate \n          responses to user questions.\n</code></pre>"},{"location":"agents/configuration/#conditional-instructions","title":"Conditional Instructions","text":"<pre><code>agents:\n  support_agent:\n    instructions:\n      - if: \"settings.expert_mode\"\n        content: |\n          You are in expert mode. Provide:\n          - Technical details and internals\n          - Advanced configuration options\n          - API references and code examples\n\n      - if: \"settings.priority_mode\"\n        content: |\n          This is a priority support request.\n          - Respond immediately\n          - Escalate if needed\n          - Follow up within 1 hour\n\n      - |\n          You are a friendly support agent.\n          - Use simple language\n          - Provide step-by-step guidance\n          - Confirm resolution before closing\n</code></pre>"},{"location":"agents/configuration/#instruction-object-structure","title":"Instruction Object Structure","text":"<p>Each instruction can be: - Plain string: Default instruction (always included) - Conditional object: Has <code>if</code> property (condition) and <code>content</code> property (instruction text)</p>"},{"location":"agents/configuration/#condition-syntax","title":"Condition Syntax","text":"<p>Boolean check (implicit truthiness): <pre><code>- if: \"settings.verbose_mode\"\n  content: |\n    Instructions when verbose_mode is true\n</code></pre></p> <p>Explicit boolean equality: <pre><code>- if: \"settings.expert_mode == true\"\n  content: |\n    Instructions when expert mode is enabled\n\n- if: \"settings.expert_mode == false\"\n  content: |\n    Instructions when expert mode is disabled\n</code></pre></p> <p>String equality: <pre><code>- if: \"settings.format == \\\"json\\\"\"\n  content: |\n    Instructions for JSON format\n</code></pre></p> <p>Supported operators: - \u2705 <code>==</code> (equality) - \u2705 <code>!=</code> (inequality)</p> <p>NOT supported: - \u274c Negation (<code>!settings.property</code>) - \u274c Logical operators (<code>&amp;&amp;</code>, <code>||</code>) - \u274c Comparison operators (<code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>)</p> <p>Use separate conditional blocks for multiple conditions.</p> <p>See Conditional Instructions for more patterns.</p>"},{"location":"agents/configuration/#best-practices","title":"Best Practices","text":"<p>Clear Role Definition: <pre><code>instructions:\n  - |\n      You are a product specialist helping customers find the right products.\n</code></pre></p> <p>Specific Responsibilities: <pre><code>instructions:\n  - |\n      Your responsibilities:\n      1. Search the product catalog\n      2. Compare features and prices\n      3. Provide 3-5 recommendations\n      4. Answer product questions\n</code></pre></p> <p>Business Rules: <pre><code>instructions:\n  - |\n      Business rules:\n      - Only recommend in-stock items\n      - Highlight products with 4+ star ratings\n      - Mention current sales and promotions\n      - Disclose affiliate relationships\n</code></pre></p> <p>Output Format: <pre><code>instructions:\n  - |\n      Present recommendations in this format:\n\n      **Product Name** - $Price\n      - Key feature 1\n      - Key feature 2\n      - Rating: X/5 stars\n</code></pre></p> <p>Tool Usage: <pre><code>instructions:\n  - |\n      Tool usage:\n      - Use duckduckgo for web research\n      - Store user preferences in memory-server\n      - Check weather-tool before making outdoor recommendations\n</code></pre></p> <p>Delegation Logic: <pre><code>instructions:\n  - |\n      Route requests as follows:\n      - Technical issues \u2192 transfer_task to technical_support\n      - Billing questions \u2192 transfer_task to billing_support\n      - Account problems \u2192 transfer_task to account_support\n</code></pre></p>"},{"location":"agents/configuration/#sub_agents","title":"sub_agents","text":"<p>Type: <code>array</code> of strings Required: No Required for: <code>parallel</code>, <code>loop</code>, <code>sequence</code> agent types</p> <p>Lists agents this agent can delegate to via <code>transfer_task</code> (for LLM agents) or execute (for special agent types).</p> <pre><code>agents:\n  coordinator:\n    type: llm\n    sub_agents:\n      - researcher\n      - writer\n      - editor\n\n  parallel_analyzer:\n    type: parallel\n    sub_agents:\n      - perspective_1\n      - perspective_2\n      - perspective_3\n\n  refinement_loop:\n    type: loop\n    max_iterations: 3\n    sub_agents:\n      - content_refiner    # Exactly 1 for loop type\n\n  pipeline:\n    type: sequence\n    sub_agents:\n      - stage_1\n      - stage_2\n      - stage_3\n</code></pre> <p>Requirements by Type:</p> Type sub_agents Required Count Constraint <code>llm</code> No Any number <code>parallel</code> Yes 2 or more <code>loop</code> Yes Exactly 1 <code>sequence</code> Yes 2 or more <p>Validation: - All referenced agent names must exist in team's <code>agents</code> section - No circular references - Agent names are case-sensitive</p>"},{"location":"agents/configuration/#output_key","title":"output_key","text":"<p>Type: <code>string</code> Required: No Supported by: <code>llm</code> agent type only</p> <p>Saves this agent's response so other agents can use it later. Other agents can reference the saved output using <code>{keyName}</code> placeholders in their instructions.</p> <pre><code>agents:\n  researcher:\n    type: llm\n    name: Researcher\n    description: Conducts research on a topic\n    output_key: research_findings    # Save this agent's output\n    instructions:\n      - |\n        Research the topic and provide key findings.\n    toolsets:\n      - duckduckgo\n\n  writer:\n    type: llm\n    name: Writer\n    description: Writes content based on research\n    instructions:\n      - |\n        Write an article based on these research findings:\n\n        {research_findings}    # Use the researcher's saved output\n</code></pre> <p>How It Works:</p> <p>When an agent with <code>output_key</code> finishes, its response is saved and can be referenced by other agents using <code>{keyName}</code> placeholders. The placeholder is automatically replaced with the actual content before the agent runs.</p> <p>Use Cases:</p> <ul> <li>Sequential workflows: Pass results from one agent to the next</li> <li>Parallel processing: Multiple agents create outputs that another agent combines</li> <li>Data collection: Gather information from specialists for synthesis</li> </ul> <p>Example - Sequential Workflow:</p> <pre><code>agents:\n  data_collector:\n    type: llm\n    output_key: raw_data\n    instructions:\n      - |\n        Collect data on the topic.\n\n  data_analyst:\n    type: llm\n    output_key: analysis\n    instructions:\n      - |\n        Analyze this data:\n        {raw_data}\n\n        Provide insights and trends.\n\n  report_writer:\n    type: llm\n    instructions:\n      - |\n        Write a report based on:\n\n        Data: {raw_data}\n        Analysis: {analysis}\n</code></pre> <p>Important Notes:</p> <ul> <li>Saved outputs are only available during the current conversation turn</li> <li>If you reference a <code>{keyName}</code> that doesn't exist, it stays as-is in the instructions</li> <li>Empty or whitespace-only output keys are ignored</li> </ul>"},{"location":"agents/configuration/#toolsets","title":"toolsets","text":"<p>Type: <code>array</code> of strings Required: No Supported by: <code>llm</code> agent type only</p> <p>Lists external tool integrations available to this agent.</p> <pre><code>agents:\n  researcher:\n    type: llm\n    toolsets:\n      - duckduckgo        # Web search\n      - memory-server     # Persistent storage\n\n  scheduler:\n    type: llm\n    toolsets:\n      - google-calendar   # Calendar integration\n      - notification-server  # Push notifications\n\n  coordinator:\n    type: parallel\n    # toolsets not supported for parallel agents\n    # But sub-agents can have toolsets\n</code></pre>"},{"location":"agents/configuration/#available-toolsets","title":"Available Toolsets","text":"<p>Common toolsets: - <code>duckduckgo</code> - Web search capabilities - <code>memory-server</code> - Persistent key-value storage - <code>notification-server</code> - Push notifications - <code>weather-tool</code> - Weather data and forecasts - <code>google-calendar</code> - Calendar events and scheduling</p> <p>See Available Tools for complete catalog.</p>"},{"location":"agents/configuration/#tool-access-rules","title":"Tool Access Rules","text":"<ul> <li>\u2705 LLM agents can use tools directly</li> <li>\u274c Parallel agents cannot (sub-agents can)</li> <li>\u274c Loop agents cannot (sub-agent can)</li> <li>\u274c Sequence agents cannot (sub-agents can)</li> </ul>"},{"location":"agents/configuration/#max_iterations","title":"max_iterations","text":"<p>Type: <code>number</code> Required: Yes (for <code>loop</code> agents only) Valid Range: 1-10</p> <p>Number of iterations for loop-type agents.</p> <pre><code>agents:\n  content_refiner:\n    type: loop\n    max_iterations: 3    # Will execute sub-agent 3 times\n    sub_agents:\n      - editor\n</code></pre> <p>Guidelines: - 2-3 iterations: Most content refinement - 4-5 iterations: Complex problem solving - 6+ iterations: Rarely needed (diminishing returns)</p> <p>Cost implications: - Cost scales linearly with iterations - Each iteration is a full agent execution - Consider trade-off between quality and cost</p>"},{"location":"agents/configuration/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code>version: \"1\"\nid: research-writing-team\nname: Research &amp; Writing Team\ndescription: Conducts comprehensive research and creates publication-ready content with professional editing\ninteractive: true\ndefault_agent: project_manager\n\nsettings:\n  - name: seo_mode\n    type: bool\n    title: SEO Optimization\n    description: Optimize content for search engines\n    defaultValue: false\n\n  - name: tone\n    type: string\n    title: Content Tone\n    description: Writing style and formality level\n    defaultValue: professional\n\n  - name: target_length\n    type: number\n    title: Target Word Count\n    description: Desired article length in words\n    defaultValue: 1500\n\nagents:\n  project_manager:\n    type: llm\n    name: Project Manager\n    description: Coordinates research and writing workflow\n    model: gpt-4o\n    instructions:\n      - |\n          You coordinate the content creation process.\n\n          Workflow:\n          1. For research requests \u2192 transfer_task to multi_source_researcher\n          2. For writing requests \u2192 transfer_task to content_pipeline\n          3. Provide status updates to user\n\n          Ensure quality at each stage.\n    sub_agents:\n      - multi_source_researcher\n      - content_pipeline\n\n  # Parallel agent for multi-source research\n  multi_source_researcher:\n    type: parallel\n    name: Multi-Source Researcher\n    description: Researches topic from multiple perspectives\n    instructions:\n      - |\n          Synthesize research from all sources into a comprehensive brief:\n          - Key facts and statistics\n          - Different perspectives\n          - Expert opinions\n          - Source citations\n    sub_agents:\n      - academic_researcher\n      - news_researcher\n      - industry_researcher\n\n  academic_researcher:\n    type: llm\n    name: Academic Researcher\n    description: Finds scholarly sources and studies\n    model: anthropic\n    instructions:\n      - |\n          Focus on academic and scientific sources.\n          Prioritize peer-reviewed research and authoritative institutions.\n    toolsets:\n      - duckduckgo\n\n  news_researcher:\n    type: llm\n    name: News Researcher\n    description: Finds current news and trends\n    model: gpt-4o\n    instructions:\n      - |\n          Focus on recent news articles and current events.\n          Identify emerging trends and breaking developments.\n    toolsets:\n      - duckduckgo\n\n  industry_researcher:\n    type: llm\n    name: Industry Researcher\n    description: Finds industry reports and expert analysis\n    model: anthropic\n    instructions:\n      - |\n          Focus on industry publications, market research, and expert commentary.\n          Identify practical applications and business implications.\n    toolsets:\n      - duckduckgo\n\n  # Sequence agent for content creation pipeline\n  content_pipeline:\n    type: sequence\n    name: Content Creation Pipeline\n    description: Creates and refines content through structured workflow\n    instructions:\n      - |\n          Process content through pipeline:\n          1. Draft writer creates initial version\n          2. SEO optimizer enhances discoverability (if enabled)\n          3. Copy editor polishes final version\n    sub_agents:\n      - draft_writer\n      - seo_optimizer\n      - copy_editor\n\n  draft_writer:\n    type: llm\n    name: Draft Writer\n    description: Creates initial content draft\n    model: anthropic\n    instructions:\n      - if: \"settings.tone == 'professional'\"\n        content: |\n          Write in a professional tone:\n          - Formal language\n          - Authoritative voice\n          - Industry terminology\n          - Data-driven arguments\n\n      - if: \"settings.tone == 'conversational'\"\n        content: |\n          Write in a conversational tone:\n          - Friendly, approachable language\n          - Second-person perspective\n          - Relatable examples\n          - Engaging storytelling\n\n      - if: \"settings.tone == 'academic'\"\n        content: |\n          Write in an academic tone:\n          - Scholarly language\n          - Evidence-based reasoning\n          - Proper citations\n          - Objective analysis\n\n      - if: \"settings.tone == 'casual'\"\n        content: |\n          Write in a casual tone:\n          - Relaxed, informal language\n          - Personal anecdotes\n          - Humor where appropriate\n          - Easy-to-digest content\n\n      - |\n          Create comprehensive content based on research.\n          Target length: {settings.target_length} words.\n\n          Structure:\n          - Compelling introduction\n          - Well-organized body sections\n          - Clear conclusion with takeaways\n\n  seo_optimizer:\n    type: llm\n    name: SEO Optimizer\n    description: Optimizes content for search engines\n    model: gpt-4o\n    instructions:\n      - if: \"settings.seo_mode\"\n        content: |\n          Enhance content for SEO:\n          - Identify target keyword\n          - Optimize title and headings\n          - Add meta description\n          - Improve internal linking\n          - Ensure keyword density (1-2%)\n          - Add alt text recommendations\n\n      - |\n          Pass content through without SEO modifications.\n\n  copy_editor:\n    type: llm\n    name: Copy Editor\n    description: Final editing and polish\n    model: anthropic\n    instructions:\n      - |\n          Provide final polish:\n          - Fix grammar and spelling\n          - Improve clarity and flow\n          - Strengthen weak sections\n          - Ensure consistency\n          - Verify tone matches requirements\n\n          Maintain the author's voice while elevating quality.\n</code></pre>"},{"location":"agents/configuration/#validation-rules","title":"Validation Rules","text":""},{"location":"agents/configuration/#team-level-validation","title":"Team-Level Validation","text":"Rule Description Required fields <code>version</code>, <code>id</code>, <code>name</code>, <code>description</code>, <code>default_agent</code>, <code>agents</code> must be present Unique ID <code>id</code> must be unique across all teams in system Default agent exists <code>default_agent</code> must match an agent name in <code>agents</code> Agent count Must have at least 1 agent Setting keys unique All setting <code>key</code> values must be unique within team"},{"location":"agents/configuration/#agent-level-validation","title":"Agent-Level Validation","text":"Rule Description Required fields <code>name</code>, <code>description</code>, <code>instructions</code> must be present Unique names Agent names must be unique within team Sub-agent references All <code>sub_agents</code> must reference existing agents in team Type constraints <code>parallel</code> needs 2+ sub-agents, <code>loop</code> needs exactly 1, <code>sequence</code> needs 2+ Max iterations Required for <code>loop</code> type, must be 1-10 Toolset availability All <code>toolsets</code> must be registered with system No circular refs Agents cannot form circular delegation chains"},{"location":"agents/configuration/#instruction-validation","title":"Instruction Validation","text":"Rule Description Default required Must have at least one plain string instruction (no <code>if</code> condition) Valid conditions Conditions must match pattern <code>settings.property</code> or <code>settings.property == value</code> Setting references Settings referenced in conditions must exist in team <code>settings</code> Non-empty Instruction content cannot be empty"},{"location":"agents/configuration/#setting-validation","title":"Setting Validation","text":"Rule Description Type match <code>default_value</code> must match <code>type</code> Allowed values If <code>allowed_values</code> specified, <code>default_value</code> must be in list String values only <code>allowed_values</code> only valid for <code>type: string</code> Key format <code>key</code> must be snake_case, alphanumeric with underscores"},{"location":"agents/configuration/#schema-errors","title":"Schema Errors","text":"<p>Common validation errors and how to fix them:</p>"},{"location":"agents/configuration/#agent-x-not-found","title":"\"Agent 'X' not found\"","text":"<pre><code># \u274c Problem\ndefault_agent: coordinater  # Typo\n\nagents:\n  coordinator:    # Actual name\n    # ...\n\n# \u2705 Solution\ndefault_agent: coordinator\n</code></pre>"},{"location":"agents/configuration/#circular-agent-reference-detected","title":"\"Circular agent reference detected\"","text":"<pre><code># \u274c Problem\nagents:\n  agent_a:\n    sub_agents:\n      - agent_b\n\n  agent_b:\n    sub_agents:\n      - agent_a    # Circular!\n\n# \u2705 Solution - Remove circular reference\nagents:\n  agent_a:\n    sub_agents:\n      - agent_b\n\n  agent_b:\n    # No sub_agents or delegate elsewhere\n</code></pre>"},{"location":"agents/configuration/#loop-agent-requires-exactly-1-sub-agent","title":"\"Loop agent requires exactly 1 sub-agent\"","text":"<pre><code># \u274c Problem\nrefiner:\n  type: loop\n  max_iterations: 3\n  sub_agents:\n    - agent_a\n    - agent_b    # Too many!\n\n# \u2705 Solution\nrefiner:\n  type: loop\n  max_iterations: 3\n  sub_agents:\n    - agent_a    # Exactly 1\n</code></pre>"},{"location":"agents/configuration/#toolset-x-not-available","title":"\"Toolset 'X' not available\"","text":"<pre><code># \u274c Problem\nresearcher:\n  toolsets:\n    - duck-duck-go    # Wrong name\n\n# \u2705 Solution\nresearcher:\n  toolsets:\n    - duckduckgo      # Correct name\n</code></pre>"},{"location":"agents/configuration/#default-value-must-be-in-allowed_values","title":"\"Default value must be in allowed_values\"","text":"<pre><code># \u274c Problem\nsettings:\n  - name: format\n    type: string\n    defaultValue: yaml    # Value should be from a known set\n\n# \u2705 Solution\nsettings:\n  - name: format\n    type: string\n    description: Output format (json, xml, or yaml)\n    defaultValue: yaml\n</code></pre>"},{"location":"agents/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Creating Agents - Step-by-step guide</li> <li>Agent Types - LLM, Parallel, Loop, Sequence details</li> <li>Examples - Real-world configuration examples</li> <li>Settings Guide - Advanced settings patterns</li> <li>Conditional Instructions - Dynamic behavior</li> </ul> <p>Related: Overview | Creating Teams | Schema Reference</p>"},{"location":"agents/creating-agents/","title":"Creating Agent Teams","text":"<p>This guide walks you through creating your first AI agent team from scratch.</p>"},{"location":"agents/creating-agents/#prerequisites","title":"Prerequisites","text":"<p>Before creating teams, ensure you have:</p> <ul> <li>\u2705 Access to the MyAgents API</li> <li>\u2705 Understanding of Team Architecture</li> <li>\u2705 Familiarity with Agent Types</li> <li>\u2705 Basic YAML knowledge</li> </ul>"},{"location":"agents/creating-agents/#quick-start","title":"Quick Start","text":"<p>The fastest way to create a team:</p> <ol> <li>Create YAML file in <code>apps/api/src/agents/</code></li> <li>Define team identity (id, name, description)</li> <li>Add agents with instructions</li> <li>Restart API to load team</li> <li>Test via chat interface</li> </ol>"},{"location":"agents/creating-agents/#step-by-step-example","title":"Step-by-Step Example","text":"<p>Create <code>apps/api/src/agents/weather-team.yaml</code>:</p> <pre><code>version: \"1\"\nid: weather-team\nname: Weather Team\ndescription: Provides current weather and forecasts\ndefault_agent: weather_helper\n\nagents:\n  weather_helper:\n    type: llm\n    name: Weather Helper\n    description: Retrieves weather information\n    instructions:\n      - |\n          You provide weather information using the weather tool.\n          Present forecasts clearly with temperatures, conditions, and alerts.\n    toolsets:\n      - weather-tool\n</code></pre> <p>Restart the API, and your team is ready!</p>"},{"location":"agents/creating-agents/#step-1-team-identity","title":"Step 1: Team Identity","text":"<p>Every team needs a unique identity for routing and discovery.</p>"},{"location":"agents/creating-agents/#required-fields","title":"Required Fields","text":""},{"location":"agents/creating-agents/#version-string","title":"<code>version</code> (string)","text":"<p>Schema version for future compatibility.</p> <pre><code>version: \"1\"  # Always use \"1\" currently\n</code></pre>"},{"location":"agents/creating-agents/#id-string","title":"<code>id</code> (string)","text":"<p>Unique system identifier for this team.</p> <p>Requirements: - Lowercase letters, numbers, hyphens only - Start with letter - Between 3-50 characters - Unique across all teams</p> <p>Examples: <pre><code># Good\nid: weather-team\nid: customer-support\nid: content-creator-v2\n\n# Bad\nid: Weather Team  # No spaces\nid: wt            # Too short\nid: _weather      # No leading underscore\n</code></pre></p>"},{"location":"agents/creating-agents/#name-string","title":"<code>name</code> (string)","text":"<p>User-facing display name.</p> <p>Guidelines: - Clear and descriptive - Title case recommended - 5-50 characters - Can include spaces and special characters</p> <p>Examples: <pre><code># Good\nname: Weather Assistant\nname: Customer Support Team\nname: Blog Writing &amp; Editing\n\n# Bad\nname: wt              # Not descriptive\nname: Team            # Too generic\n</code></pre></p>"},{"location":"agents/creating-agents/#description-string","title":"<code>description</code> (string)","text":"<p>Brief summary of team capabilities - critical for switchboard routing.</p> <p>Guidelines: - One sentence, 50-200 characters - Describe what problems the team solves - Focus on user benefits, not internal implementation - Use active, specific language</p> <p>Examples: <pre><code># Good - Specific and action-oriented\ndescription: Provides current weather conditions and multi-day forecasts for any location\n\ndescription: Routes customer support inquiries to specialized agents for technical, billing, or account issues\n\ndescription: Researches, writes, and edits blog posts with SEO optimization\n\n# Bad - Vague or implementation-focused\ndescription: A team that does weather stuff\n\ndescription: Uses agents to help users\n\ndescription: Has multiple personas for different tasks\n</code></pre></p>"},{"location":"agents/creating-agents/#default_agent-string","title":"<code>default_agent</code> (string)","text":"<p>Entry point agent name - first agent that handles requests.</p> <pre><code>default_agent: coordinator  # Must match an agent name in agents section\n</code></pre>"},{"location":"agents/creating-agents/#optional-fields","title":"Optional Fields","text":""},{"location":"agents/creating-agents/#interactive-boolean","title":"<code>interactive</code> (boolean)","text":"<p>Controls whether team persists after processing requests.</p> <pre><code># Team stays active for multi-turn conversations\ninteractive: true\n\n# Team returns to switchboard after each response (default)\ninteractive: false\n</code></pre> <p>When to use <code>interactive: true</code>: - Shopping and browsing experiences - Content creation and iteration - Multi-step workflows requiring context - Tutorial and learning experiences</p> <p>When to use <code>interactive: false</code> (default): - Quick lookups (weather, definitions, calculations) - Single-transaction tasks - Automated notifications - Background processing</p>"},{"location":"agents/creating-agents/#settings-object","title":"<code>settings</code> (object)","text":"<p>Runtime configuration options accessible to agents.</p> <pre><code>settings:\n  - name: verbose_mode\n    type: bool\n    title: Verbose Output\n    description: Include detailed explanations\n    defaultValue: false\n\n  - name: temperature_unit\n    type: string\n    title: Temperature Unit\n    description: Display temperature in Fahrenheit or Celsius\n    defaultValue: F\n</code></pre> <p>See Settings for complete documentation.</p>"},{"location":"agents/creating-agents/#complete-team-header","title":"Complete Team Header","text":"<pre><code>version: \"1\"\nid: support-team\nname: Customer Support Team\ndescription: Routes customer inquiries to specialized support agents for technical, billing, and account assistance\ninteractive: true\ndefault_agent: coordinator\n\nsettings:\n  - name: priority_mode\n    type: bool\n    title: Priority Mode\n    description: Fast-track urgent requests\n    defaultValue: false\n\nagents:\n  # Agents defined below...\n</code></pre>"},{"location":"agents/creating-agents/#step-2-define-agents","title":"Step 2: Define Agents","text":"<p>Agents are the specialized roles that make up your team.</p>"},{"location":"agents/creating-agents/#single-agent-team","title":"Single-Agent Team","text":"<p>The simplest team has one agent handling all interactions.</p> <pre><code>version: \"1\"\nid: calculator-team\nname: Calculator Team\ndescription: Performs mathematical calculations\ndefault_agent: calculator\n\nagents:\n  calculator:\n    type: llm\n    name: Calculator\n    description: Performs calculations\n    instructions:\n      - |\n          You perform mathematical calculations. Handle:\n          - Basic arithmetic\n          - Unit conversions\n          - Percentage calculations\n          - Statistical operations\n\n          Show your work and provide clear explanations.\n</code></pre> <p>Best for: - Specialized utilities - Single-purpose tools - Simple workflows</p>"},{"location":"agents/creating-agents/#multi-agent-team","title":"Multi-Agent Team","text":"<p>Complex teams have multiple agents that coordinate.</p> <pre><code>version: \"1\"\nid: shopping-team\nname: Shopping Team\ndescription: Assists with grocery shopping, meal planning, and product recommendations\ninteractive: true\ndefault_agent: coordinator\n\nagents:\n  coordinator:\n    type: llm\n    name: Shopping Coordinator\n    description: Routes shopping requests\n    instructions:\n      - |\n          Route customer requests:\n          - Product searches \u2192 product_specialist\n          - Meal planning \u2192 meal_planner\n          - Price comparisons \u2192 price_analyst\n\n          Use transfer_task to delegate.\n    sub_agents:\n      - product_specialist\n      - meal_planner\n      - price_analyst\n\n  product_specialist:\n    type: llm\n    name: Product Specialist\n    description: Finds and recommends products\n    instructions:\n      - |\n          Search catalog for products matching customer needs.\n          Provide 3-5 recommendations with:\n          - Product name and description\n          - Price and size\n          - Rating and review summary\n          - Availability\n    toolsets:\n      - product-catalog\n\n  meal_planner:\n    type: llm\n    name: Meal Planner\n    description: Creates meal plans and shopping lists\n    instructions:\n      - |\n          Create meal plans based on:\n          - Dietary restrictions\n          - Number of servings\n          - Budget constraints\n          - Cuisine preferences\n\n          Generate shopping lists with quantities.\n\n  price_analyst:\n    type: llm\n    name: Price Analyst\n    description: Compares prices and finds deals\n    instructions:\n      - |\n          Compare prices across brands and sizes.\n          Identify:\n          - Best value (price per unit)\n          - Current sales and discounts\n          - Bulk purchase savings\n          - Generic alternatives\n    toolsets:\n      - product-catalog\n</code></pre>"},{"location":"agents/creating-agents/#step-3-agent-configuration","title":"Step 3: Agent Configuration","text":"<p>Each agent requires specific configuration properties.</p>"},{"location":"agents/creating-agents/#required-properties","title":"Required Properties","text":""},{"location":"agents/creating-agents/#name-string_1","title":"<code>name</code> (string)","text":"<p>Unique identifier within team scope.</p> <p>Naming conventions: <pre><code># Good - Descriptive, snake_case\nname: product_specialist\nname: technical_support\nname: content_writer\n\n# Bad\nname: ps              # Too short\nname: agent1          # Not descriptive\nname: Product-Agent   # Use snake_case\n</code></pre></p>"},{"location":"agents/creating-agents/#description-string_1","title":"<code>description</code> (string)","text":"<p>Brief summary of agent role (50-150 characters).</p> <pre><code># Good\ndescription: Finds products matching customer requirements\ndescription: Handles technical troubleshooting and bug reports\ndescription: Creates engaging blog content with SEO optimization\n\n# Bad\ndescription: Agent    # Not descriptive\ndescription: Does product stuff  # Too vague\n</code></pre>"},{"location":"agents/creating-agents/#instructions-array","title":"<code>instructions</code> (array)","text":"<p>Defines agent behavior - the most important configuration.</p> <p>Structure: <pre><code>instructions:\n  - \"condition\": |\n      Instructions when condition is true\n  - |\n      Default instructions (condition is empty string)\n</code></pre></p> <p>Basic Example: <pre><code>instructions:\n  - |\n      You are a technical support agent.\n\n      Responsibilities:\n      - Diagnose technical issues\n      - Provide step-by-step solutions\n      - Escalate complex problems\n\n      Guidelines:\n      - Be patient and clear\n      - Confirm understanding before closing\n      - Document all resolutions\n</code></pre></p> <p>With Conditional Logic: <pre><code>instructions:\n  - if: \"settings.expert_mode\"\n    content: |\n      You are in expert mode. Provide:\n      - Technical details and internals\n      - Advanced configuration options\n      - Performance optimization tips\n      - Direct API access when relevant\n  - |\n      You are in standard mode. Provide:\n      - User-friendly explanations\n      - Step-by-step guides\n      - Visual aids when helpful\n      - No technical jargon\n</code></pre></p> <p>See Conditional Instructions for advanced patterns.</p>"},{"location":"agents/creating-agents/#optional-properties","title":"Optional Properties","text":""},{"location":"agents/creating-agents/#type-string","title":"<code>type</code> (string)","text":"<p>Execution pattern for this agent.</p> <pre><code>type: llm        # Interactive assistant (default)\ntype: parallel   # Concurrent execution\ntype: loop       # Iterative refinement\ntype: sequence   # Sequential pipeline\n</code></pre> <p>See Agent Types for detailed documentation.</p>"},{"location":"agents/creating-agents/#model-string","title":"<code>model</code> (string)","text":"<p>LLM provider for this agent.</p> <pre><code>model: anthropic  # Claude (recommended for analysis, writing)\nmodel: gpt-4o     # GPT-4 (general purpose)\n</code></pre> <p>When to specify: - Cost optimization (different pricing) - Quality requirements (specific model strengths) - Performance needs (response time variations)</p> <p>Model Strengths: - Claude (anthropic): Long-form writing, detailed analysis, complex reasoning - GPT-4 (gpt-4o): General tasks, broad knowledge, consistent performance</p>"},{"location":"agents/creating-agents/#sub_agents-array-of-strings","title":"<code>sub_agents</code> (array of strings)","text":"<p>Agents this agent can delegate to via <code>transfer_task</code>.</p> <pre><code>coordinator:\n  sub_agents:\n    - specialist_1\n    - specialist_2\n    - specialist_3\n</code></pre> <p>Important: - Agent names must exist in team's <code>agents</code> section - Creates delegation hierarchy - Enables workflow orchestration</p>"},{"location":"agents/creating-agents/#toolsets-array-of-strings","title":"<code>toolsets</code> (array of strings)","text":"<p>External tools this agent can access.</p> <pre><code>researcher:\n  toolsets:\n    - duckduckgo      # Web search\n    - memory-server   # Persistent storage\n</code></pre> <p>See Available Tools for complete catalog.</p>"},{"location":"agents/creating-agents/#complete-agent-example","title":"Complete Agent Example","text":"<pre><code>content_writer:\n  type: llm\n  name: Content Writer\n  description: Creates SEO-optimized blog posts\n  model: anthropic\n  instructions:\n    - if: \"settings.seo_mode\"\n      content: |\n        Create SEO-optimized content with:\n        - Target keyword integration (5-7 mentions)\n        - Meta description under 160 characters\n        - Header hierarchy (H2, H3)\n        - Internal linking opportunities\n        - Alt text for images\n    - |\n        Create engaging blog content with:\n        - Clear introduction with hook\n        - Structured body with subheadings\n        - Actionable takeaways\n        - Compelling conclusion\n\n        Tone: Professional yet conversational\n        Length: 1000-1500 words\n  toolsets:\n    - duckduckgo\n    - memory-server\n  sub_agents:\n    - seo_analyst\n    - fact_checker\n</code></pre>"},{"location":"agents/creating-agents/#step-4-agent-coordination","title":"Step 4: Agent Coordination","text":""},{"location":"agents/creating-agents/#delegation-patterns","title":"Delegation Patterns","text":""},{"location":"agents/creating-agents/#hub-and-spoke-most-common","title":"Hub-and-Spoke (Most Common)","text":"<p>One coordinator routes to multiple specialists.</p> <pre><code>    Coordinator\n    /    |    \\\n   /     |     \\\n  A      B      C\n</code></pre> <pre><code>agents:\n  coordinator:\n    sub_agents:\n      - specialist_a\n      - specialist_b\n      - specialist_c\n\n  specialist_a:\n    # Configuration...\n\n  specialist_b:\n    # Configuration...\n\n  specialist_c:\n    # Configuration...\n</code></pre>"},{"location":"agents/creating-agents/#hierarchical","title":"Hierarchical","text":"<p>Multi-level delegation for complex workflows.</p> <pre><code>   Manager\n      |\n   Team Lead\n    /    \\\n   A      B\n</code></pre> <pre><code>agents:\n  manager:\n    sub_agents:\n      - team_lead\n\n  team_lead:\n    sub_agents:\n      - specialist_a\n      - specialist_b\n\n  specialist_a:\n    # Configuration...\n\n  specialist_b:\n    # Configuration...\n</code></pre>"},{"location":"agents/creating-agents/#sequential-pipeline","title":"Sequential Pipeline","text":"<p>Use <code>sequence</code> agent type for ordered processing.</p> <pre><code>A \u2192 B \u2192 C \u2192 D\n</code></pre> <pre><code>agents:\n  pipeline:\n    type: sequence\n    sub_agents:\n      - stage_a\n      - stage_b\n      - stage_c\n      - stage_d\n</code></pre> <p>See Agent Types and Multi-Agent Workflows.</p>"},{"location":"agents/creating-agents/#transfer-task-pattern","title":"Transfer Task Pattern","text":"<p>Agents use the automatically available <code>transfer_task</code> function to delegate:</p> <pre><code>coordinator:\n  instructions:\n    - |\n        Analyze the request type:\n\n        - Technical questions: use transfer_task to delegate to technical_support\n        - Billing questions: use transfer_task to delegate to billing_support\n        - Account questions: use transfer_task to delegate to account_support\n\n        Include relevant context when transferring.\n  sub_agents:\n    - technical_support\n    - billing_support\n    - account_support\n</code></pre> <p>Key points: - <code>transfer_task</code> is automatically available to agents with <code>sub_agents</code> - Agent names must match <code>sub_agents</code> array - Include context in transfer for continuity</p>"},{"location":"agents/creating-agents/#step-5-add-tools","title":"Step 5: Add Tools","text":"<p>Tools connect agents to external systems and data.</p>"},{"location":"agents/creating-agents/#available-toolsets","title":"Available Toolsets","text":"<p>Common toolsets include: - <code>duckduckgo</code> - Web search - <code>memory-server</code> - Persistent storage - <code>notification-server</code> - Push notifications - <code>weather-tool</code> - Weather data - <code>google-calendar</code> - Calendar integration</p> <p>See Available Tools for complete list.</p>"},{"location":"agents/creating-agents/#tool-configuration","title":"Tool Configuration","text":"<p>Add toolsets to agent configuration:</p> <pre><code>researcher:\n  name: Researcher\n  description: Conducts web research\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Conduct thorough research using web search.\n        Store important findings in memory for future reference.\n</code></pre>"},{"location":"agents/creating-agents/#tool-usage-in-instructions","title":"Tool Usage in Instructions","text":"<p>Guide agents on when and how to use tools:</p> <pre><code>shopping_assistant:\n  toolsets:\n    - product-catalog\n    - memory-server\n  instructions:\n    - |\n        When user asks about products:\n        1. Check memory-server for user preferences\n        2. Search product-catalog using preferences\n        3. Present 3-5 recommendations\n        4. Store user feedback in memory-server\n</code></pre>"},{"location":"agents/creating-agents/#tool-best-practices","title":"Tool Best Practices","text":"<ol> <li>Minimal Tools: Only include tools agent actually needs</li> <li>Clear Instructions: Specify when to use each tool</li> <li>Error Handling: Guide agents on tool failures</li> <li>Data Management: Define what to store/retrieve from memory</li> </ol>"},{"location":"agents/creating-agents/#step-6-testing-validation","title":"Step 6: Testing &amp; Validation","text":""},{"location":"agents/creating-agents/#local-testing","title":"Local Testing","text":"<ol> <li>Place file in <code>apps/api/src/agents/</code></li> <li>Restart API to load team</li> <li>Check logs for loading errors</li> <li>Test via chat interface</li> </ol>"},{"location":"agents/creating-agents/#validation-checklist","title":"Validation Checklist","text":"<p>Team Configuration: - \u2705 Unique <code>id</code> (no conflicts) - \u2705 Descriptive <code>name</code> and <code>description</code> - \u2705 <code>default_agent</code> matches an agent name - \u2705 Valid YAML syntax</p> <p>Agent Configuration: - \u2705 All agents have unique names - \u2705 All agents have <code>description</code> - \u2705 All agents have <code>instructions</code> - \u2705 <code>sub_agents</code> reference valid agent names - \u2705 <code>toolsets</code> reference available tools</p> <p>Functionality: - \u2705 Default agent responds appropriately - \u2705 Delegation works as expected - \u2705 Tools are accessible and functional - \u2705 Settings apply correctly (if used)</p>"},{"location":"agents/creating-agents/#common-issues","title":"Common Issues","text":"<p>Team Not Loading <pre><code>Error: Duplicate team ID\n</code></pre> - \u2705 Check: Is <code>id</code> unique across all teams? - \u2705 Fix: Choose different <code>id</code></p> <p>YAML Syntax Error <pre><code>Error: Invalid YAML at line 42\n</code></pre> - \u2705 Check: Proper indentation (use spaces, not tabs) - \u2705 Check: Strings with colons in quotes - \u2705 Check: Multiline strings use <code>|</code> correctly</p> <p>Agent Not Found <pre><code>Error: Default agent 'coordinater' not found\n</code></pre> - \u2705 Check: Spelling matches exactly (case-sensitive) - \u2705 Check: Agent exists in <code>agents</code> section</p> <p>Tool Not Available <pre><code>Error: Toolset 'duck-duck-go' not found\n</code></pre> - \u2705 Check: Correct toolset name (e.g., <code>duckduckgo</code>) - \u2705 Check: Toolset is registered with system</p>"},{"location":"agents/creating-agents/#debugging-tips","title":"Debugging Tips","text":"<ol> <li>Check API Logs: Look for loading and validation errors</li> <li>Test Incrementally: Start simple, add complexity gradually</li> <li>Verify Syntax: Use YAML validator before deploying</li> <li>Review Examples: Compare with working team configurations</li> </ol>"},{"location":"agents/creating-agents/#step-7-deployment","title":"Step 7: Deployment","text":""},{"location":"agents/creating-agents/#development-environment","title":"Development Environment","text":"<ol> <li>Place YAML file in <code>apps/api/src/agents/</code></li> <li>Restart API server</li> <li>Team loads automatically</li> </ol>"},{"location":"agents/creating-agents/#production-deployment","title":"Production Deployment","text":"<ol> <li>Validate thoroughly in development</li> <li>Test all functionality</li> <li>Document team capabilities</li> <li>Deploy via standard CI/CD pipeline</li> <li>Monitor usage and performance</li> </ol>"},{"location":"agents/creating-agents/#version-control","title":"Version Control","text":"<pre><code># Add team file to git\ngit add apps/api/src/agents/my-team.yaml\n\n# Commit with descriptive message\ngit commit -m \"Add shopping team with meal planning\"\n\n# Push to repository\ngit push origin main\n</code></pre>"},{"location":"agents/creating-agents/#examples-by-use-case","title":"Examples by Use Case","text":""},{"location":"agents/creating-agents/#customer-support-team","title":"Customer Support Team","text":"<pre><code>version: \"1\"\nid: support-team\nname: Customer Support\ndescription: Routes support tickets to technical, billing, or account specialists\ninteractive: true\ndefault_agent: coordinator\n\nagents:\n  coordinator:\n    name: Support Coordinator\n    description: Routes tickets to specialists\n    instructions:\n      - |\n          Analyze the inquiry and delegate:\n          - Bugs, errors, technical issues \u2192 technical_support\n          - Payments, invoices, billing \u2192 billing_support\n          - Login, settings, security \u2192 account_support\n    sub_agents:\n      - technical_support\n      - billing_support\n      - account_support\n\n  technical_support:\n    name: Technical Support\n    description: Handles technical issues\n    instructions:\n      - |\n          Provide technical assistance:\n          - Diagnose problems systematically\n          - Offer step-by-step solutions\n          - Link to relevant documentation\n          - Escalate complex issues to engineering\n    toolsets:\n      - memory-server\n\n  billing_support:\n    name: Billing Support\n    description: Handles billing inquiries\n    instructions:\n      - |\n          Address billing questions:\n          - Explain charges and invoices\n          - Process refund requests\n          - Update payment methods\n          - Resolve billing disputes\n    toolsets:\n      - memory-server\n\n  account_support:\n    name: Account Support\n    description: Handles account management\n    instructions:\n      - |\n          Assist with account issues:\n          - Reset passwords\n          - Update profile information\n          - Configure security settings\n          - Delete or deactivate accounts\n    toolsets:\n      - memory-server\n</code></pre>"},{"location":"agents/creating-agents/#research-writing-team","title":"Research &amp; Writing Team","text":"<pre><code>version: \"1\"\nid: research-writing-team\nname: Research &amp; Writing Team\ndescription: Conducts research and creates comprehensive written content\ninteractive: true\ndefault_agent: coordinator\n\nagents:\n  coordinator:\n    name: Project Coordinator\n    description: Manages research and writing workflow\n    instructions:\n      - |\n          Coordinate content creation:\n          1. Route research requests to researcher\n          2. Route writing requests to writer with research\n          3. Route editing requests to editor\n\n          Ensure quality throughout pipeline.\n    sub_agents:\n      - researcher\n      - writer\n      - editor\n\n  researcher:\n    name: Researcher\n    description: Conducts thorough research\n    model: anthropic\n    instructions:\n      - |\n          Research the topic comprehensively:\n          - Find authoritative sources\n          - Gather key facts and statistics\n          - Identify different perspectives\n          - Note conflicting information\n\n          Provide organized research brief.\n    toolsets:\n      - duckduckgo\n      - memory-server\n\n  writer:\n    name: Content Writer\n    description: Creates written content\n    model: anthropic\n    instructions:\n      - |\n          Write engaging content based on research:\n          - Clear, compelling introduction\n          - Well-structured body with subheadings\n          - Evidence-based arguments\n          - Strong conclusion\n\n          Tone: Professional yet accessible\n          Length: 1000-1500 words\n\n  editor:\n    name: Editor\n    description: Polishes content\n    model: anthropic\n    instructions:\n      - |\n          Edit for excellence:\n          - Fix grammar and spelling\n          - Improve clarity and flow\n          - Strengthen arguments\n          - Ensure consistency\n\n          Maintain author's voice while elevating quality.\n</code></pre>"},{"location":"agents/creating-agents/#data-analysis-team","title":"Data Analysis Team","text":"<pre><code>version: \"1\"\nid: analytics-team\nname: Analytics Team\ndescription: Analyzes data and generates insights with visualizations\ndefault_agent: analyzer\n\nagents:\n  analyzer:\n    type: sequence\n    name: Analysis Pipeline\n    description: Complete analysis workflow\n    instructions:\n      - |\n          Process data through pipeline:\n          1. Validate and clean data\n          2. Perform statistical analysis\n          3. Generate summary report\n    sub_agents:\n      - data_validator\n      - statistician\n      - report_writer\n\n  data_validator:\n    name: Data Validator\n    description: Validates and cleans data\n    instructions:\n      - |\n          Validate the dataset:\n          - Check for missing values\n          - Identify outliers\n          - Verify data types\n          - Remove duplicates\n\n          Report data quality issues.\n\n  statistician:\n    name: Statistician\n    description: Performs statistical analysis\n    model: gpt-4o\n    instructions:\n      - |\n          Analyze the data:\n          - Calculate descriptive statistics\n          - Identify trends and patterns\n          - Test hypotheses\n          - Determine correlations\n\n          Provide clear, actionable insights.\n\n  report_writer:\n    name: Report Writer\n    description: Creates analysis reports\n    model: anthropic\n    instructions:\n      - |\n          Generate comprehensive report:\n          - Executive summary\n          - Key findings\n          - Detailed analysis\n          - Recommendations\n          - Methodology notes\n\n          Use clear visualizations and charts.\n</code></pre>"},{"location":"agents/creating-agents/#best-practices","title":"Best Practices","text":""},{"location":"agents/creating-agents/#team-design","title":"Team Design","text":"<ol> <li>Single Responsibility: Each team should have a clear, focused purpose</li> <li>Clear Boundaries: Define what the team does and doesn't handle</li> <li>Appropriate Scope: Not too broad, not too narrow</li> <li>User-Focused: Design around user needs, not implementation details</li> </ol>"},{"location":"agents/creating-agents/#agent-design","title":"Agent Design","text":"<ol> <li>Specialized Roles: Each agent should have specific expertise</li> <li>Clear Instructions: Detailed, actionable behavioral guidelines</li> <li>Appropriate Tools: Only tools the agent actually needs</li> <li>Delegation Logic: When and why to delegate to other agents</li> </ol>"},{"location":"agents/creating-agents/#configuration","title":"Configuration","text":"<ol> <li>Descriptive Names: Use clear, consistent naming</li> <li>Helpful Descriptions: Aid routing and user understanding</li> <li>Sensible Defaults: Settings should work well out-of-the-box</li> <li>Validation: Test thoroughly before deployment</li> </ol>"},{"location":"agents/creating-agents/#maintenance","title":"Maintenance","text":"<ol> <li>Version Control: Track all changes</li> <li>Documentation: Explain team purpose and capabilities</li> <li>Monitoring: Track usage and performance</li> <li>Iteration: Refine based on user feedback</li> </ol>"},{"location":"agents/creating-agents/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Reference - Complete schema documentation</li> <li>Agent Types - LLM, Parallel, Loop, Sequence details</li> <li>Examples - More real-world templates</li> <li>Tools - Learn about available tools</li> <li>Advanced Patterns - Complex workflows</li> </ul> <p>Related: Overview | Agent Types | Configuration</p>"},{"location":"agents/examples/","title":"Team Examples","text":"<p>Real-world agent team templates ready to customize and deploy.</p>"},{"location":"agents/examples/#simple-teams","title":"Simple Teams","text":""},{"location":"agents/examples/#weather-assistant","title":"Weather Assistant","text":"<p>Single-agent team for weather information.</p> <pre><code>version: \"1\"\nid: weather-team\nname: Weather Team\ndescription: Provides current weather conditions, forecasts, and severe weather alerts\ndefault_agent: weather_helper\n\nagents:\n  weather_helper:\n    type: llm\n    name: Weather Helper\n    description: Retrieves weather information for any location\n    instructions:\n      - |\n        You provide weather information using the weather tool.\n\n          For current conditions:\n          - Temperature and feels-like\n          - Conditions (sunny, cloudy, rainy, etc.)\n          - Humidity and wind speed\n          - Visibility\n\n          For forecasts:\n          - Daily high/low temperatures\n          - Precipitation chances\n          - General conditions\n\n          For severe weather:\n          - Alert type and severity\n          - Affected areas\n          - Duration and recommendations\n\n          Always include the location and timestamp.\n    toolsets:\n      - weather-tool\n</code></pre> <p>Use cases: - Quick weather checks - Travel planning - Outdoor activity planning - Severe weather monitoring</p>"},{"location":"agents/examples/#calculator","title":"Calculator","text":"<p>Simple computation assistant.</p> <pre><code>version: \"1\"\nid: calculator-team\nname: Calculator Team\ndescription: Performs mathematical calculations, unit conversions, and basic statistics\ndefault_agent: calculator\n\nagents:\n  calculator:\n    type: llm\n    name: Calculator\n    description: Performs mathematical operations\n    instructions:\n      - |\n        You perform mathematical calculations accurately.\n\n          Capabilities:\n          - Basic arithmetic (addition, subtraction, multiplication, division)\n          - Advanced math (exponents, roots, logarithms)\n          - Unit conversions (length, weight, volume, temperature)\n          - Percentage calculations\n          - Basic statistics (mean, median, mode, standard deviation)\n\n          Always:\n          - Show your work\n          - Explain the formula used\n          - Round to appropriate precision\n          - Include units in results\n</code></pre> <p>Use cases: - Quick calculations - Unit conversions - Financial calculations - Statistical analysis</p>"},{"location":"agents/examples/#e-commerce-teams","title":"E-Commerce Teams","text":""},{"location":"agents/examples/#shopping-assistant","title":"Shopping Assistant","text":"<p>Interactive shopping experience with meal planning.</p> <pre><code>version: \"1\"\nid: shopping-team\nname: Shopping Team\ndescription: Assists with grocery shopping, meal planning, product recommendations, and shopping lists\ninteractive: true\ndefault_agent: shopping_coordinator\n\nsettings:\n  - name: dietary_restrictions\n    type: string\n    title: Dietary Restrictions\n    description: Filter products by dietary needs\n    defaultValue: none\n\n  - name: budget_conscious\n    type: bool\n    title: Budget Mode\n    description: Prioritize value and deals\n    defaultValue: false\n\nagents:\n  shopping_coordinator:\n    type: llm\n    name: Shopping Coordinator\n    description: Routes shopping requests to specialists\n    instructions:\n      - |\n        Welcome customers and route their requests:\n\n          - Product searches \u2192 transfer_task to product_specialist\n          - Meal planning \u2192 transfer_task to meal_planner\n          - Price comparisons \u2192 transfer_task to price_analyst\n          - Recipe questions \u2192 transfer_task to recipe_specialist\n\n          Maintain a friendly, helpful tone throughout.\n    sub_agents:\n      - product_specialist\n      - meal_planner\n      - price_analyst\n      - recipe_specialist\n\n  product_specialist:\n    type: llm\n    name: Product Specialist\n    description: Finds and recommends products\n    instructions:\n      - if: \"settings.dietary_restrictions != \\\"none\\\"\"\n        content: |\n          Filter all products by dietary restriction: {settings.dietary_restrictions}\n          Clearly label dietary attributes on recommendations.\n\n      - if: \"settings.budget_conscious\"\n        content: |\n          Prioritize value and deals:\n          - Sort by price per unit\n          - Highlight sale items\n          - Suggest generic brands\n          - Mention bulk discounts\n\n      - |\n        Search the product catalog for items matching customer needs.\n\n          Provide 3-5 recommendations with:\n          - Product name and brand\n          - Price and size (include unit price)\n          - Customer rating (if 4+ stars, highlight it)\n          - Key features or benefits\n          - Current availability\n\n          Ask clarifying questions if needs are unclear.\n    toolsets:\n      - product-catalog\n      - memory-server\n\n  meal_planner:\n    type: llm\n    name: Meal Planner\n    description: Creates meal plans and shopping lists\n    instructions:\n      - if: \"settings.dietary_restrictions != \\\"none\\\"\"\n        content: |\n          Create meal plans for: {settings.dietary_restrictions}\n          Ensure all ingredients and recipes comply with this restriction.\n\n      - |\n        Create meal plans based on:\n          - Number of servings needed\n          - Number of meals (breakfast, lunch, dinner, snacks)\n          - Dietary preferences\n          - Cuisine preferences\n          - Time constraints (quick meals vs elaborate)\n\n          For each meal provide:\n          - Recipe name\n          - Ingredients list with quantities\n          - Estimated prep/cook time\n          - Nutritional highlights\n\n          Generate consolidated shopping list organized by category:\n          - Produce\n          - Meat &amp; Seafood\n          - Dairy &amp; Eggs\n          - Pantry staples\n          - Other\n    toolsets:\n      - memory-server\n\n  price_analyst:\n    type: llm\n    name: Price Analyst\n    description: Compares prices and finds deals\n    instructions:\n      - |\n        Compare prices across:\n          - Different brands\n          - Different sizes/quantities\n          - Generic vs name brand\n\n          Highlight:\n          - Best value (lowest price per unit)\n          - Current sales and discounts\n          - Bulk purchase savings\n          - Store brand alternatives\n\n          Present comparison in clear table format.\n    toolsets:\n      - product-catalog\n\n  recipe_specialist:\n    type: llm\n    name: Recipe Specialist\n    description: Finds and suggests recipes\n    instructions:\n      - if: \"settings.dietary_restrictions != \\\"none\\\"\"\n        content: |\n          Only suggest recipes for: {settings.dietary_restrictions}\n          Verify all ingredients comply with this restriction.\n\n      - |\n        Help users find recipes based on:\n          - Available ingredients\n          - Cuisine type\n          - Meal type (breakfast, lunch, dinner, snack)\n          - Cooking time available\n          - Skill level\n\n          Provide:\n          - Recipe name and description\n          - Ingredient list\n          - Step-by-step instructions\n          - Prep and cook time\n          - Servings\n          - Tips and variations\n    toolsets:\n      - duckduckgo\n      - memory-server\n</code></pre> <p>Use cases: - Weekly grocery shopping - Meal planning - Recipe discovery - Price comparison - Dietary restriction management</p>"},{"location":"agents/examples/#content-creation-teams","title":"Content Creation Teams","text":""},{"location":"agents/examples/#blog-writing-team","title":"Blog Writing Team","text":"<p>Comprehensive content creation with research and editing.</p> <pre><code>version: \"1\"\nid: blog-team\nname: Blog Writing Team\ndescription: Researches topics, writes SEO-optimized blog posts, and edits content for publication\ninteractive: true\ndefault_agent: project_coordinator\n\nsettings:\n  - name: seo_mode\n    type: bool\n    title: SEO Optimization\n    description: Optimize content for search engines\n    defaultValue: true\n\n  - name: tone\n    type: string\n    title: Content Tone\n    description: Writing style and formality\n    defaultValue: conversational\n\n  - name: target_length\n    type: number\n    title: Target Word Count\n    description: Desired article length\n    defaultValue: 1500\n\nagents:\n  project_coordinator:\n    type: llm\n    name: Project Coordinator\n    description: Manages content creation workflow\n    model: gpt-4o\n    instructions:\n      - |\n        You coordinate the blog content creation process.\n\n          Workflow:\n          1. Clarify topic and requirements with user\n          2. transfer_task to researcher for topic research\n          3. transfer_task to content_creator (sequence agent handles draft + edit)\n          4. Review final content with user\n          5. Offer revisions if needed\n\n          Keep user informed of progress at each stage.\n    sub_agents:\n      - researcher\n      - content_creator\n\n  researcher:\n    type: llm\n    name: Content Researcher\n    description: Researches topics thoroughly\n    model: anthropic\n    instructions:\n      - |\n        Research the topic comprehensively using web search.\n\n          Gather:\n          - Key facts and statistics (with sources)\n          - Current trends and developments\n          - Expert opinions and quotes\n          - Different perspectives on the topic\n          - Related subtopics to cover\n\n          Provide an organized research brief with:\n          - Main points to cover\n          - Supporting evidence\n          - Suggested article structure\n          - Source citations\n    toolsets:\n      - duckduckgo\n      - memory-server\n\n  content_creator:\n    type: sequence\n    name: Content Creation Pipeline\n    description: Writes and edits content sequentially\n    instructions:\n      - |\n        Create publication-ready content through:\n          1. Draft writer creates initial version\n          2. Editor polishes and refines\n    sub_agents:\n      - draft_writer\n      - editor\n\n  draft_writer:\n    type: llm\n    name: Draft Writer\n    description: Creates initial content draft\n    model: anthropic\n    instructions:\n      - if: \"settings.tone == 'professional'\"\n        content: |\n          Write in a professional tone:\n          - Formal, authoritative language\n          - Industry terminology\n          - Third-person perspective\n          - Data-driven arguments\n\n      - if: \"settings.tone == 'conversational'\"\n        content: |\n          Write in a conversational tone:\n          - Friendly, approachable language\n          - Second-person perspective (\"you\")\n          - Relatable examples and stories\n          - Engaging, accessible style\n\n      - if: \"settings.tone == 'academic'\"\n        content: |\n          Write in an academic tone:\n          - Scholarly, formal language\n          - Proper citations and references\n          - Objective, analytical approach\n          - Evidence-based reasoning\n\n      - if: \"settings.seo_mode\"\n        content: |\n          Apply SEO best practices:\n          - Identify target keyword from topic\n          - Use keyword in title, headers, and throughout (1-2% density)\n          - Create compelling meta description (under 160 chars)\n          - Use headers hierarchically (H2, H3)\n          - Include internal linking opportunities\n          - Write descriptive alt text for images\n\n      - |\n        Write comprehensive blog post based on research.\n\n          Target length: {settings.target_length} words\n\n          Structure:\n          1. Compelling introduction with hook\n          2. Well-organized body with subheadings\n          3. Practical examples and evidence\n          4. Actionable takeaways\n          5. Strong conclusion\n\n          Use:\n          - Clear, concise language\n          - Short paragraphs (3-4 sentences)\n          - Bullet points for lists\n          - Relevant examples\n    toolsets:\n      - memory-server\n\n  editor:\n    type: llm\n    name: Content Editor\n    description: Reviews and polishes content\n    model: anthropic\n    instructions:\n      - |\n        Provide final editorial polish:\n\n          Check for:\n          - Grammar and spelling errors\n          - Clarity and readability\n          - Flow and transitions\n          - Consistency in tone and style\n          - Weak or unsupported claims\n          - Redundancy or wordiness\n\n          Improve:\n          - Sentence structure variety\n          - Word choice and precision\n          - Paragraph transitions\n          - Overall impact\n\n          Maintain the author's voice while elevating quality.\n          Verify word count is close to target: {settings.target_length}\n</code></pre> <p>Use cases: - Blog post creation - Content marketing - Article writing - SEO content - Thought leadership</p>"},{"location":"agents/examples/#social-media-manager","title":"Social Media Manager","text":"<p>Creates and optimizes social media content.</p> <pre><code>version: \"1\"\nid: social-media-team\nname: Social Media Team\ndescription: Creates engaging social media content optimized for different platforms\ndefault_agent: content_strategist\n\nsettings:\n  - name: platform\n    type: string\n    title: Platform\n    description: Target social media platform\n    defaultValue: twitter\n\n  - name: brand_voice\n    type: string\n    title: Brand Voice\n    description: Brand personality and tone\n    defaultValue: friendly\n\nagents:\n  content_strategist:\n    type: llm\n    name: Content Strategist\n    description: Creates platform-optimized social media content\n    model: gpt-4o\n    instructions:\n      - if: \"settings.platform == 'twitter'\"\n        content: |\n          Create content for Twitter/X:\n          - Maximum 280 characters\n          - Use 1-2 relevant hashtags\n          - Consider thread format for longer content\n          - Engaging hook in first sentence\n          - Include call-to-action when appropriate\n\n      - if: \"settings.platform == 'linkedin'\"\n        content: |\n          Create content for LinkedIn:\n          - Professional tone\n          - Longer-form content (1300-1500 chars optimal)\n          - Industry insights and thought leadership\n          - Use line breaks for readability\n          - 3-5 relevant hashtags\n          - End with question to drive engagement\n\n      - if: \"settings.platform == 'facebook'\"\n        content: |\n          Create content for Facebook:\n          - Conversational, community-focused\n          - Optimal length: 40-80 characters (or longer storytelling)\n          - Encourage comments and shares\n          - Use emojis sparingly\n          - Include relevant link or call-to-action\n\n      - if: \"settings.platform == 'instagram'\"\n        content: |\n          Create content for Instagram:\n          - Visual-first approach (note image requirements)\n          - Caption: engaging hook in first line\n          - Use line breaks and emojis\n          - 10-15 relevant hashtags (mix of popular and niche)\n          - Clear call-to-action\n\n      - if: \"settings.brand_voice == 'professional'\"\n        content: |\n          Brand voice: Professional\n          - Authoritative and credible\n          - Industry terminology\n          - Data and insights\n          - Polished and refined\n\n      - if: \"settings.brand_voice == 'friendly'\"\n        content: |\n          Brand voice: Friendly\n          - Warm and approachable\n          - Conversational language\n          - Personal touches\n          - Relatable and authentic\n\n      - if: \"settings.brand_voice == 'humorous'\"\n        content: |\n          Brand voice: Humorous\n          - Witty and entertaining\n          - Light-hearted tone\n          - Clever wordplay\n          - Fun and engaging\n\n      - if: \"settings.brand_voice == 'inspirational'\"\n        content: |\n          Brand voice: Inspirational\n          - Motivating and uplifting\n          - Aspirational messaging\n          - Storytelling approach\n          - Emotional connection\n\n      - |\n        Create engaging social media content that:\n          - Captures attention immediately\n          - Provides value (educate, entertain, or inspire)\n          - Encourages engagement\n          - Aligns with brand voice\n          - Follows platform best practices\n\n          Offer multiple variations when helpful.\n</code></pre> <p>Use cases: - Social media post creation - Content calendar filling - Platform optimization - Brand voice consistency - Engagement optimization</p>"},{"location":"agents/examples/#customer-support-teams","title":"Customer Support Teams","text":""},{"location":"agents/examples/#customer-support-team","title":"Customer Support Team","text":"<p>Multi-channel support with specialized agents.</p> <pre><code>version: \"1\"\nid: support-team\nname: Customer Support Team\ndescription: Routes customer inquiries to specialized agents for technical issues, billing questions, and account management\ninteractive: true\ndefault_agent: support_coordinator\n\nsettings:\n  - name: priority_mode\n    type: bool\n    title: Priority Mode\n    description: Fast-track urgent requests\n    defaultValue: false\n\nagents:\n  support_coordinator:\n    type: llm\n    name: Support Coordinator\n    description: Routes tickets to appropriate specialists\n    instructions:\n      - if: \"settings.priority_mode\"\n        content: |\n          PRIORITY MODE ACTIVE\n          - Respond immediately\n          - Escalate complex issues quickly\n          - Set expectation for follow-up within 1 hour\n          - Document all actions\n\n      - |\n        Greet the customer warmly and analyze their inquiry.\n\n          Route as follows:\n          - Bugs, errors, technical problems \u2192 transfer_task to technical_support\n          - Payments, invoices, refunds, billing \u2192 transfer_task to billing_support\n          - Login, password, settings, security \u2192 transfer_task to account_support\n\n          If unclear, ask 1-2 clarifying questions before routing.\n          Always summarize the issue when transferring.\n    sub_agents:\n      - technical_support\n      - billing_support\n      - account_support\n    toolsets:\n      - memory-server\n\n  technical_support:\n    type: llm\n    name: Technical Support Specialist\n    description: Handles technical issues and bugs\n    model: gpt-4o\n    instructions:\n      - if: \"settings.priority_mode\"\n        content: |\n          Priority technical support:\n          - Immediate acknowledgment\n          - Rapid diagnosis\n          - Escalate to engineering if complex\n          - Commit to timeline\n\n      - |\n        Provide technical assistance:\n\n          1. Gather information:\n             - What were you trying to do?\n             - What actually happened?\n             - Error messages or screenshots?\n             - When did this start?\n\n          2. Diagnose systematically:\n             - Check common issues first\n             - Review error logs\n             - Test reproduction steps\n\n          3. Provide solutions:\n             - Step-by-step instructions\n             - Screenshots or videos when helpful\n             - Link to relevant documentation\n             - Verify resolution\n\n          4. Escalate when needed:\n             - Complex bugs\n             - System outages\n             - Security issues\n\n          Be patient, clear, and thorough.\n    toolsets:\n      - memory-server\n      - notification-server\n\n  billing_support:\n    type: llm\n    name: Billing Support Specialist\n    description: Handles billing and payment inquiries\n    instructions:\n      - |\n        Address billing questions professionally:\n\n          Common tasks:\n          - Explain charges and invoices\n          - Process refund requests (verify eligibility)\n          - Update payment methods\n          - Adjust subscriptions\n          - Resolve billing disputes\n\n          Guidelines:\n          - Verify account ownership first\n          - Be transparent about policies\n          - Offer solutions when possible\n          - Document all transactions\n          - Confirm resolution\n\n          Escalate to manager:\n          - Refunds over $100\n          - Policy exceptions\n          - Unresolved disputes\n    toolsets:\n      - memory-server\n\n  account_support:\n    type: llm\n    name: Account Support Specialist\n    description: Handles account and security issues\n    instructions:\n      - |\n        Assist with account management:\n\n          Security-first approach:\n          - Always verify identity before making changes\n          - Use security questions\n          - Send verification emails\n          - Document all account changes\n\n          Common tasks:\n          - Password resets\n          - Update profile information\n          - Configure security settings (2FA)\n          - Privacy and data requests\n          - Account deletion or deactivation\n\n          For account deletion:\n          - Verify this is truly desired\n          - Explain consequences (data loss)\n          - Offer alternatives (deactivation)\n          - Require explicit confirmation\n    toolsets:\n      - memory-server\n      - notification-server\n</code></pre> <p>Use cases: - Customer support routing - Technical troubleshooting - Billing assistance - Account management - Multi-tier support</p>"},{"location":"agents/examples/#business-process-teams","title":"Business Process Teams","text":""},{"location":"agents/examples/#report-generator","title":"Report Generator","text":"<p>Automated business report creation.</p> <pre><code>version: \"1\"\nid: report-team\nname: Report Generator\ndescription: Generates comprehensive business reports with data analysis and visualizations\ndefault_agent: report_pipeline\n\nsettings:\n  - name: report_type\n    type: string\n    title: Report Type\n    description: Type of business report to generate\n    defaultValue: sales\n\n  - name: include_recommendations\n    type: bool\n    title: Include Recommendations\n    description: Add strategic recommendations section\n    defaultValue: true\n\nagents:\n  report_pipeline:\n    type: sequence\n    name: Report Generation Pipeline\n    description: Creates reports through structured workflow\n    instructions:\n      - |\n        Generate comprehensive business report through:\n          1. Data collection and validation\n          2. Statistical analysis\n          3. Visualization creation\n          4. Executive summary writing\n    sub_agents:\n      - data_collector\n      - data_analyst\n      - visualization_specialist\n      - summary_writer\n\n  data_collector:\n    type: llm\n    name: Data Collector\n    description: Collects and validates source data\n    instructions:\n      - if: \"settings.report_type == 'sales'\"\n        content: |\n          Collect sales data:\n          - Revenue by product/service\n          - Sales by region\n          - Customer acquisition/retention\n          - Sales team performance\n          - Period-over-period comparisons\n\n      - if: \"settings.report_type == 'marketing'\"\n        content: |\n          Collect marketing data:\n          - Campaign performance\n          - Lead generation metrics\n          - Conversion rates\n          - ROI by channel\n          - Brand awareness metrics\n\n      - if: \"settings.report_type == 'operations'\"\n        content: |\n          Collect operations data:\n          - Efficiency metrics\n          - Resource utilization\n          - Process cycle times\n          - Quality metrics\n          - Bottlenecks and delays\n\n      - if: \"settings.report_type == 'financial'\"\n        content: |\n          Collect financial data:\n          - Revenue and expenses\n          - Profit margins\n          - Cash flow\n          - Budget vs. actual\n          - Financial ratios\n\n      - |\n        Validate all data:\n          - Check for missing values\n          - Identify outliers\n          - Verify data consistency\n          - Note any data quality issues\n\n          Organize data for analysis.\n\n  data_analyst:\n    type: llm\n    name: Data Analyst\n    description: Performs statistical analysis\n    model: gpt-4o\n    instructions:\n      - |\n        Analyze the collected data:\n\n          Calculate:\n          - Descriptive statistics (mean, median, etc.)\n          - Trends over time\n          - Period-over-period changes\n          - Correlations and patterns\n\n          Identify:\n          - Key performance indicators\n          - Significant trends\n          - Anomalies or outliers\n          - Areas of concern\n          - Opportunities for improvement\n\n          Provide clear, actionable insights.\n\n  visualization_specialist:\n    type: llm\n    name: Visualization Specialist\n    description: Creates data visualizations\n    instructions:\n      - |\n          Recommend appropriate visualizations:\n\n          - Trends over time \u2192 Line charts\n          - Comparisons \u2192 Bar charts\n          - Proportions \u2192 Pie charts\n          - Relationships \u2192 Scatter plots\n          - Distributions \u2192 Histograms\n\n          For each visualization specify:\n          - Chart type\n          - Data to include\n          - Axis labels\n          - Title\n          - Key insights to highlight\n\n  summary_writer:\n    type: llm\n    name: Executive Summary Writer\n    description: Writes executive summary\n    model: anthropic\n    instructions:\n      - if: \"settings.include_recommendations\"\n        content: |\n          Create comprehensive executive summary with recommendations:\n\n          Structure:\n          1. Overview (2-3 sentences)\n          2. Key Findings (bullet points, top 5)\n          3. Detailed Analysis (paragraphs)\n          4. Strategic Recommendations (numbered list)\n          5. Next Steps (actionable items)\n\n      - |\n          Create executive summary:\n\n          Structure:\n          1. Overview (2-3 sentences)\n          2. Key Findings (bullet points, top 5)\n          3. Detailed Analysis (paragraphs)\n          4. Conclusion\n\n          Write for executive audience:\n          - Clear and concise\n          - Focus on business impact\n          - Highlight actionable insights\n          - Use business language\n</code></pre> <p>Use cases: - Automated reporting - Business analytics - Performance tracking - Executive dashboards - Data-driven decision support</p>"},{"location":"agents/examples/#advanced-teams","title":"Advanced Teams","text":""},{"location":"agents/examples/#multi-perspective-analyzer","title":"Multi-Perspective Analyzer","text":"<p>Parallel analysis from different viewpoints.</p> <pre><code>version: \"1\"\nid: analysis-team\nname: Multi-Perspective Analysis Team\ndescription: Analyzes proposals, decisions, or content from technical, business, and user perspectives simultaneously\ndefault_agent: comprehensive_analyzer\n\nagents:\n  comprehensive_analyzer:\n    type: parallel\n    name: Comprehensive Analyzer\n    description: Coordinates multi-perspective analysis\n    instructions:\n      - |\n          Synthesize insights from all perspectives into a balanced analysis.\n\n          Structure:\n          1. Executive Summary\n          2. Perspective Summaries:\n             - Technical Assessment\n             - Business Assessment\n             - User Assessment\n          3. Cross-Perspective Insights:\n             - Agreements (all perspectives align)\n             - Trade-offs (perspectives conflict)\n             - Risks (concerns raised)\n             - Opportunities (positive signals)\n          4. Overall Recommendation\n\n          Present a clear, actionable conclusion.\n    sub_agents:\n      - technical_analyst\n      - business_analyst\n      - user_analyst\n\n  technical_analyst:\n    type: llm\n    name: Technical Analyst\n    description: Evaluates technical feasibility and implications\n    model: anthropic\n    instructions:\n      - |\n          Analyze from a technical perspective:\n\n          Assess:\n          - Technical feasibility\n          - Implementation complexity\n          - Architecture implications\n          - Scalability concerns\n          - Performance impact\n          - Security considerations\n          - Technical debt\n          - Maintenance burden\n\n          Provide:\n          - Technical risks (high/medium/low)\n          - Implementation effort estimate\n          - Technical dependencies\n          - Alternative approaches\n\n  business_analyst:\n    type: llm\n    name: Business Analyst\n    description: Evaluates business value and strategy\n    model: gpt-4o\n    instructions:\n      - |\n          Analyze from a business perspective:\n\n          Assess:\n          - Business value and ROI\n          - Market opportunity\n          - Competitive advantage\n          - Revenue impact\n          - Cost implications\n          - Resource requirements\n          - Strategic alignment\n          - Risk/reward profile\n\n          Provide:\n          - Business case strength\n          - Expected timeline to value\n          - Resource needs\n          - Success metrics\n\n  user_analyst:\n    type: llm\n    name: User Experience Analyst\n    description: Evaluates user impact and usability\n    model: anthropic\n    instructions:\n      - |\n          Analyze from a user perspective:\n\n          Assess:\n          - User value and benefits\n          - Usability and ease of use\n          - User experience impact\n          - Accessibility\n          - Learning curve\n          - Adoption barriers\n          - User satisfaction potential\n          - User risks or frustrations\n\n          Provide:\n          - User value assessment\n          - UX risks and concerns\n          - Adoption likelihood\n          - User feedback needs\n</code></pre> <p>Use cases: - Product proposals - Feature decisions - Architecture reviews - Strategic planning - Content evaluation</p>"},{"location":"agents/examples/#customization-tips","title":"Customization Tips","text":"<p>All examples can be customized:</p>"},{"location":"agents/examples/#adjust-instructions","title":"Adjust Instructions","text":"<p>Modify agent instructions to match your domain: <pre><code>instructions:\n  - |\n      [Your specific business rules]\n      [Your domain knowledge]\n      [Your quality standards]\n</code></pre></p>"},{"location":"agents/examples/#add-settings","title":"Add Settings","text":"<p>Extend with your own configuration: <pre><code>settings:\n  - name: your_custom_setting\n    type: string\n    title: Your Setting\n    description: What it controls\n    allowed_values:\n      - option1\n      - option2\n    defaultValue: option1\n</code></pre></p>"},{"location":"agents/examples/#change-tools","title":"Change Tools","text":"<p>Swap toolsets based on your needs: <pre><code>toolsets:\n  - your-custom-tool\n  - your-data-source\n</code></pre></p>"},{"location":"agents/examples/#adjust-agents","title":"Adjust Agents","text":"<p>Add, remove, or modify agents: <pre><code>agents:\n  your_new_agent:\n    # Configuration\n</code></pre></p>"},{"location":"agents/examples/#next-steps","title":"Next Steps","text":"<ul> <li>Creating Teams - Customize these templates</li> <li>Configuration - Complete reference</li> <li>Agent Types - Understanding execution patterns</li> <li>Tools - Available integrations</li> <li>Advanced Patterns - Complex workflows</li> </ul> <p>Related: Overview | Creating Teams | Configuration</p>"},{"location":"agents/overview/","title":"Understanding Agents","text":"<p>This guide explains the core concepts and architecture of AI agents in the MyAgents platform.</p>"},{"location":"agents/overview/#what-is-an-agent","title":"What is an Agent?","text":"<p>An agent is a specialized AI assistant designed to handle specific business workflows or domains. Agents combine:</p> <ul> <li>Domain Expertise - Specialized knowledge and context for specific tasks</li> <li>Personas - Multiple specialized roles that work together</li> <li>Tools - Integration with external systems and services via MCP</li> <li>Configuration - Runtime behavior customization through settings</li> </ul>"},{"location":"agents/overview/#agent-types","title":"Agent Types","text":"<p>MyAgents supports four execution types:</p> <ol> <li>LLM Agent - Interactive AI assistant (default)</li> <li>Parallel Agent - Run multiple agents concurrently</li> <li>Loop Agent - Execute agent iteratively</li> <li>Sequence Agent - Sequential pipeline processing</li> </ol> <p>See Agent Types for detailed documentation on each type.</p>"},{"location":"agents/overview/#agent-architecture","title":"Agent Architecture","text":""},{"location":"agents/overview/#core-components","title":"Core Components","text":"<p>Every agent consists of four main components:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Agent                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Identity (id, name, description)   \u2502\n\u2502  Behavior Mode (interactive)        \u2502\n\u2502  Configuration (settings)           \u2502\n\u2502  Personas (specialized roles)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"agents/overview/#1-identity","title":"1. Identity","text":"<p>Defines who the agent is and what it does: - <code>id</code>: Unique system identifier (e.g., <code>\"grocery-assistant\"</code>) - <code>name</code>: User-facing display name (e.g., <code>\"Grocery Shopping Assistant\"</code>) - <code>description</code>: Brief summary of capabilities for routing</p>"},{"location":"agents/overview/#2-behavior-mode","title":"2. Behavior Mode","text":"<p>Controls conversation flow: - <code>interactive: true</code>: Agent maintains context across messages - <code>interactive: false</code> or omitted: Agent returns to switchboard after completing task</p>"},{"location":"agents/overview/#3-configuration","title":"3. Configuration","text":"<p>Runtime customization through settings: - Boolean toggles for feature flags - String options for modes and formats - Number values for thresholds and limits</p>"},{"location":"agents/overview/#4-personas","title":"4. Personas","text":"<p>Specialized roles that define agent capabilities: - Each persona has specific instructions and tools - Personas can delegate to sub-personas - Enables complex workflow orchestration</p>"},{"location":"agents/overview/#agent-patterns","title":"Agent Patterns","text":""},{"location":"agents/overview/#single-persona-agent","title":"Single-Persona Agent","text":"<p>The simplest pattern - one persona handles all interactions.</p> <pre><code>version: \"1\"\nid: weather-agent\nname: Weather Agent\ndescription: Provides current weather information\n\nagents:\n  weather_helper:\n    type: llm\n    name: Weather Helper\n    description: Retrieves and presents weather data\n    instructions:\n      - |\n        You provide weather information. Use the weather tool to get \n        current conditions and forecasts. Present information clearly \n        and concisely.\n    toolsets:\n      - weather-tool\n</code></pre> <p>When to use: - Simple, focused tasks - Single-step operations - Specialized utilities</p> <p>Examples: - Weather lookups - Currency conversion - Simple calculations - Quick information retrieval</p>"},{"location":"agents/overview/#multi-persona-agent","title":"Multi-Persona Agent","text":"<p>Multiple specialized personas work together to handle complex workflows.</p> <pre><code>version: \"1\"\nid: support-agent\nname: Customer Support Agent\ndescription: Routes and handles customer support inquiries\ninteractive: true\ndefault_agent: coordinator\n\nagents:\n  coordinator:\n    type: llm\n    name: Support Coordinator\n    description: Routes requests to appropriate specialists\n    instructions:\n      - |\n        Analyze customer requests and delegate to:\n        - technical_support for bugs and technical issues\n        - billing_support for payment questions\n        - account_support for account access\n\n        Use transfer_task to delegate work.\n    sub_agents:\n      - technical_support\n      - billing_support\n      - account_support\n\n  technical_support:\n    type: llm\n    name: Technical Support\n    description: Handles technical issues\n    instructions:\n      - |\n        Provide technical troubleshooting. Offer step-by-step \n        guidance and link to documentation.\n\n  billing_support:\n    type: llm\n    name: Billing Support\n    description: Handles billing inquiries\n    instructions:\n      - |\n        Address payment and subscription questions. Provide invoice \n        details and handle refund requests.\n\n  account_support:\n    type: llm\n    name: Account Support\n    description: Handles account management\n    instructions:\n      - |\n        Assist with account settings, password resets, and \n        security concerns.\n</code></pre> <p>When to use: - Complex, multi-step workflows - Task requiring specialization - Decision trees with routing - Sequential processing pipelines</p> <p>Examples: - Content creation teams (research \u2192 write \u2192 edit) - Customer support routing - Order processing (validate \u2192 process \u2192 fulfill) - Report generation (collect \u2192 analyze \u2192 format)</p>"},{"location":"agents/overview/#persona-design","title":"Persona Design","text":""},{"location":"agents/overview/#persona-anatomy","title":"Persona Anatomy","text":"<p>Each persona has distinct capabilities and responsibilities:</p> <pre><code>persona_identifier:\n  type: llm\n  name: Persona Display Name\n  description: Brief description of role\n  model: anthropic\n  instructions:\n    - |\n      Detailed behavioral instructions\n  sub_agents:\n    - other_persona\n  toolsets:\n    - tool1\n    - tool2\n</code></pre>"},{"location":"agents/overview/#required-properties","title":"Required Properties","text":""},{"location":"agents/overview/#name-string","title":"<code>name</code> (string)","text":"<p>Unique identifier within the agent scope.</p> <p>Naming conventions: - Use lowercase with underscores: <code>product_specialist</code> - Choose descriptive, role-based names - Keep under 30 characters - Must be unique within the agent</p>"},{"location":"agents/overview/#description-string","title":"<code>description</code> (string)","text":"<p>Concise summary of persona responsibilities.</p> <p>Guidelines: - Single sentence, under 100 characters - Focus on primary function - Use active voice</p>"},{"location":"agents/overview/#instructions-array","title":"<code>instructions</code> (array)","text":"<p>Defines persona behavior and operational guidelines.</p> <p>Best practices: - Start with role definition and scope - Specify business rules and constraints - Define output format expectations - Use conditional instructions for configurability</p>"},{"location":"agents/overview/#optional-properties","title":"Optional Properties","text":""},{"location":"agents/overview/#model-string","title":"<code>model</code> (string)","text":"<p>Specifies which LLM provider to use.</p> <p>Available models: - <code>\"anthropic\"</code> - Claude (best for analysis, writing, complex reasoning) - <code>\"gpt-4o\"</code> - OpenAI GPT-4 (general purpose, versatile)</p> <p>When to specify: - Optimize performance for specific task types - Manage costs (different models have different pricing) - Quality requirements (some models excel at certain tasks)</p>"},{"location":"agents/overview/#subagents-array-of-strings","title":"<code>subAgents</code> (array of strings)","text":"<p>Lists personas this persona can delegate to.</p> <p>Use for: - Coordinator personas managing workflows - Hierarchical task decomposition - Specialized routing based on request type</p>"},{"location":"agents/overview/#toolsets-array","title":"<code>toolsets</code> (array)","text":"<p>Defines external tool access.</p> <p>Common toolsets: - <code>duckduckgo</code> - Web search - <code>weather-tool</code> - Weather data - <code>memory-server</code> - Persistent storage - <code>notification-server</code> - Push notifications - <code>google-calendar</code> - Calendar integration</p>"},{"location":"agents/overview/#interactive-vs-non-interactive-agents","title":"Interactive vs Non-Interactive Agents","text":"<p>The <code>interactive</code> property controls agent persistence across messages.</p>"},{"location":"agents/overview/#interactive-mode-interactive-true","title":"Interactive Mode (<code>\"interactive\": true</code>)","text":"<p>Agent remains active after processing each message.</p> <p>Use cases: - Multi-turn conversations - Iterative work (editing, refinement) - Context-dependent tasks - Shopping sessions</p> <p>User experience: <pre><code>User: \"Create a blog post about AI\"\nAgent: [creates blog post]\n(Agent remains active)\nUser: \"Make it shorter\"\nAgent: [continues with same context]\n</code></pre></p> <p>Examples: - E-commerce shopping assistants - Content creation and editing - Research and analysis - Customer service conversations</p>"},{"location":"agents/overview/#non-interactive-mode-default","title":"Non-Interactive Mode (default)","text":"<p>Agent completes task and returns to switchboard.</p> <p>Use cases: - Quick queries - Single-transaction tasks - Automated workflows - Simple lookups</p> <p>User experience: <pre><code>User: \"What's the weather?\"\nAgent: [provides weather]\n(Returns to switchboard)\nUser: \"Thanks\"\nSwitchboard: [handles next request]\n</code></pre></p> <p>Examples: - Weather lookups - Currency conversion - Simple calculations - Quick fact retrieval</p>"},{"location":"agents/overview/#agent-lifecycle","title":"Agent Lifecycle","text":""},{"location":"agents/overview/#1-definition","title":"1. Definition","text":"<p>Agent is defined in JSON configuration file in <code>apps/api/src/agents/</code>.</p>"},{"location":"agents/overview/#2-loading","title":"2. Loading","text":"<p>System loads and validates agent configuration at startup.</p> <p>Validation checks: - Required fields present - JSON syntax correct - Settings properly configured - Toolsets available - Conditional expressions valid</p>"},{"location":"agents/overview/#3-registration","title":"3. Registration","text":"<p>Agent registers with switchboard for routing.</p> <p>Switchboard uses: - Agent <code>description</code> for routing decisions - Agent <code>id</code> for direct invocation - Agent <code>name</code> for user display</p>"},{"location":"agents/overview/#4-execution","title":"4. Execution","text":"<p>Agent processes user requests through active persona.</p> <p>Execution flow: 1. User sends message 2. Switchboard routes to appropriate agent (if needed) 3. Agent's active persona processes request 4. Persona executes instructions and uses tools 5. Persona may delegate to sub-personas 6. Response returned to user 7. Agent stays active (interactive) or returns to switchboard</p>"},{"location":"agents/overview/#5-switching","title":"5. Switching","text":"<p>Users can switch agents explicitly or via switchboard routing.</p> <p>Switching mechanisms: - Automatic: Switchboard routes based on request content - Explicit: User requests specific agent - Delegation: Persona uses <code>transfer_task</code> to delegate to sub-persona</p>"},{"location":"agents/overview/#switchboard-agent","title":"Switchboard Agent","text":"<p>The switchboard is a special system agent that coordinates all agent interactions.</p>"},{"location":"agents/overview/#responsibilities","title":"Responsibilities","text":"<ol> <li>Route Requests - Direct user messages to appropriate specialized agents</li> <li>Agent Discovery - Analyze available agents and their capabilities</li> <li>Context Management - Maintain conversation context during agent switches</li> <li>Fallback Handling - Handle requests when no specialized agent is appropriate</li> </ol>"},{"location":"agents/overview/#how-switchboard-routing-works","title":"How Switchboard Routing Works","text":"<p>The switchboard uses agent descriptions to make routing decisions:</p> <pre><code>version: \"1\"\nid: blog-team\nname: Blog Writing Team\ndescription: Coordinates research, writing, and editing for blog content creation\n</code></pre> <p>When a user says: \"I need help writing a blog post\"</p> <p>The switchboard: 1. Analyzes the user's request 2. Reviews available agent descriptions 3. Identifies best match based on capabilities 4. Routes request using <code>switch_agent</code> tool</p>"},{"location":"agents/overview/#user-experience","title":"User Experience","text":"<p>From the user perspective: <pre><code>User: \"I want to write a blog post about AI\"\n\u2192 Switchboard routes to Blog Writing Team\n\nUser: \"What's the weather like?\"\n\u2192 (If Blog Team is interactive and active)\n\u2192 Blog Team returns to switchboard\n\u2192 Switchboard routes to Weather Agent\n</code></pre></p>"},{"location":"agents/overview/#agent-best-practices","title":"Agent Best Practices","text":""},{"location":"agents/overview/#naming-conventions","title":"Naming Conventions","text":"<p>Agent IDs: - \u2705 <code>grocery-assistant</code>, <code>report-generator</code>, <code>customer-service</code> - \u274c <code>ga</code>, <code>rep</code>, <code>Grocery Assistant</code> (too short, spaces, capitals)</p> <p>Agent Names: - \u2705 <code>\"Grocery Shopping Assistant\"</code>, <code>\"Business Report Generator\"</code> - \u274c <code>\"GA\"</code>, <code>\"agent\"</code> (not descriptive)</p> <p>Persona Names: - \u2705 <code>product_specialist</code>, <code>data_analyst</code>, <code>content_writer</code> - \u274c <code>ps</code>, <code>analyst1</code>, <code>writer-agent</code> (too short, inconsistent)</p>"},{"location":"agents/overview/#description-writing","title":"Description Writing","text":"<p>Write clear, concise descriptions that help routing:</p> <p>Good descriptions: - \u2705 \"Assists customers with grocery shopping, product recommendations, and meal planning\" - \u2705 \"Routes customer support tickets to appropriate specialists based on issue type\" - \u2705 \"Generates business analytics reports with metrics and insights\"</p> <p>Poor descriptions: - \u274c \"Agent for grocery stuff\" - \u274c \"Helps users\" - \u274c \"\" (empty)</p>"},{"location":"agents/overview/#instruction-design","title":"Instruction Design","text":"<p>Create specific, actionable instructions:</p> <p>Good instructions: <pre><code>product_specialist:\n  instructions:\n    - |\n      You are a product specialist. Responsibilities:\n      - Search catalog for products matching customer needs\n      - Provide 3-5 recommendations with pricing and features\n      - Include alternatives at different price points\n      - Highlight products with 4+ star ratings\n\n      Format recommendations as numbered lists with clear rationale.\n</code></pre></p> <p>Poor instructions: <pre><code>product_specialist:\n  instructions:\n    - |\n      Help with products.\n</code></pre></p>"},{"location":"agents/overview/#tool-selection","title":"Tool Selection","text":"<p>Choose appropriate tools for each persona:</p> <ul> <li>Information gathering: <code>duckduckgo</code> for web search</li> <li>Data persistence: <code>memory-server</code> for storing user data</li> <li>Notifications: <code>notification-server</code> for alerts</li> <li>Calendar: <code>google-calendar</code> for scheduling</li> <li>Delegation: <code>transfer_task</code> automatically available to coordinators</li> </ul>"},{"location":"agents/overview/#common-patterns","title":"Common Patterns","text":""},{"location":"agents/overview/#coordinator-pattern","title":"Coordinator Pattern","text":"<p>One persona orchestrates workflow by delegating to specialists.</p> <pre><code>Coordinator\n\u251c\u2500\u2500 Specialist 1 (with tools)\n\u251c\u2500\u2500 Specialist 2 (with tools)\n\u2514\u2500\u2500 Specialist 3 (with tools)\n</code></pre>"},{"location":"agents/overview/#sequential-processing","title":"Sequential Processing","text":"<p>Tasks flow through defined sequence.</p> <pre><code>Request \u2192 Research \u2192 Write \u2192 Edit \u2192 Deliver\n</code></pre>"},{"location":"agents/overview/#parallel-specialists","title":"Parallel Specialists","text":"<p>Multiple specialists handle different aspects simultaneously.</p> <pre><code>              \u250c\u2500\u2500 Technical Support\nRequest \u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500 Billing Support\n              \u2514\u2500\u2500 Account Support\n</code></pre>"},{"location":"agents/overview/#hierarchical-delegation","title":"Hierarchical Delegation","text":"<p>Multi-level coordination for complex workflows.</p> <pre><code>Project Manager\n\u251c\u2500\u2500 Research Team\n\u2502   \u251c\u2500\u2500 Web Researcher\n\u2502   \u2514\u2500\u2500 Data Analyst\n\u2514\u2500\u2500 Writing Team\n    \u251c\u2500\u2500 Writer\n    \u2514\u2500\u2500 Editor\n</code></pre>"},{"location":"agents/overview/#next-steps","title":"Next Steps","text":"<p>Now that you understand agent architecture:</p> <ul> <li>Creating Agents - Step-by-step creation guide</li> <li>Configuration Reference - Complete configuration options</li> <li>Examples - Real-world agent templates</li> <li>Tools Overview - Learn about available tools</li> </ul> <p>Related: Getting Started | Configuration Reference | Multi-Persona Workflows</p>"},{"location":"reference/api/","title":"API Reference","text":"<p>REST API endpoints for the MyAgents platform.</p>"},{"location":"reference/api/#base-url","title":"Base URL","text":"<pre><code>https://api.myagents.example.com\n</code></pre> <p>Development: <pre><code>http://localhost:3000\n</code></pre></p>"},{"location":"reference/api/#authentication","title":"Authentication","text":"<p>All API requests require authentication via Bearer token.</p>"},{"location":"reference/api/#headers","title":"Headers","text":"<pre><code>Authorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\n</code></pre>"},{"location":"reference/api/#getting-access-tokens","title":"Getting Access Tokens","text":"<p>See Authentication Endpoints below.</p>"},{"location":"reference/api/#authentication_1","title":"Authentication","text":""},{"location":"reference/api/#register","title":"Register","text":"<p>Create a new user account.</p> <pre><code>POST /auth/register\n</code></pre> <p>Request Body: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword123\",\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\"\n}\n</code></pre></p> <p>Response: <code>201 Created</code> <pre><code>{\n  \"accessToken\": \"eyJhbGc...\",\n  \"refreshToken\": \"eyJhbGc...\",\n  \"user\": {\n    \"id\": \"user-id\",\n    \"email\": \"user@example.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\"\n  }\n}\n</code></pre></p>"},{"location":"reference/api/#login","title":"Login","text":"<p>Authenticate and receive tokens.</p> <pre><code>POST /auth/login\n</code></pre> <p>Request Body: <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"securepassword123\"\n}\n</code></pre></p> <p>Response: <code>200 OK</code> <pre><code>{\n  \"accessToken\": \"eyJhbGc...\",\n  \"refreshToken\": \"eyJhbGc...\",\n  \"user\": {\n    \"id\": \"user-id\",\n    \"email\": \"user@example.com\"\n  }\n}\n</code></pre></p>"},{"location":"reference/api/#refresh-token","title":"Refresh Token","text":"<p>Get new access token using refresh token.</p> <pre><code>POST /auth/refresh\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;refresh_token&gt;\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"refreshToken\": \"eyJhbGc...\"\n}\n</code></pre></p> <p>Response: <code>200 OK</code> <pre><code>{\n  \"accessToken\": \"eyJhbGc...\",\n  \"refreshToken\": \"eyJhbGc...\"\n}\n</code></pre></p>"},{"location":"reference/api/#logout","title":"Logout","text":"<p>Invalidate tokens.</p> <pre><code>POST /auth/logout\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"refreshToken\": \"eyJhbGc...\"\n}\n</code></pre></p> <p>Response: <code>200 OK</code> <pre><code>{\n  \"message\": \"Logged out successfully\"\n}\n</code></pre></p>"},{"location":"reference/api/#chat","title":"Chat","text":""},{"location":"reference/api/#send-message","title":"Send Message","text":"<p>Send a message to an agent.</p> <pre><code>POST /chat/messages\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"message\": \"Hello, I need help with something\",\n  \"sessionId\": \"optional-session-id\",\n  \"agentId\": \"optional-agent-id\"\n}\n</code></pre></p> <p>Response: <code>200 OK</code> <pre><code>{\n  \"id\": \"message-id\",\n  \"sessionId\": \"session-id\",\n  \"message\": \"Hello, I need help with something\",\n  \"response\": \"Hello! I'm here to help. What do you need assistance with?\",\n  \"agentId\": \"switchboard\",\n  \"timestamp\": \"2025-10-25T10:30:00Z\"\n}\n</code></pre></p>"},{"location":"reference/api/#stream-message","title":"Stream Message","text":"<p>Stream agent response in real-time.</p> <pre><code>POST /chat/stream\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\nAccept: text/event-stream\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"message\": \"Write a story about AI\",\n  \"sessionId\": \"optional-session-id\"\n}\n</code></pre></p> <p>Response: <code>200 OK</code> <pre><code>Content-Type: text/event-stream\n\ndata: {\"type\":\"start\",\"sessionId\":\"session-123\"}\n\ndata: {\"type\":\"chunk\",\"content\":\"Once upon\"}\n\ndata: {\"type\":\"chunk\",\"content\":\" a time\"}\n\ndata: {\"type\":\"chunk\",\"content\":\" there was\"}\n\ndata: {\"type\":\"end\",\"messageId\":\"msg-123\"}\n</code></pre></p>"},{"location":"reference/api/#get-chat-history","title":"Get Chat History","text":"<p>Retrieve conversation history.</p> <pre><code>GET /chat/history?sessionId={sessionId}&amp;limit={limit}\n</code></pre> <p>Parameters:</p> Parameter Type Required Description sessionId string Yes Session identifier limit number No Max messages (default: 50) <p>Response: <code>200 OK</code> <pre><code>{\n  \"messages\": [\n    {\n      \"id\": \"msg-1\",\n      \"role\": \"user\",\n      \"content\": \"Hello\",\n      \"timestamp\": \"2025-10-25T10:00:00Z\"\n    },\n    {\n      \"id\": \"msg-2\",\n      \"role\": \"assistant\",\n      \"content\": \"Hi! How can I help?\",\n      \"timestamp\": \"2025-10-25T10:00:01Z\"\n    }\n  ],\n  \"sessionId\": \"session-123\",\n  \"total\": 2\n}\n</code></pre></p>"},{"location":"reference/api/#agents","title":"Agents","text":""},{"location":"reference/api/#list-agents","title":"List Agents","text":"<p>Get all available agents.</p> <pre><code>GET /agents\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre></p> <p>Response: <code>200 OK</code> <pre><code>{\n  \"agents\": [\n    {\n      \"id\": \"switchboard\",\n      \"name\": \"Switchboard\",\n      \"description\": \"Routes requests to appropriate agents\",\n      \"interactive\": true\n    },\n    {\n      \"id\": \"blog-team\",\n      \"name\": \"Blog Writing Team\",\n      \"description\": \"Creates blog content through research and writing\",\n      \"interactive\": true\n    }\n  ]\n}\n</code></pre></p>"},{"location":"reference/api/#get-agent-details","title":"Get Agent Details","text":"<p>Get detailed information about a specific agent.</p> <pre><code>GET /agents/{agentId}\n</code></pre> <p>Parameters:</p> Parameter Type Required Description agentId string Yes Agent identifier <p>Response: <code>200 OK</code> <pre><code>{\n  \"id\": \"blog-team\",\n  \"name\": \"Blog Writing Team\",\n  \"description\": \"Creates blog content\",\n  \"interactive\": true,\n  \"settings\": [\n    {\n      \"name\": \"contentLength\",\n      \"title\": \"Content Length\",\n      \"type\": \"string\",\n      \"description\": \"Target length (short, medium, long)\",\n      \"defaultValue\": \"medium\"\n    }\n  ],\n  \"personas\": [\"coordinator\", \"researcher\", \"writer\", \"editor\"]\n}\n</code></pre></p>"},{"location":"reference/api/#memory","title":"Memory","text":""},{"location":"reference/api/#create-memory","title":"Create Memory","text":"<p>Store information for later retrieval.</p> <pre><code>POST /memory\n</code></pre> <p>Headers: <pre><code>Authorization: Bearer &lt;access_token&gt;\nContent-Type: application/json\n</code></pre></p> <p>Request Body: <pre><code>{\n  \"content\": \"User prefers organic products\",\n  \"category\": \"preferences\",\n  \"agentId\": \"shopping-assistant\"\n}\n</code></pre></p> <p>Response: <code>201 Created</code> <pre><code>{\n  \"id\": \"memory-id\",\n  \"userId\": \"user-id\",\n  \"agentId\": \"shopping-assistant\",\n  \"content\": \"User prefers organic products\",\n  \"category\": \"preferences\",\n  \"createdAt\": \"2025-10-25T10:30:00Z\"\n}\n</code></pre></p>"},{"location":"reference/api/#list-memories","title":"List Memories","text":"<p>Retrieve stored memories.</p> <pre><code>GET /memory?category={category}&amp;agentId={agentId}&amp;limit={limit}\n</code></pre> <p>Parameters:</p> Parameter Type Required Description category string No Filter by category agentId string No Filter by agent limit number No Max results (default: 50) <p>Response: <code>200 OK</code> <pre><code>{\n  \"memories\": [\n    {\n      \"id\": \"memory-1\",\n      \"content\": \"User prefers organic products\",\n      \"category\": \"preferences\",\n      \"agentId\": \"shopping-assistant\",\n      \"createdAt\": \"2025-10-25T10:00:00Z\"\n    }\n  ],\n  \"total\": 1\n}\n</code></pre></p>"},{"location":"reference/api/#delete-memory","title":"Delete Memory","text":"<p>Remove a stored memory.</p> <pre><code>DELETE /memory/{memoryId}\n</code></pre> <p>Parameters:</p> Parameter Type Required Description memoryId string Yes Memory identifier <p>Response: <code>200 OK</code> <pre><code>{\n  \"message\": \"Memory deleted successfully\"\n}\n</code></pre></p>"},{"location":"reference/api/#health","title":"Health","text":""},{"location":"reference/api/#health-check","title":"Health Check","text":"<p>Check API status.</p> <pre><code>GET /health\n</code></pre> <p>Response: <code>200 OK</code> <pre><code>{\n  \"status\": \"ok\",\n  \"timestamp\": \"2025-10-25T10:30:00Z\",\n  \"services\": {\n    \"database\": \"ok\",\n    \"mcpRegistry\": \"ok\"\n  }\n}\n</code></pre></p>"},{"location":"reference/api/#error-responses","title":"Error Responses","text":""},{"location":"reference/api/#error-format","title":"Error Format","text":"<p>All errors follow this format:</p> <pre><code>{\n  \"message\": \"Error description\",\n  \"error\": \"ErrorType\",\n  \"statusCode\": 400\n}\n</code></pre>"},{"location":"reference/api/#status-codes","title":"Status Codes","text":"Code Meaning Description 200 OK Request successful 201 Created Resource created 400 Bad Request Invalid request data 401 Unauthorized Missing or invalid auth 403 Forbidden Insufficient permissions 404 Not Found Resource not found 500 Internal Server Error Server error"},{"location":"reference/api/#common-errors","title":"Common Errors","text":"<p>401 Unauthorized <pre><code>{\n  \"message\": \"Authentication required\",\n  \"error\": \"Unauthorized\",\n  \"statusCode\": 401\n}\n</code></pre></p> <p>400 Bad Request <pre><code>{\n  \"message\": \"Invalid request body\",\n  \"error\": \"ValidationError\",\n  \"statusCode\": 400\n}\n</code></pre></p> <p>404 Not Found <pre><code>{\n  \"message\": \"Agent not found\",\n  \"error\": \"NotFound\",\n  \"statusCode\": 404\n}\n</code></pre></p>"},{"location":"reference/api/#rate-limiting","title":"Rate Limiting","text":""},{"location":"reference/api/#limits","title":"Limits","text":"<ul> <li>Anonymous: 100 requests/hour</li> <li>Authenticated: 1000 requests/hour</li> <li>Premium: 10,000 requests/hour</li> </ul>"},{"location":"reference/api/#headers_1","title":"Headers","text":"<pre><code>X-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1635264000\n</code></pre>"},{"location":"reference/api/#rate-limit-exceeded","title":"Rate Limit Exceeded","text":"<p>Response: <code>429 Too Many Requests</code> <pre><code>{\n  \"message\": \"Rate limit exceeded\",\n  \"error\": \"RateLimitExceeded\",\n  \"statusCode\": 429,\n  \"retryAfter\": 3600\n}\n</code></pre></p>"},{"location":"reference/api/#sdk-usage","title":"SDK Usage","text":"<p>The MyAgents platform provides a TypeScript SDK for easier integration.</p>"},{"location":"reference/api/#installation","title":"Installation","text":"<pre><code>npm install @myagents/api-client\n</code></pre>"},{"location":"reference/api/#usage","title":"Usage","text":"<pre><code>import { getAuthenticatedApiClient, sendMessage } from '@myagents/api-client';\n\n// Get authenticated client\nconst client = getAuthenticatedApiClient();\n\n// Send message\nconst response = await sendMessage({\n  client: client.getClient(),\n  body: {\n    message: \"Hello, agent!\",\n    sessionId: \"my-session\"\n  }\n});\n\nconsole.log(response.data.response);\n</code></pre>"},{"location":"reference/api/#benefits","title":"Benefits","text":"<ul> <li>\u2705 TypeScript type safety</li> <li>\u2705 Automatic authentication</li> <li>\u2705 Error handling</li> <li>\u2705 Request/response validation</li> </ul>"},{"location":"reference/api/#pagination","title":"Pagination","text":""},{"location":"reference/api/#request-parameters","title":"Request Parameters","text":"<pre><code>GET /resource?page=1&amp;limit=20\n</code></pre> Parameter Type Default Description page number 1 Page number limit number 20 Items per page"},{"location":"reference/api/#response-format","title":"Response Format","text":"<pre><code>{\n  \"items\": [...],\n  \"pagination\": {\n    \"page\": 1,\n    \"limit\": 20,\n    \"total\": 100,\n    \"totalPages\": 5,\n    \"hasMore\": true\n  }\n}\n</code></pre>"},{"location":"reference/api/#webhook-events","title":"Webhook Events","text":""},{"location":"reference/api/#event-types","title":"Event Types","text":"<ul> <li><code>message.sent</code> - Message sent to agent</li> <li><code>message.received</code> - Response received from agent</li> <li><code>session.created</code> - New chat session</li> <li><code>agent.switched</code> - Agent changed</li> </ul>"},{"location":"reference/api/#webhook-format","title":"Webhook Format","text":"<pre><code>{\n  \"event\": \"message.received\",\n  \"timestamp\": \"2025-10-25T10:30:00Z\",\n  \"data\": {\n    \"sessionId\": \"session-123\",\n    \"messageId\": \"msg-456\",\n    \"content\": \"Agent response...\"\n  }\n}\n</code></pre>"},{"location":"reference/api/#next-steps","title":"Next Steps","text":"<ul> <li>JSON Schema - Complete schema reference</li> <li>Creating Agents - Build custom agents</li> <li>Tools - Explore available tools</li> </ul> <p>Related: Schema Reference | Authentication Guide | SDK Documentation</p>"},{"location":"reference/schema/","title":"Team Configuration Schema","text":"<p>Complete technical schema reference for agent team YAML files.</p>"},{"location":"reference/schema/#quick-reference","title":"Quick Reference","text":"<pre><code>version: \"1\"                          # Required: Schema version\nid: team-id                           # Required: Unique team identifier\nname: Team Name                       # Required: Display name\ndescription: Team description         # Required: Routing description\ninteractive: false                    # Optional: Persistence mode\ndefault_agent: agent_name             # Required: Entry point agent\n\nsettings:                             # Optional: User settings\n  - name: setting_name                # Required: Setting identifier\n    type: bool | string | number      # Required: Data type (use \"bool\" not \"boolean\")\n    title: Display Label              # Required: UI label\n    description: Setting description   # Required: Help text\n    defaultValue: value               # Required: Default value\n\nagents:                               # Required: Agent definitions\n  agent_name:                         # Required: Agent identifier\n    type: llm | parallel | loop | sequence  # Optional: Agent type (default: llm)\n    name: Display Name                # Required: Display name (for agents map key)\n    description: Agent description    # Required: Agent role\n    model: anthropic | gpt-4o         # Optional: LLM provider\n    max_iterations: N                 # Required for loop type: 1-10\n    instructions:                     # Required: Behavior instructions\n      - \"condition\": Instructions     # Optional: Conditional instructions\n      - \"\": Default instructions      # Required: Default fallback\n    sub_agents: [...]                 # Optional: Delegatable agents\n    toolsets: [...]                   # Optional: Available tools (llm only)\n</code></pre>"},{"location":"reference/schema/#team-level-schema","title":"Team-Level Schema","text":""},{"location":"reference/schema/#version","title":"version","text":"<p>Type: <code>string</code> Required: Yes Valid Values: <code>\"1\"</code></p> <p>Schema version for forward compatibility.</p> <pre><code>version: \"1\"\n</code></pre>"},{"location":"reference/schema/#id","title":"id","text":"<p>Type: <code>string</code> Required: Yes Pattern: <code>^[a-z][a-z0-9-]{2,49}$</code> Length: 3-50 characters</p> <p>Unique identifier for the team.</p> <p>Rules: - Must start with lowercase letter - Can contain: lowercase letters, numbers, hyphens - No uppercase, no spaces, no underscores - Must be unique across all teams</p> <p>Examples: <pre><code># Valid\nid: weather-team\nid: customer-support\nid: blog-writer-v2\n\n# Invalid\nid: Weather-Team    # No uppercase\nid: wt              # Too short\nid: weather_team    # No underscores\n</code></pre></p>"},{"location":"reference/schema/#name","title":"name","text":"<p>Type: <code>string</code> Required: Yes Length: 5-100 characters</p> <p>User-facing display name.</p> <p>Rules: - Can include spaces and special characters - Used in UI and chat interface - Should be descriptive and user-friendly</p> <p>Examples: <pre><code>name: Weather Assistant\nname: Customer Support Team\nname: Blog Writing &amp; Editing\n</code></pre></p>"},{"location":"reference/schema/#description","title":"description","text":"<p>Type: <code>string</code> Required: Yes Length: 20-500 characters</p> <p>Brief summary of team capabilities used by switchboard for routing.</p> <p>Rules: - Describe what problems the team solves - Use action-oriented language - Focus on user benefits - Critical for routing decisions</p> <p>Examples: <pre><code>description: Provides current weather conditions, forecasts, and severe weather alerts for any location worldwide\n\ndescription: Routes customer support inquiries to specialized agents handling technical issues, billing questions, and account management\n</code></pre></p>"},{"location":"reference/schema/#default_agent","title":"default_agent","text":"<p>Type: <code>string</code> Required: Yes</p> <p>Name of the entry-point agent. Must match an agent name in the <code>agents</code> section.</p> <p>Rules: - Must be valid agent key from <code>agents</code> map - Case-sensitive - This agent receives initial user requests</p> <p>Example: <pre><code>default_agent: coordinator\n\nagents:\n  coordinator:    # Must match\n    # Configuration...\n</code></pre></p>"},{"location":"reference/schema/#interactive","title":"interactive","text":"<p>Type: <code>boolean</code> Required: No Default: <code>false</code></p> <p>Controls whether team persists after processing messages.</p> <p>Values: - <code>true</code>: Team remains active for multi-turn conversations - <code>false</code>: Team returns to switchboard after each response</p> <p>Example: <pre><code># Persistent team for shopping experience\ninteractive: true\n\n# One-shot team for quick lookup\ninteractive: false\n</code></pre></p>"},{"location":"reference/schema/#settings","title":"settings","text":"<p>Type: <code>array</code> of setting objects Required: No</p> <p>Runtime configuration options accessible via conditional instructions.</p> <p>Setting Object Schema:</p> <pre><code>settings:\n  - name: string                      # Required: Unique identifier\n    type: bool | string | number      # Required: Data type (use \"bool\" not \"boolean\")\n    title: string                     # Required: UI display label\n    description: string               # Required: Help text\n    defaultValue: value               # Required: Must match type\n</code></pre> <p>Setting Properties:</p> Property Type Required Description <code>name</code> string Yes Unique setting identifier (camelCase or snake_case) <code>type</code> enum Yes Data type: <code>\"boolean\"</code>, <code>\"string\"</code>, or <code>\"number\"</code> <code>title</code> string Yes User-facing display name <code>description</code> string Yes Explanation of what setting controls <code>defaultValue</code> varies Yes Default value matching specified type <p>Examples:</p> <p>Boolean setting: <pre><code>settings:\n  - name: verbose_mode\n    type: bool\n    title: Verbose Output\n    description: Include detailed explanations in responses\n    defaultValue: false\n</code></pre></p> <p>String setting: <pre><code>settings:\n  - name: output_format\n    type: string\n    title: Output Format\n    description: Format for generated content\n    defaultValue: markdown\n</code></pre></p> <p>Number setting: <pre><code>settings:\n  - name: max_results\n    type: number\n    title: Maximum Results\n    description: Number of results to return\n    defaultValue: 10\n</code></pre></p>"},{"location":"reference/schema/#agents","title":"agents","text":"<p>Type: <code>object</code> (map of agent name to agent configuration) Required: Yes</p> <p>Defines all agents in the team.</p> <p>Rules: - Must contain at least one agent - Agent keys must be unique - <code>default_agent</code> must reference one of these agents</p> <p>Example: <pre><code>agents:\n  coordinator:\n    # Agent configuration\n\n  specialist_1:\n    # Agent configuration\n\n  specialist_2:\n    # Agent configuration\n</code></pre></p>"},{"location":"reference/schema/#agent-level-schema","title":"Agent-Level Schema","text":""},{"location":"reference/schema/#type","title":"type","text":"<p>Type: <code>string</code> Required: No Default: <code>\"llm\"</code> Valid Values: <code>\"llm\"</code>, <code>\"parallel\"</code>, <code>\"loop\"</code>, <code>\"sequence\"</code></p> <p>Specifies agent execution pattern.</p> <p>Type Descriptions:</p> Type Description Requirements <code>llm</code> Standard interactive agent None <code>parallel</code> Concurrent execution of sub-agents Requires 2+ sub_agents <code>loop</code> Iterative refinement Requires exactly 1 sub_agent + max_iterations <code>sequence</code> Sequential pipeline Requires 2+ sub_agents <p>Examples: <pre><code># LLM agent (default)\nagent1:\n  type: llm\n\n# Parallel agent\nagent2:\n  type: parallel\n  sub_agents: [a, b, c]\n\n# Loop agent\nagent3:\n  type: loop\n  max_iterations: 3\n  sub_agents: [refiner]\n\n# Sequence agent\nagent4:\n  type: sequence\n  sub_agents: [stage1, stage2, stage3]\n</code></pre></p>"},{"location":"reference/schema/#name_1","title":"name","text":"<p>Type: <code>string</code> Required: Yes Pattern: <code>^[a-z][a-z0-9_]{2,49}$</code> Length: 3-50 characters</p> <p>Unique identifier for the agent within team scope.</p> <p>Rules: - Must start with lowercase letter - Can contain: lowercase letters, numbers, underscores - Use snake_case convention - Must be unique within team</p> <p>Examples: <pre><code># Valid\nproduct_specialist\ntechnical_support\ncontent_writer\n\n# Invalid\nProductSpecialist    # No camelCase\nps                   # Too short\nagent-1              # No hyphens\n</code></pre></p>"},{"location":"reference/schema/#description_1","title":"description","text":"<p>Type: <code>string</code> Required: Yes Length: 10-200 characters</p> <p>Brief summary of agent's role and responsibilities.</p> <p>Rules: - One sentence preferred - Focus on primary responsibility - Use active voice</p> <p>Examples: <pre><code>description: Conducts web research and gathers authoritative sources\n\ndescription: Creates engaging, SEO-optimized blog content\n\ndescription: Routes support tickets to appropriate specialists\n</code></pre></p>"},{"location":"reference/schema/#model","title":"model","text":"<p>Type: <code>string</code> Required: No Valid Values: <code>\"anthropic\"</code>, <code>\"gpt-4o\"</code></p> <p>Specifies which LLM provider to use for this agent.</p> <p>Models: - <code>anthropic</code>: Claude models (good for writing, analysis) - <code>gpt-4o</code>: GPT-4 models (general purpose)</p> <p>Example: <pre><code>analyst:\n  model: anthropic\n\nwriter:\n  model: gpt-4o\n</code></pre></p>"},{"location":"reference/schema/#max_iterations","title":"max_iterations","text":"<p>Type: <code>number</code> Required: Yes (for <code>loop</code> agents only) Valid Range: 1-10</p> <p>Number of iterations for loop-type agents.</p> <p>Rules: - Required if <code>type: loop</code> - Must be between 1 and 10 - Each iteration is a full agent execution</p> <p>Example: <pre><code>refiner:\n  type: loop\n  max_iterations: 3\n  sub_agents: [content_improver]\n</code></pre></p>"},{"location":"reference/schema/#instructions","title":"instructions","text":"<p>Type: <code>array</code> of instruction objects Required: Yes</p> <p>Defines agent behavior through conditional and default instructions.</p> <p>Instruction Object Schema:</p> <pre><code>instructions:\n  - \"condition\": |\n      Instructions when condition evaluates to true\n  - |\n    Default instructions (no condition)\n</code></pre> <p>Rules: - Must have at least one plain string instruction (no <code>if</code> condition) as default - Instructions evaluated in order from top to bottom - All matching conditions are included and concatenated - Use <code>|</code> for multiline strings</p> <p>Condition Syntax:</p> <p>Boolean checks: <pre><code>- \"settings.verbose\": Instructions when true\n- \"!settings.verbose\": Instructions when false\n</code></pre></p> <p>Equality: <pre><code>- \"settings.format == 'json'\": Instructions for JSON\n- \"settings.format != 'json'\": Instructions for non-JSON\n</code></pre></p> <p>Comparisons: <pre><code>- \"settings.max_results &gt; 20\": Instructions for large result sets\n- \"settings.price_limit &lt;= 50\": Instructions for budget searches\n</code></pre></p> <p>Logical operators: <pre><code>- \"settings.expert &amp;&amp; settings.verbose\": AND condition\n- \"settings.format == 'markdown' || settings.format == 'html'\": OR condition\n- \"(settings.a || settings.b) &amp;&amp; !settings.c\": Complex logic\n</code></pre></p> <p>Examples:</p> <p>Simple: <pre><code>instructions:\n  - |\n      You are a helpful assistant. Provide clear, accurate responses.\n</code></pre></p> <p>Conditional: <pre><code>instructions:\n  - if: \"settings.expert_mode\"\n    content: |\n      Expert mode: Provide technical details and advanced concepts.\n\n  - |\n      Standard mode: Use accessible language and explain clearly.\n</code></pre></p> <p>Multiple conditions (use separate blocks): <pre><code># Note: &amp;&amp; operator is NOT supported, use separate conditionals\ninstructions:\n  - if: \"settings.mode == \\\"expert\\\"\"\n    content: |\n      Expert: Technical focus\n\n  - if: \"settings.verbose\"\n    content: |\n      Verbose: Detailed explanations\n\n  - |\n      Standard: Balanced responses\n</code></pre></p>"},{"location":"reference/schema/#sub_agents","title":"sub_agents","text":"<p>Type: <code>array</code> of strings Required: Depends on agent type</p> <p>Lists agents this agent can delegate to or execute.</p> <p>Requirements by Type:</p> Agent Type sub_agents Required Count Constraint <code>llm</code> No Any number (0+) <code>parallel</code> Yes 2 or more <code>loop</code> Yes Exactly 1 <code>sequence</code> Yes 2 or more <p>Rules: - All referenced agent names must exist in team's <code>agents</code> section - No circular references - Agent names are case-sensitive</p> <p>Examples:</p> <p>LLM agent (optional): <pre><code>coordinator:\n  type: llm\n  sub_agents:\n    - specialist_1\n    - specialist_2\n    - specialist_3\n</code></pre></p> <p>Note: When an LLM agent has <code>sub_agents</code> defined, the system automatically appends the <code>&lt;SubAgents /&gt;</code> data tag to the agent's instructions at runtime. This tag expands to include detailed information about each sub-agent (name, description, and instruction preview), helping the coordinator make informed delegation decisions. You don't need to manually include this tag unless you want to customize its placement in your instructions.</p> <p>Parallel agent (required, 2+): <pre><code>multi_analyzer:\n  type: parallel\n  sub_agents:\n    - perspective_1\n    - perspective_2\n    - perspective_3\n</code></pre></p> <p>Loop agent (required, exactly 1): <pre><code>refiner:\n  type: loop\n  max_iterations: 3\n  sub_agents:\n    - content_improver\n</code></pre></p> <p>Sequence agent (required, 2+): <pre><code>pipeline:\n  type: sequence\n  sub_agents:\n    - stage_1\n    - stage_2\n    - stage_3\n</code></pre></p>"},{"location":"reference/schema/#toolsets","title":"toolsets","text":"<p>Type: <code>array</code> of strings Required: No Supported by: <code>llm</code> agent type only</p> <p>Lists external tool integrations available to this agent.</p> <p>Rules: - Only LLM agents can have tools directly - Parallel/Loop/Sequence agents cannot have tools (but their sub-agents can) - All toolset names must be registered with system</p> <p>Common toolsets: - <code>duckduckgo</code> - Web search - <code>memory-server</code> - Data persistence - <code>notification-server</code> - Push notifications - <code>weather-tool</code> - Weather data - <code>google-calendar</code> - Calendar integration</p> <p>Examples:</p> <p>Single tool: <pre><code>weather_agent:\n  type: llm\n  toolsets:\n    - weather-tool\n</code></pre></p> <p>Multiple tools: <pre><code>researcher:\n  type: llm\n  toolsets:\n    - duckduckgo\n    - memory-server\n</code></pre></p> <p>Not supported: <pre><code>parallel_agent:\n  type: parallel\n  toolsets:    # \u274c Error: parallel agents cannot have tools\n    - duckduckgo\n</code></pre></p> <p>Correct approach: <pre><code>parallel_agent:\n  type: parallel\n  sub_agents:\n    - researcher_1\n    - researcher_2\n\nresearcher_1:\n  type: llm\n  toolsets:    # \u2705 Correct: sub-agent has tools\n    - duckduckgo\n</code></pre></p>"},{"location":"reference/schema/#validation-rules","title":"Validation Rules","text":""},{"location":"reference/schema/#team-level-validation","title":"Team-Level Validation","text":"Rule Description Required fields <code>version</code>, <code>id</code>, <code>name</code>, <code>description</code>, <code>default_agent</code>, <code>agents</code> must be present Unique ID <code>id</code> must be unique across all teams Default agent exists <code>default_agent</code> must match an agent key in <code>agents</code> At least one agent <code>agents</code> must contain at least one agent Unique setting keys All setting <code>key</code> values must be unique Setting types <code>default_value</code> must match setting <code>type</code> Allowed values If present, <code>default_value</code> must be in <code>allowed_values</code>"},{"location":"reference/schema/#agent-level-validation","title":"Agent-Level Validation","text":"Rule Description Required fields <code>name</code>, <code>description</code>, <code>instructions</code> must be present Unique names Agent names must be unique within team Sub-agent references All <code>sub_agents</code> must reference existing agents Type constraints Parallel (2+ sub-agents), Loop (1 sub-agent + max_iterations), Sequence (2+ sub-agents) Max iterations range Must be 1-10 for loop agents Toolset availability All <code>toolsets</code> must be registered Tool restrictions Only LLM agents can have <code>toolsets</code> No circular refs Agents cannot form circular delegation chains"},{"location":"reference/schema/#instruction-validation","title":"Instruction Validation","text":"Rule Description Default required Must have at least one instruction with <code>\"\"</code> condition Valid conditions Conditions must be valid expressions Setting references Settings in conditions must exist in team <code>settings</code> Non-empty content Instruction text cannot be empty"},{"location":"reference/schema/#complete-example","title":"Complete Example","text":"<pre><code>version: \"1\"\nid: support-team\nname: Customer Support Team\ndescription: Routes customer support inquiries to specialized agents for technical, billing, and account assistance\ninteractive: true\ndefault_agent: coordinator\n\nsettings:\n  - name: priority_mode\n    type: bool\n    title: Priority Mode\n    description: Fast-track urgent requests\n    defaultValue: false\n\n  - name: response_style\n    type: string\n    title: Response Style\n    description: Communication tone\n    allowed_values:\n      - professional\n      - friendly\n      - casual\n    defaultValue: friendly\n\nagents:\n  coordinator:\n    type: llm\n    name: Support Coordinator\n    description: Routes tickets to appropriate specialists\n    model: gpt-4o\n    instructions:\n      - if: \"settings.priority_mode\"\n        content: |\n          PRIORITY MODE ACTIVE\n          - Respond immediately\n          - Escalate if needed\n          - Follow up within 1 hour\n\n      - |\n          Analyze inquiry and route:\n          - Technical issues \u2192 transfer_task to technical_support\n          - Billing questions \u2192 transfer_task to billing_support\n          - Account problems \u2192 transfer_task to account_support\n    sub_agents:\n      - technical_support\n      - billing_support\n      - account_support\n    toolsets:\n      - memory-server\n\n  technical_support:\n    type: llm\n    name: Technical Support Specialist\n    description: Handles technical issues and bugs\n    model: gpt-4o\n    instructions:\n      - if: \"settings.response_style == 'professional'\"\n        content: |\n          Professional tone:\n          - Formal language\n          - \"Thank you for contacting technical support\"\n          - \"I will assist you with this technical issue\"\n\n      - if: \"settings.response_style == 'friendly'\"\n        content: |\n          Friendly tone:\n          - Warm and approachable\n          - \"Hi! I'm happy to help with that technical issue\"\n          - \"Let me help you get this resolved\"\n\n      - if: \"settings.response_style == 'casual'\"\n        content: |\n          Casual tone:\n          - Relaxed and conversational\n          - \"Hey! Let's figure out what's going on\"\n          - \"No worries, we'll get this fixed\"\n\n      - |\n          Provide technical assistance:\n          - Diagnose problems systematically\n          - Offer step-by-step solutions\n          - Link to documentation\n          - Escalate complex issues\n    toolsets:\n      - memory-server\n\n  billing_support:\n    type: llm\n    name: Billing Support Specialist\n    description: Handles billing and payment inquiries\n    instructions:\n      - |\n          Address billing questions:\n          - Explain charges and invoices\n          - Process refund requests\n          - Update payment methods\n          - Resolve billing disputes\n\n          Always verify account ownership first.\n    toolsets:\n      - memory-server\n\n  account_support:\n    type: llm\n    name: Account Support Specialist\n    description: Handles account management and security\n    instructions:\n      - |\n          Assist with account issues:\n          - Reset passwords\n          - Update profile information\n          - Configure security settings\n          - Handle account deletion requests\n\n          Security-first: verify identity before changes.\n    toolsets:\n      - memory-server\n</code></pre>"},{"location":"reference/schema/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration Reference - Detailed property documentation</li> <li>Agent Examples - Real-world templates</li> <li>Creating Teams - Step-by-step guide</li> <li>Settings - Runtime configuration</li> <li>Conditional Instructions - Dynamic behavior</li> </ul> <p>Related: Configuration | Creating Teams | Agent Types</p>"},{"location":"tools/available-tools/","title":"Available Tools","text":"<p>Complete catalog of tools available for agent integration.</p>"},{"location":"tools/available-tools/#core-tools","title":"Core Tools","text":""},{"location":"tools/available-tools/#duckduckgo-search","title":"DuckDuckGo Search","text":"<p>Toolset ID: <code>duckduckgo</code> Category: Information Gathering Authentication: None required</p> <p>Web search capabilities for finding current information.</p>"},{"location":"tools/available-tools/#capabilities","title":"Capabilities","text":"<ul> <li>\ud83d\udd0d General web search</li> <li>\ud83d\udcf0 Recent news and articles</li> <li>\ud83d\udcda Reference information</li> <li>\ud83c\udfaf Targeted queries</li> <li>\ud83c\udf10 Multi-language support</li> </ul>"},{"location":"tools/available-tools/#configuration","title":"Configuration","text":"<pre><code>agents:\n  researcher:\n    toolsets:\n      - duckduckgo\n    instructions:\n      - |\n          Use duckduckgo to search for current information.\n          Synthesize results from multiple sources.\n          Always cite sources when presenting findings.\n</code></pre>"},{"location":"tools/available-tools/#usage-examples","title":"Usage Examples","text":"<p>Research Assistant: <pre><code>research_agent:\n  toolsets:\n    - duckduckgo\n  instructions:\n    - |\n        Research workflow:\n        1. Search duckduckgo for topic\n        2. Review top 5-10 results\n        3. Cross-reference facts\n        4. Identify authoritative sources\n        5. Present synthesized findings with citations\n</code></pre></p> <p>Fact Checker: <pre><code>fact_checker:\n  toolsets:\n    - duckduckgo\n  instructions:\n    - |\n        Fact checking:\n        1. Search for claim using duckduckgo\n        2. Find multiple independent sources\n        3. Assess source credibility\n        4. Report: Confirmed / Disputed / Unverified\n</code></pre></p> <p>News Researcher: <pre><code>news_researcher:\n  toolsets:\n    - duckduckgo\n  instructions:\n    - |\n        Find recent news:\n        - Add \"news\" or date filters to queries\n        - Focus on reputable news sources\n        - Check multiple outlets for coverage\n        - Note publication dates\n</code></pre></p>"},{"location":"tools/available-tools/#best-practices","title":"Best Practices","text":"<p>Effective Queries: - \u2705 Be specific and targeted - \u2705 Use quotes for exact phrases - \u2705 Include relevant keywords - \u2705 Filter by date when needed</p> <p>Result Processing: - \u2705 Review multiple results - \u2705 Cross-reference information - \u2705 Cite sources - \u2705 Note conflicting information</p> <p>Limitations: - \u26a0\ufe0f Results may be minutes to hours old - \u26a0\ufe0f Source quality varies - \u26a0\ufe0f Rate limits apply - \u26a0\ufe0f Cannot access paywalled content</p>"},{"location":"tools/available-tools/#memory-server","title":"Memory Server","text":"<p>Toolset ID: <code>memory-server</code> Category: Data Persistence Authentication: Automatic (user-scoped)</p> <p>Persistent key-value storage for user data, preferences, and context.</p>"},{"location":"tools/available-tools/#capabilities_1","title":"Capabilities","text":"<ul> <li>\ud83d\udcbe Store user preferences</li> <li>\ud83d\udcdd Save conversation context</li> <li>\ud83d\udd16 Bookmark important information</li> <li>\ud83d\udcca Track user data over time</li> <li>\ud83d\udd12 User-isolated storage (data privacy)</li> </ul>"},{"location":"tools/available-tools/#configuration_1","title":"Configuration","text":"<pre><code>agents:\n  personalized_assistant:\n    toolsets:\n      - memory-server\n    instructions:\n      - |\n          Use memory-server to provide personalized experience:\n          - Retrieve user preferences at start of conversation\n          - Store new preferences as user provides them\n          - Remember important context between sessions\n</code></pre>"},{"location":"tools/available-tools/#key-structure","title":"Key Structure","text":"<p>Use descriptive, hierarchical keys:</p> <pre><code>user_preferences          # General user preferences\ndietary_restrictions      # Specific preference type\nshopping_history_{date}   # Time-stamped data\nconversation_context      # Session context\nfavorites_products        # Collections\nsettings_{category}       # Configuration\n</code></pre>"},{"location":"tools/available-tools/#usage-examples_1","title":"Usage Examples","text":"<p>User Preferences: <pre><code>shopping_assistant:\n  toolsets:\n    - memory-server\n  instructions:\n    - |\n        Preference management:\n\n        On first interaction:\n        - Check memory-server for key \"user_preferences\"\n        - If not found, ask user about preferences\n        - Store preferences with key \"user_preferences\"\n\n        For each session:\n        - Load preferences at start\n        - Apply to recommendations\n        - Update based on user feedback\n        - Save updates back to memory-server\n</code></pre></p> <p>Conversation Context: <pre><code>content_assistant:\n  toolsets:\n    - memory-server\n  instructions:\n    - |\n        Context persistence:\n\n        At conversation start:\n        - Retrieve key \"current_project\" for ongoing work\n\n        During conversation:\n        - Update \"current_project\" with progress\n        - Store \"recent_topics\" for quick reference\n\n        At conversation end:\n        - Save final state to \"current_project\"\n        - Store summary in \"session_history_{timestamp}\"\n</code></pre></p> <p>Learning Agent: <pre><code>learning_assistant:\n  toolsets:\n    - memory-server\n  instructions:\n    - |\n        Learn from interactions:\n\n        Store with structured keys:\n        - \"user_skill_level_{topic}\": beginner/intermediate/advanced\n        - \"user_interests\": Array of interest areas\n        - \"completed_tutorials\": Track progress\n        - \"feedback_history\": Learn from corrections\n\n        Adapt teaching based on stored data.\n</code></pre></p> <p>Shopping History: <pre><code>product_recommender:\n  toolsets:\n    - memory-server\n  instructions:\n    - |\n        Track shopping behavior:\n\n        Store:\n        - \"viewed_products\": Recently viewed items\n        - \"purchased_products\": Purchase history\n        - \"favorite_brands\": Preferred brands\n        - \"price_sensitivity\": Budget preferences\n\n        Use history to:\n        - Avoid recommending recently viewed items\n        - Suggest complementary products\n        - Respect brand preferences\n        - Match budget expectations\n</code></pre></p>"},{"location":"tools/available-tools/#best-practices_1","title":"Best Practices","text":"<p>Key Naming: - \u2705 Use descriptive names: <code>dietary_restrictions</code> not <code>dr</code> - \u2705 Use snake_case: <code>user_preferences</code> - \u2705 Include timestamps when needed: <code>session_{timestamp}</code> - \u2705 Namespace related data: <code>settings_*</code>, <code>history_*</code></p> <p>Data Structure: - \u2705 Store as JSON for complex data - \u2705 Include metadata (timestamps, versions) - \u2705 Keep values reasonably sized (&lt; 10KB) - \u2705 Use separate keys for separate concerns</p> <p>Data Management: - \u2705 Check for existence before retrieval - \u2705 Handle missing keys gracefully - \u2705 Validate retrieved data format - \u2705 Update stale data - \u2705 Clean up old data periodically</p> <p>Privacy: - \u274c Never store sensitive data (passwords, payment info) - \u274c Don't store personally identifiable information unnecessarily - \u2705 Store only what's needed for functionality - \u2705 Respect user data deletion requests</p>"},{"location":"tools/available-tools/#notification-server","title":"Notification Server","text":"<p>Toolset ID: <code>notification-server</code> Category: Communication Authentication: Automatic (user-scoped)</p> <p>Send push notifications to users.</p>"},{"location":"tools/available-tools/#capabilities_2","title":"Capabilities","text":"<ul> <li>\ud83d\udcec Push notifications to user devices</li> <li>\u23f0 Reminder and alert notifications</li> <li>\ud83d\udce2 Status update notifications</li> <li>\ud83d\udd14 Real-time alerts</li> <li>\ud83d\udcf1 Cross-platform delivery</li> </ul>"},{"location":"tools/available-tools/#configuration_2","title":"Configuration","text":"<pre><code>agents:\n  reminder_agent:\n    toolsets:\n      - notification-server\n    instructions:\n      - |\n          Send notifications for:\n          - Upcoming appointments (15 min before)\n          - Task deadlines (1 hour before)\n          - Important status changes\n\n          Keep messages concise and actionable.\n</code></pre>"},{"location":"tools/available-tools/#usage-examples_2","title":"Usage Examples","text":"<p>Reminder Service: <pre><code>reminder_agent:\n  toolsets:\n    - google-calendar\n    - notification-server\n  instructions:\n    - |\n        Reminder workflow:\n\n        Every 15 minutes:\n        1. Check google-calendar for events in next hour\n        2. For each upcoming event:\n           - Send notification-server alert\n           - Include: event title, time, location\n           - Add action: \"View Details\"\n        3. Mark notification as sent (avoid duplicates)\n</code></pre></p> <p>Status Updates: <pre><code>process_monitor:\n  toolsets:\n    - notification-server\n    - memory-server\n  instructions:\n    - |\n        Process monitoring:\n\n        When long-running task completes:\n        1. Send notification-server update:\n           - \"Your report is ready\"\n           - \"Click to view results\"\n        2. Store completion in memory-server\n        3. Include summary in notification\n</code></pre></p> <p>Alert System: <pre><code>alert_agent:\n  toolsets:\n    - notification-server\n  instructions:\n    - |\n        Alert for critical events:\n\n        Severity levels:\n        - High: Immediate notification with priority flag\n        - Medium: Standard notification\n        - Low: Non-urgent notification\n\n        Include:\n        - Clear description of event\n        - Impact or urgency\n        - Recommended action\n        - Link to details\n</code></pre></p> <p>Smart Notifications: <pre><code>smart_notifier:\n  toolsets:\n    - notification-server\n    - memory-server\n  instructions:\n    - |\n        Intelligent notification:\n\n        Check memory-server for:\n        - User notification preferences\n        - Quiet hours setting\n        - Notification frequency limits\n\n        Respect preferences:\n        - Don't send during quiet hours\n        - Batch low-priority notifications\n        - Limit frequency (max 5/hour)\n\n        Store notification history in memory-server.\n</code></pre></p>"},{"location":"tools/available-tools/#best-practices_2","title":"Best Practices","text":"<p>Message Content: - \u2705 Keep under 100 characters - \u2705 Start with most important info - \u2705 Include clear action if needed - \u2705 Use friendly, human tone</p> <p>Timing: - \u2705 Consider user timezone - \u2705 Respect quiet hours - \u2705 Don't spam (rate limit) - \u2705 Time-sensitive first</p> <p>User Experience: - \u2705 Make notifications actionable - \u2705 Provide context - \u2705 Allow dismissal - \u2705 Don't interrupt unless urgent</p> <p>Examples:</p> <p>Good: <pre><code>\u2705 \"Meeting in 15 min: Design Review (Room 3B)\"\n\u2705 \"Your report is ready. Tap to view.\"\n\u2705 \"\u26a0\ufe0f Server alert: High CPU usage detected\"\n</code></pre></p> <p>Poor: <pre><code>\u274c \"Notification\" (not descriptive)\n\u274c \"Hey there! So like, there's this thing that happened...\" (too long/casual)\n\u274c Sending 20 notifications in 5 minutes (spam)\n</code></pre></p>"},{"location":"tools/available-tools/#weather-tool","title":"Weather Tool","text":"<p>Toolset ID: <code>weather-tool</code> Category: Information Gathering Authentication: None required</p> <p>Real-time weather data and forecasts.</p>"},{"location":"tools/available-tools/#capabilities_3","title":"Capabilities","text":"<ul> <li>\ud83c\udf21\ufe0f Current conditions</li> <li>\ud83d\udcc5 Multi-day forecasts</li> <li>\u26a0\ufe0f Severe weather alerts</li> <li>\ud83c\udf0d Global coverage</li> <li>\ud83d\udcca Detailed metrics (temp, humidity, wind, etc.)</li> </ul>"},{"location":"tools/available-tools/#configuration_3","title":"Configuration","text":"<pre><code>agents:\n  weather_assistant:\n    toolsets:\n      - weather-tool\n    instructions:\n      - |\n          Provide weather information:\n          - Current conditions with all details\n          - Multi-day forecasts when asked\n          - Alert users to severe weather\n          - Format temperatures based on user preference\n</code></pre>"},{"location":"tools/available-tools/#usage-examples_3","title":"Usage Examples","text":"<p>Weather Assistant: <pre><code>weather_agent:\n  toolsets:\n    - weather-tool\n  instructions:\n    - |\n        Weather information:\n\n        For current conditions:\n        - Temperature and \"feels like\"\n        - Weather description (sunny, cloudy, etc.)\n        - Humidity, wind speed, visibility\n        - Precipitation if any\n\n        For forecasts:\n        - Daily high/low\n        - Precipitation chance\n        - General conditions\n        - Day-by-day breakdown\n\n        For severe weather:\n        - Alert type and level\n        - Affected areas\n        - Duration\n        - Safety recommendations\n</code></pre></p> <p>Travel Planner: <pre><code>travel_planner:\n  toolsets:\n    - weather-tool\n    - memory-server\n  instructions:\n    - |\n        Travel weather planning:\n\n        For trip destination:\n        1. Get weather-tool forecast for travel dates\n        2. Analyze conditions:\n           - Ideal weather: outdoor activities\n           - Rainy: indoor alternatives\n           - Extreme weather: warnings\n        3. Provide packing recommendations\n        4. Suggest activity adjustments\n        5. Store itinerary in memory-server\n</code></pre></p> <p>Activity Recommender: <pre><code>activity_recommender:\n  toolsets:\n    - weather-tool\n  instructions:\n    - |\n        Weather-based recommendations:\n\n        Check weather-tool for today + weekend:\n\n        Sunny &amp; warm:\n        - Outdoor activities\n        - Parks, beaches\n        - Sports\n\n        Rainy:\n        - Indoor venues\n        - Museums, movies\n        - Indoor sports\n\n        Extreme weather:\n        - Stay home suggestions\n        - Safety-first recommendations\n</code></pre></p>"},{"location":"tools/available-tools/#best-practices_3","title":"Best Practices","text":"<p>Location Handling: - \u2705 Support city names, ZIP codes, coordinates - \u2705 Confirm location if ambiguous - \u2705 Store preferred location in memory-server - \u2705 Handle location errors gracefully</p> <p>Temperature Units: - \u2705 Ask user preference (F/C) - \u2705 Store preference in memory-server - \u2705 Convert consistently - \u2705 Display both if helpful</p> <p>Presentation: - \u2705 Human-friendly descriptions - \u2705 Relevant details for context - \u2705 Highlight severe weather - \u2705 Include timestamps</p>"},{"location":"tools/available-tools/#google-calendar","title":"Google Calendar","text":"<p>Toolset ID: <code>google-calendar</code> Category: External Service Authentication: OAuth required</p> <p>Calendar integration for event management.</p>"},{"location":"tools/available-tools/#capabilities_4","title":"Capabilities","text":"<ul> <li>\ud83d\udcc5 View calendar events</li> <li>\u2795 Create new events</li> <li>\u270f\ufe0f Update existing events</li> <li>\ud83d\uddd1\ufe0f Delete events</li> <li>\ud83d\udd0d Search events</li> <li>\ud83d\udc65 Manage attendees</li> <li>\u23f0 Set reminders</li> </ul>"},{"location":"tools/available-tools/#configuration_4","title":"Configuration","text":"<pre><code>agents:\n  scheduling_assistant:\n    toolsets:\n      - google-calendar\n      - notification-server\n    instructions:\n      - |\n          Manage calendar:\n          - View upcoming events\n          - Schedule new meetings\n          - Find available time slots\n          - Send reminders via notifications\n</code></pre>"},{"location":"tools/available-tools/#usage-examples_4","title":"Usage Examples","text":"<p>Scheduling Assistant: <pre><code>scheduler:\n  toolsets:\n    - google-calendar\n    - notification-server\n  instructions:\n    - |\n        Scheduling workflow:\n\n        To schedule meeting:\n        1. Query google-calendar for conflicts\n        2. Find available time slots\n        3. Propose options to user\n        4. Create event in google-calendar\n        5. Send confirmation via notification-server\n\n        To find availability:\n        1. Check google-calendar for date range\n        2. Identify free blocks\n        3. Consider preferences (morning/afternoon)\n        4. Suggest optimal times\n</code></pre></p> <p>Meeting Preparation: <pre><code>meeting_prep:\n  toolsets:\n    - google-calendar\n    - memory-server\n    - notification-server\n  instructions:\n    - |\n        Meeting preparation:\n\n        15 minutes before meeting:\n        1. Retrieve meeting from google-calendar\n        2. Load related notes from memory-server\n        3. Prepare agenda/context\n        4. Send prep notification-server alert\n\n        After meeting:\n        1. Ask for notes\n        2. Store in memory-server linked to event\n        3. Set follow-up reminders if needed\n</code></pre></p> <p>Calendar Analysis: <pre><code>calendar_analyst:\n  toolsets:\n    - google-calendar\n  instructions:\n    - |\n        Calendar insights:\n\n        Analyze google-calendar events:\n        - Meeting time by category\n        - Free time availability\n        - Busiest days/times\n        - Recurring meeting load\n\n        Provide:\n        - Time management insights\n        - Schedule optimization suggestions\n        - Work-life balance assessment\n</code></pre></p>"},{"location":"tools/available-tools/#best-practices_4","title":"Best Practices","text":"<p>Event Creation: - \u2705 Include all relevant details (title, time, location, description) - \u2705 Set appropriate reminders - \u2705 Add attendees when known - \u2705 Use clear, descriptive titles</p> <p>Time Handling: - \u2705 Respect user timezone - \u2705 Confirm times before creating events - \u2705 Handle all-day events appropriately - \u2705 Consider duration (30min, 1hr defaults)</p> <p>Privacy: - \u2705 Ask before reading calendar - \u2705 Only access needed date ranges - \u2705 Don't expose sensitive event details unnecessarily - \u2705 Respect calendar visibility settings</p>"},{"location":"tools/available-tools/#administrator-deployed-tools","title":"Administrator-Deployed Tools","text":"<p>Your organization's administrator may deploy additional custom tools for specific business needs:</p>"},{"location":"tools/available-tools/#product-catalog-tool","title":"Product Catalog Tool","text":"<p>Example Configuration: <pre><code>product_specialist:\n  toolsets:\n    - product-catalog\n  instructions:\n    - |\n        Search product-catalog:\n        - Filter by category, price range, availability\n        - Sort by relevance, price, rating\n        - Return top 5 matches\n        - Include: name, price, rating, stock status\n</code></pre></p>"},{"location":"tools/available-tools/#crm-integration","title":"CRM Integration","text":"<p>Example Configuration: <pre><code>sales_agent:\n  toolsets:\n    - crm-tool\n  instructions:\n    - |\n        CRM operations:\n        - Look up customer history\n        - Update contact records\n        - Log interactions\n        - Track opportunities\n</code></pre></p>"},{"location":"tools/available-tools/#analytics-tool","title":"Analytics Tool","text":"<p>Example Configuration: <pre><code>analyst:\n  toolsets:\n    - analytics-tool\n  instructions:\n    - |\n        Query analytics:\n        - Retrieve metrics for date range\n        - Generate reports\n        - Calculate trends\n        - Export data for visualization\n</code></pre></p>"},{"location":"tools/available-tools/#tool-comparison","title":"Tool Comparison","text":""},{"location":"tools/available-tools/#by-use-case","title":"By Use Case","text":"Use Case Recommended Tools Research &amp; Information <code>duckduckgo</code>, <code>memory-server</code> Personalization <code>memory-server</code> Scheduling &amp; Time <code>google-calendar</code>, <code>notification-server</code> Weather &amp; Location <code>weather-tool</code>, <code>memory-server</code> Alerts &amp; Updates <code>notification-server</code> Data Persistence <code>memory-server</code> External API Administrator-deployed tools"},{"location":"tools/available-tools/#by-latency","title":"By Latency","text":"Tool Latency Use When <code>memory-server</code> Very Low (10-50ms) Always acceptable <code>notification-server</code> Low (50-200ms) Always acceptable <code>weather-tool</code> Medium (200-800ms) Acceptable for most uses <code>google-calendar</code> Medium (300-1000ms) Acceptable for most uses <code>duckduckgo</code> High (500-2000ms) When current info needed"},{"location":"tools/available-tools/#by-data-privacy","title":"By Data Privacy","text":"Tool Privacy Level Data Handling <code>memory-server</code> High User-isolated, encrypted <code>notification-server</code> High User-scoped delivery <code>google-calendar</code> Medium OAuth-protected, Google privacy policy <code>weather-tool</code> High No personal data <code>duckduckgo</code> High No personal data in queries"},{"location":"tools/available-tools/#tool-discovery","title":"Tool Discovery","text":""},{"location":"tools/available-tools/#checking-available-tools","title":"Checking Available Tools","text":"<p>Your administrator can provide a list of available tools for your deployment.</p>"},{"location":"tools/available-tools/#requesting-new-tools","title":"Requesting New Tools","text":"<p>If you need a tool that's not available:</p> <ol> <li>Identify the specific capability needed</li> <li>Check if existing tools can be combined</li> <li>Request custom tool from administrator</li> <li>Provide use case and requirements</li> </ol>"},{"location":"tools/available-tools/#testing-tools","title":"Testing Tools","text":"<p>Test tool availability:</p> <pre><code>test_agent:\n  toolsets:\n    - tool-to-test\n  instructions:\n    - |\n        Test tool functionality:\n        - Verify tool responds\n        - Check response format\n        - Test error handling\n        - Validate permissions\n</code></pre>"},{"location":"tools/available-tools/#next-steps","title":"Next Steps","text":"<ul> <li>Using Tools - Best practices and integration patterns</li> <li>Tools Overview - Understanding tool architecture</li> <li>Agent Examples - Teams with tool integration</li> </ul> <p>Related: Overview | Using Tools | Creating Teams</p>"},{"location":"tools/creating-tools/","title":"Creating Custom MCP Tools","text":"<p>Build custom MCP servers to extend agent capabilities.</p>"},{"location":"tools/creating-tools/#overview","title":"Overview","text":"<p>While MyAgents provides several built-in tools, you can create custom MCP servers to integrate your own services, APIs, and data sources.</p>"},{"location":"tools/creating-tools/#mcp-server-types","title":"MCP Server Types","text":""},{"location":"tools/creating-tools/#in-process-servers","title":"In-Process Servers","text":"<p>TypeScript/JavaScript servers that run in the same process as the API.</p> <p>Advantages: - No network overhead - Direct access to system resources - Easy debugging - Fast execution</p> <p>Use for: - Internal business logic - Database operations - File system access - System integrations</p>"},{"location":"tools/creating-tools/#httpsse-servers","title":"HTTP/SSE Servers","text":"<p>External servers accessed via HTTP or Server-Sent Events.</p> <p>Advantages: - Language agnostic - Can run on separate infrastructure - Scalable independently - Isolated failures</p> <p>Use for: - External APIs - Third-party services - Microservices - Cross-platform tools</p>"},{"location":"tools/creating-tools/#stdio-servers","title":"STDIO Servers","text":"<p>Servers that communicate via standard input/output.</p> <p>Advantages: - Simple protocol - Works with any language - Good for command-line tools - Lightweight</p> <p>Use for: - CLI tool wrappers - Legacy system integration - Simple scripts</p>"},{"location":"tools/creating-tools/#creating-an-in-process-server","title":"Creating an In-Process Server","text":""},{"location":"tools/creating-tools/#basic-structure","title":"Basic Structure","text":"<pre><code>// src/tools/mcp/servers/CustomTool.ts\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { \n  ListToolsRequestSchema, \n  CallToolRequestSchema \n} from '@modelcontextprotocol/sdk/types.js';\n\nexport class CustomToolServer {\n  private server: Server;\n\n  constructor() {\n    this.server = new Server({\n      name: 'custom-tool',\n      version: '1.0.0'\n    }, {\n      capabilities: {\n        tools: {}\n      }\n    });\n\n    this.setupHandlers();\n  }\n\n  private setupHandlers(): void {\n    // List available tools\n    this.server.setRequestHandler(\n      ListToolsRequestSchema,\n      async () =&gt; ({\n        tools: [\n          {\n            name: 'do_something',\n            description: 'Does something useful',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                input: {\n                  type: 'string',\n                  description: 'Input parameter'\n                }\n              },\n              required: ['input']\n            }\n          }\n        ]\n      })\n    );\n\n    // Handle tool calls\n    this.server.setRequestHandler(\n      CallToolRequestSchema,\n      async (request) =&gt; {\n        const { name, arguments: args } = request.params;\n\n        if (name === 'do_something') {\n          return await this.doSomething(args.input as string);\n        }\n\n        throw new Error(`Unknown tool: ${name}`);\n      }\n    );\n  }\n\n  private async doSomething(input: string): Promise&lt;any&gt; {\n    // Your tool logic here\n    return {\n      content: [\n        {\n          type: 'text',\n          text: `Processed: ${input}`\n        }\n      ]\n    };\n  }\n\n  public getServer(): Server {\n    return this.server;\n  }\n}\n\n// Export for registration\nexport const CustomTool = CustomToolServer;\n</code></pre>"},{"location":"tools/creating-tools/#register-the-server","title":"Register the Server","text":"<p>Add to <code>mcp.servers.json</code>:</p> <pre><code>{\n  \"custom-tool\": {\n    \"type\": \"inprocess\",\n    \"module\": \"@/tools/mcp/servers/CustomTool\",\n    \"exportName\": \"CustomToolServer\"\n  }\n}\n</code></pre>"},{"location":"tools/creating-tools/#creating-an-http-server","title":"Creating an HTTP Server","text":""},{"location":"tools/creating-tools/#server-implementation","title":"Server Implementation","text":"<pre><code># external-tool-server.py\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/mcp', methods=['POST'])\ndef handle_mcp():\n    data = request.json\n    method = data.get('method')\n\n    if method == 'tools/list':\n        return jsonify({\n            'tools': [\n                {\n                    'name': 'external_operation',\n                    'description': 'Performs an external operation',\n                    'inputSchema': {\n                        'type': 'object',\n                        'properties': {\n                            'param': {\n                                'type': 'string',\n                                'description': 'Operation parameter'\n                            }\n                        },\n                        'required': ['param']\n                    }\n                }\n            ]\n        })\n\n    elif method == 'tools/call':\n        tool_name = data['params']['name']\n        arguments = data['params']['arguments']\n\n        if tool_name == 'external_operation':\n            result = perform_operation(arguments['param'])\n            return jsonify({\n                'content': [\n                    {\n                        'type': 'text',\n                        'text': result\n                    }\n                ]\n            })\n\n    return jsonify({'error': 'Unknown method'}), 400\n\ndef perform_operation(param):\n    # Your logic here\n    return f\"Operation completed with: {param}\"\n\nif __name__ == '__main__':\n    app.run(port=3001)\n</code></pre>"},{"location":"tools/creating-tools/#register-http-server","title":"Register HTTP Server","text":"<p>Add to <code>mcp.servers.json</code>:</p> <pre><code>{\n  \"external-tool\": {\n    \"type\": \"http\",\n    \"url\": \"http://localhost:3001/mcp\"\n  }\n}\n</code></pre>"},{"location":"tools/creating-tools/#tool-input-schema","title":"Tool Input Schema","text":"<p>Define clear input schemas using JSON Schema:</p> <pre><code>{\n  name: 'search_products',\n  description: 'Searches for products in the catalog',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      query: {\n        type: 'string',\n        description: 'Search query'\n      },\n      category: {\n        type: 'string',\n        description: 'Product category filter',\n        enum: ['electronics', 'clothing', 'food']\n      },\n      maxResults: {\n        type: 'number',\n        description: 'Maximum number of results',\n        default: 10,\n        minimum: 1,\n        maximum: 100\n      },\n      priceRange: {\n        type: 'object',\n        properties: {\n          min: { type: 'number' },\n          max: { type: 'number' }\n        }\n      }\n    },\n    required: ['query']\n  }\n}\n</code></pre>"},{"location":"tools/creating-tools/#best-practices","title":"Best Practices","text":""},{"location":"tools/creating-tools/#1-clear-tool-names","title":"1. Clear Tool Names","text":"<p>Use descriptive, action-oriented names:</p> <p>Good: - <code>search_products</code> - <code>send_email</code> - <code>create_calendar_event</code></p> <p>Avoid: - <code>tool1</code> - <code>handler</code> - <code>process</code></p>"},{"location":"tools/creating-tools/#2-comprehensive-descriptions","title":"2. Comprehensive Descriptions","text":"<pre><code>{\n  name: 'send_email',\n  description: 'Sends an email message. Requires valid email addresses for sender and recipients. Supports HTML and plain text content. Returns delivery status.',\n  inputSchema: {...}\n}\n</code></pre>"},{"location":"tools/creating-tools/#3-input-validation","title":"3. Input Validation","text":"<p>Validate all inputs before processing:</p> <pre><code>private async sendEmail(args: any): Promise&lt;any&gt; {\n  // Validate\n  if (!args.to || !args.subject || !args.body) {\n    throw new Error('Missing required fields: to, subject, body');\n  }\n\n  if (!this.isValidEmail(args.to)) {\n    throw new Error('Invalid email address');\n  }\n\n  // Process\n  const result = await this.emailService.send(args);\n  return result;\n}\n</code></pre>"},{"location":"tools/creating-tools/#4-error-handling","title":"4. Error Handling","text":"<p>Return clear error messages:</p> <pre><code>try {\n  const result = await this.performOperation(args);\n  return {\n    content: [\n      { type: 'text', text: JSON.stringify(result) }\n    ]\n  };\n} catch (error) {\n  return {\n    content: [\n      { \n        type: 'text', \n        text: `Error: ${error.message}` \n      }\n    ],\n    isError: true\n  };\n}\n</code></pre>"},{"location":"tools/creating-tools/#5-logging","title":"5. Logging","text":"<p>Log all tool operations:</p> <pre><code>private async doSomething(input: string): Promise&lt;any&gt; {\n  this.logger.info('Tool called', { tool: 'do_something', input });\n\n  try {\n    const result = await this.process(input);\n    this.logger.info('Tool completed', { tool: 'do_something', success: true });\n    return result;\n  } catch (error) {\n    this.logger.error('Tool failed', { tool: 'do_something', error });\n    throw error;\n  }\n}\n</code></pre>"},{"location":"tools/creating-tools/#testing-custom-tools","title":"Testing Custom Tools","text":""},{"location":"tools/creating-tools/#unit-tests","title":"Unit Tests","text":"<pre><code>import { CustomToolServer } from '@/tools/mcp/servers/CustomTool';\n\ndescribe('CustomToolServer', () =&gt; {\n  let server: CustomToolServer;\n\n  beforeEach(() =&gt; {\n    server = new CustomToolServer();\n  });\n\n  it('should list available tools', async () =&gt; {\n    const response = await server.getServer().request({\n      method: 'tools/list',\n      params: {}\n    });\n\n    expect(response.tools).toHaveLength(1);\n    expect(response.tools[0].name).toBe('do_something');\n  });\n\n  it('should execute tool successfully', async () =&gt; {\n    const response = await server.getServer().request({\n      method: 'tools/call',\n      params: {\n        name: 'do_something',\n        arguments: { input: 'test' }\n      }\n    });\n\n    expect(response.content[0].text).toContain('Processed: test');\n  });\n\n  it('should handle errors gracefully', async () =&gt; {\n    await expect(server.getServer().request({\n      method: 'tools/call',\n      params: {\n        name: 'unknown_tool',\n        arguments: {}\n      }\n    })).rejects.toThrow('Unknown tool');\n  });\n});\n</code></pre>"},{"location":"tools/creating-tools/#integration-tests","title":"Integration Tests","text":"<p>Test tools with actual agents:</p> <pre><code>describe('CustomTool Integration', () =&gt; {\n  it('should work with agent', async () =&gt; {\n    const agent = await createTestAgent({\n      toolsets: ['custom-tool']\n    });\n\n    const response = await agent.processMessage(\n      'Use the custom tool with input \"test\"'\n    );\n\n    expect(response).toContain('Processed: test');\n  });\n});\n</code></pre>"},{"location":"tools/creating-tools/#security-considerations","title":"Security Considerations","text":""},{"location":"tools/creating-tools/#1-authentication","title":"1. Authentication","text":"<p>Implement authentication for sensitive operations:</p> <pre><code>private validateAuth(token: string): boolean {\n  // Verify JWT, API key, etc.\n  return this.authService.validate(token);\n}\n</code></pre>"},{"location":"tools/creating-tools/#2-rate-limiting","title":"2. Rate Limiting","text":"<p>Prevent abuse:</p> <pre><code>private rateLimiter = new RateLimiter({\n  maxRequests: 100,\n  windowMs: 60000 // 1 minute\n});\n\nprivate async doSomething(input: string): Promise&lt;any&gt; {\n  if (!this.rateLimiter.checkLimit()) {\n    throw new Error('Rate limit exceeded');\n  }\n  // ... proceed\n}\n</code></pre>"},{"location":"tools/creating-tools/#3-input-sanitization","title":"3. Input Sanitization","text":"<p>Sanitize all inputs:</p> <pre><code>private sanitizeInput(input: string): string {\n  return input\n    .trim()\n    .replace(/[&lt;&gt;]/g, '')  // Remove dangerous characters\n    .substring(0, 1000);   // Limit length\n}\n</code></pre>"},{"location":"tools/creating-tools/#4-access-control","title":"4. Access Control","text":"<p>Check permissions:</p> <pre><code>private async checkPermission(userId: string, operation: string): Promise&lt;boolean&gt; {\n  return await this.permissionService.hasPermission(userId, operation);\n}\n</code></pre>"},{"location":"tools/creating-tools/#deployment","title":"Deployment","text":""},{"location":"tools/creating-tools/#development","title":"Development","text":"<pre><code># Start API with custom tool\nnpm run dev\n</code></pre>"},{"location":"tools/creating-tools/#production","title":"Production","text":"<pre><code># Build\nnpm run build\n\n# Start production server\nnpm start\n</code></pre>"},{"location":"tools/creating-tools/#docker","title":"Docker","text":"<pre><code>FROM node:18-alpine\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci --production\n\nCOPY dist ./dist\nCOPY src/tools/mcp/servers ./dist/tools/mcp/servers\n\nCMD [\"node\", \"dist/server.js\"]\n</code></pre>"},{"location":"tools/creating-tools/#example-weather-tool","title":"Example: Weather Tool","text":"<p>Complete example of a custom weather tool:</p> <pre><code>// src/tools/mcp/servers/WeatherTool.ts\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport axios from 'axios';\n\nexport class WeatherToolServer {\n  private server: Server;\n  private apiKey: string;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n    this.server = new Server({\n      name: 'weather-tool',\n      version: '1.0.0'\n    }, {\n      capabilities: { tools: {} }\n    });\n\n    this.setupHandlers();\n  }\n\n  private setupHandlers(): void {\n    this.server.setRequestHandler(\n      ListToolsRequestSchema,\n      async () =&gt; ({\n        tools: [\n          {\n            name: 'get_weather',\n            description: 'Gets current weather for a location',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                location: {\n                  type: 'string',\n                  description: 'City name or zip code'\n                },\n                units: {\n                  type: 'string',\n                  description: 'Temperature units',\n                  enum: ['metric', 'imperial'],\n                  default: 'metric'\n                }\n              },\n              required: ['location']\n            }\n          }\n        ]\n      })\n    );\n\n    this.server.setRequestHandler(\n      CallToolRequestSchema,\n      async (request) =&gt; {\n        const { name, arguments: args } = request.params;\n\n        if (name === 'get_weather') {\n          return await this.getWeather(\n            args.location as string,\n            args.units as string || 'metric'\n          );\n        }\n\n        throw new Error(`Unknown tool: ${name}`);\n      }\n    );\n  }\n\n  private async getWeather(location: string, units: string): Promise&lt;any&gt; {\n    try {\n      const response = await axios.get(\n        `https://api.weatherapi.com/v1/current.json`,\n        {\n          params: {\n            key: this.apiKey,\n            q: location,\n            units\n          }\n        }\n      );\n\n      const data = response.data;\n      const result = {\n        location: data.location.name,\n        temperature: data.current.temp_c,\n        condition: data.current.condition.text,\n        humidity: data.current.humidity,\n        windSpeed: data.current.wind_kph\n      };\n\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify(result, null, 2)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: 'text',\n            text: `Error fetching weather: ${error.message}`\n          }\n        ],\n        isError: true\n      };\n    }\n  }\n\n  public getServer(): Server {\n    return this.server;\n  }\n}\n\nexport const WeatherTool = WeatherToolServer;\n</code></pre> <p>Register in <code>mcp.servers.json</code>:</p> <pre><code>{\n  \"weather-tool\": {\n    \"type\": \"inprocess\",\n    \"module\": \"@/tools/mcp/servers/WeatherTool\",\n    \"exportName\": \"WeatherToolServer\",\n    \"args\": [\"${env:WEATHER_API_KEY}\"]\n  }\n}\n</code></pre>"},{"location":"tools/creating-tools/#next-steps","title":"Next Steps","text":"<ul> <li>Available Tools - Study existing tools</li> <li>Using Tools - Integration patterns</li> <li>MCP Documentation - Official protocol documentation</li> </ul> <p>Related: Tools Overview | Available Tools | Using Tools</p>"},{"location":"tools/overview/","title":"Tools Overview","text":"<p>Tools extend agent capabilities by connecting them to external systems, data sources, and services.</p>"},{"location":"tools/overview/#what-are-tools","title":"What are Tools?","text":"<p>Tools are integrations that allow agents to:</p> <ul> <li>\ud83d\udd0d Search the web for current information</li> <li>\ud83d\udcbe Store and retrieve persistent data</li> <li>\ud83d\udce7 Send notifications to users</li> <li>\ud83d\uddd3\ufe0f Manage calendars and scheduling</li> <li>\ud83c\udf24\ufe0f Access real-time data like weather</li> <li>\ud83d\udee0\ufe0f Integrate with APIs and external services</li> </ul> <p>Tools are based on the Model Context Protocol (MCP), an open standard for connecting AI systems to data sources.</p>"},{"location":"tools/overview/#how-tools-work","title":"How Tools Work","text":""},{"location":"tools/overview/#tool-integration","title":"Tool Integration","text":"<p>Agents access tools through the <code>toolsets</code> configuration property:</p> <pre><code>agents:\n  researcher:\n    type: llm\n    name: Research Assistant\n    description: Conducts web research\n    toolsets:\n      - duckduckgo      # Web search tool\n      - memory-server   # Data persistence tool\n    instructions:\n      - |\n          Use duckduckgo to research topics.\n          Store important findings in memory-server for future reference.\n</code></pre>"},{"location":"tools/overview/#tool-execution-flow","title":"Tool Execution Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   User   \u2502\n\u2502  Request \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Agent      \u2502\n\u2502  (Processes    \u2502\n\u2502   request)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 Agent decides to use tool\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Tool Call     \u2502\n\u2502  (e.g.,        \u2502\n\u2502   web search)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u2502 Tool returns results\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502     Agent      \u2502\n\u2502  (Processes    \u2502\n\u2502   results)     \u2502\n\u2514\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502\n     \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Response     \u2502\n\u2502   to User      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"tools/overview/#automatic-tool-access","title":"Automatic Tool Access","text":"<p>When you add a toolset to an agent:</p> <ol> <li>\u2705 Agent automatically receives tool descriptions</li> <li>\u2705 Agent can invoke tools during processing</li> <li>\u2705 Agent receives tool results in context</li> <li>\u2705 Agent decides when to use which tools</li> </ol> <p>You don't need to: - \u274c Write tool invocation code - \u274c Handle tool responses manually - \u274c Manage tool authentication (handled by system)</p>"},{"location":"tools/overview/#tool-categories","title":"Tool Categories","text":""},{"location":"tools/overview/#information-gathering","title":"Information Gathering","text":"<p>Tools that retrieve external information:</p> <ul> <li>Web Search (<code>duckduckgo</code>) - Search the web for current information</li> <li>Weather (<code>weather-tool</code>) - Get weather conditions and forecasts</li> <li>Calendar (<code>google-calendar</code>) - Access calendar events and availability</li> </ul> <p>Example: <pre><code>researcher:\n  toolsets:\n    - duckduckgo\n    - weather-tool\n  instructions:\n    - |\n        Research topics using web search.\n        Check weather when providing outdoor recommendations.\n</code></pre></p>"},{"location":"tools/overview/#data-persistence","title":"Data Persistence","text":"<p>Tools that store and retrieve data:</p> <ul> <li>Memory Server (<code>memory-server</code>) - Key-value storage for user data and preferences</li> <li>Database Connectors - Integration with databases (custom implementations)</li> </ul> <p>Example: <pre><code>shopping_assistant:\n  toolsets:\n    - memory-server\n  instructions:\n    - |\n        Store user preferences (dietary restrictions, favorite brands).\n        Retrieve preferences before making product recommendations.\n</code></pre></p>"},{"location":"tools/overview/#communication","title":"Communication","text":"<p>Tools that send messages and notifications:</p> <ul> <li>Notification Server (<code>notification-server</code>) - Push notifications to users</li> <li>Email - Send emails (custom implementations)</li> <li>SMS - Send text messages (custom implementations)</li> </ul> <p>Example: <pre><code>reminder_agent:\n  toolsets:\n    - notification-server\n  instructions:\n    - |\n        Send push notifications for:\n        - Upcoming appointments\n        - Important deadlines\n        - Status updates\n</code></pre></p>"},{"location":"tools/overview/#external-services","title":"External Services","text":"<p>Tools that integrate with third-party services:</p> <ul> <li>Google Calendar (<code>google-calendar</code>) - Calendar management</li> <li>Payment Processors - Handle transactions (custom implementations)</li> <li>CRM Systems - Customer relationship management (custom implementations)</li> </ul>"},{"location":"tools/overview/#specialized-tools","title":"Specialized Tools","text":"<p>Domain-specific tools for particular use cases:</p> <ul> <li>Product Catalogs - E-commerce product data</li> <li>Analytics - Business intelligence and reporting</li> <li>Calculation - Mathematical and statistical operations</li> </ul>"},{"location":"tools/overview/#agent-types-and-tools","title":"Agent Types and Tools","text":"<p>Different agent types have different tool access patterns:</p> Agent Type Direct Tool Access Tool Access via Sub-Agents LLM \u2705 Yes \u2705 Yes (if sub-agents have tools) Parallel \u274c No \u2705 Yes (sub-agents can have tools) Loop \u274c No \u2705 Yes (sub-agent can have tools) Sequence \u274c No \u2705 Yes (sub-agents can have tools)"},{"location":"tools/overview/#llm-agent-with-tools","title":"LLM Agent with Tools","text":"<p>Direct tool access:</p> <pre><code>researcher:\n  type: llm\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Use duckduckgo for research.\n        Store findings in memory-server.\n</code></pre>"},{"location":"tools/overview/#parallel-agent-with-tools","title":"Parallel Agent with Tools","text":"<p>Tools accessed by sub-agents:</p> <pre><code>multi_researcher:\n  type: parallel\n  # No toolsets here\n  sub_agents:\n    - source_1\n    - source_2\n\nsource_1:\n  type: llm\n  toolsets:\n    - duckduckgo    # Tool access here\n</code></pre>"},{"location":"tools/overview/#loop-agent-with-tools","title":"Loop Agent with Tools","text":"<p>Tool accessed by iterative sub-agent:</p> <pre><code>content_refiner:\n  type: loop\n  max_iterations: 3\n  # No toolsets here\n  sub_agents:\n    - refiner\n\nrefiner:\n  type: llm\n  toolsets:\n    - memory-server    # Tool access here\n</code></pre>"},{"location":"tools/overview/#sequence-agent-with-tools","title":"Sequence Agent with Tools","text":"<p>Tools accessed by pipeline stages:</p> <pre><code>pipeline:\n  type: sequence\n  # No toolsets here\n  sub_agents:\n    - research_stage\n    - write_stage\n\nresearch_stage:\n  type: llm\n  toolsets:\n    - duckduckgo       # Tool access in stage 1\n\nwrite_stage:\n  type: llm\n  toolsets:\n    - memory-server    # Tool access in stage 2\n</code></pre>"},{"location":"tools/overview/#tool-usage-patterns","title":"Tool Usage Patterns","text":""},{"location":"tools/overview/#research-pattern","title":"Research Pattern","text":"<p>Agent searches web and stores findings:</p> <pre><code>researcher:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Research workflow:\n        1. Search web using duckduckgo\n        2. Analyze and summarize findings\n        3. Store key insights in memory-server with descriptive keys\n        4. Present summary to user\n</code></pre>"},{"location":"tools/overview/#personalization-pattern","title":"Personalization Pattern","text":"<p>Agent retrieves user preferences and customizes behavior:</p> <pre><code>assistant:\n  toolsets:\n    - memory-server\n  instructions:\n    - |\n        Personalization:\n        1. Check memory-server for user preferences (key: \"user_preferences\")\n        2. Apply preferences to recommendations\n        3. Update preferences based on user feedback\n        4. Store updated preferences back to memory-server\n</code></pre>"},{"location":"tools/overview/#notification-pattern","title":"Notification Pattern","text":"<p>Agent sends alerts based on triggers:</p> <pre><code>reminder_agent:\n  toolsets:\n    - google-calendar\n    - notification-server\n  instructions:\n    - |\n        Reminder workflow:\n        1. Check google-calendar for upcoming events\n        2. For events within 1 hour:\n           - Send notification via notification-server\n           - Include event details and location\n        3. Mark notification as sent\n</code></pre>"},{"location":"tools/overview/#multi-tool-pattern","title":"Multi-Tool Pattern","text":"<p>Agent coordinates multiple tools:</p> <pre><code>travel_assistant:\n  toolsets:\n    - weather-tool\n    - google-calendar\n    - memory-server\n  instructions:\n    - |\n        Travel planning:\n        1. Check google-calendar for trip dates\n        2. Get weather-tool forecast for destination\n        3. Retrieve user preferences from memory-server\n        4. Provide customized recommendations\n        5. Store itinerary in memory-server\n</code></pre>"},{"location":"tools/overview/#tool-selection-guidelines","title":"Tool Selection Guidelines","text":""},{"location":"tools/overview/#minimal-tool-principle","title":"Minimal Tool Principle","text":"<p>Only include tools an agent actually needs:</p> <p>Good - Focused tools: <pre><code>weather_agent:\n  toolsets:\n    - weather-tool    # Only tool needed\n</code></pre></p> <p>Poor - Unnecessary tools: <pre><code>weather_agent:\n  toolsets:\n    - weather-tool\n    - duckduckgo          # Not needed\n    - memory-server       # Not needed\n    - google-calendar     # Not needed\n</code></pre></p>"},{"location":"tools/overview/#tool-expertise","title":"Tool Expertise","text":"<p>Match tools to agent specialization:</p> <pre><code># Research specialist\nresearcher:\n  toolsets:\n    - duckduckgo\n    - memory-server\n\n# Scheduling specialist\nscheduler:\n  toolsets:\n    - google-calendar\n    - notification-server\n\n# Data analyst (no external tools needed)\nanalyst:\n  # No toolsets - works with provided data\n</code></pre>"},{"location":"tools/overview/#tool-combinations","title":"Tool Combinations","text":"<p>Common tool combinations:</p> <p>Research &amp; Storage: <pre><code>toolsets:\n  - duckduckgo      # Gather information\n  - memory-server   # Store findings\n</code></pre></p> <p>Scheduling &amp; Notifications: <pre><code>toolsets:\n  - google-calendar      # Event management\n  - notification-server  # Alerts\n</code></pre></p> <p>Context &amp; Personalization: <pre><code>toolsets:\n  - memory-server   # User preferences\n  - weather-tool    # Contextual data\n</code></pre></p>"},{"location":"tools/overview/#tool-instructions","title":"Tool Instructions","text":""},{"location":"tools/overview/#clear-tool-guidance","title":"Clear Tool Guidance","text":"<p>Specify when and how to use each tool:</p> <pre><code>instructions:\n  - |\n      Tool usage guidelines:\n\n      duckduckgo:\n      - Use for current information not in training data\n      - Search for facts, statistics, recent news\n      - Verify claims across multiple sources\n\n      memory-server:\n      - Store user preferences with key \"user_prefs\"\n      - Store conversation context with key \"context_{date}\"\n      - Retrieve before making recommendations\n\n      notification-server:\n      - Send for important updates only\n      - Keep messages concise (under 100 chars)\n      - Include actionable information\n</code></pre>"},{"location":"tools/overview/#tool-error-handling","title":"Tool Error Handling","text":"<p>Guide agents on tool failures:</p> <pre><code>instructions:\n  - |\n      If tool calls fail:\n\n      duckduckgo fails:\n      - Inform user search is unavailable\n      - Use training data knowledge where appropriate\n      - Caveat information may not be current\n\n      memory-server fails:\n      - Continue without stored preferences\n      - Ask user for preferences directly\n      - Don't block on storage errors\n\n      notification-server fails:\n      - Log the error\n      - Present information directly in chat\n      - Retry notification once\n</code></pre>"},{"location":"tools/overview/#tool-result-interpretation","title":"Tool Result Interpretation","text":"<p>Guide agents on using tool results:</p> <pre><code>instructions:\n  - |\n      Interpreting tool results:\n\n      duckduckgo results:\n      - Synthesize information from multiple sources\n      - Cite sources when making claims\n      - Note conflicting information\n      - Assess source credibility\n\n      memory-server results:\n      - Handle missing keys gracefully\n      - Validate stored data format\n      - Check data freshness (timestamps)\n      - Update stale data\n</code></pre>"},{"location":"tools/overview/#security-and-permissions","title":"Security and Permissions","text":""},{"location":"tools/overview/#tool-access-control","title":"Tool Access Control","text":"<p>Tools respect user permissions:</p> <ul> <li>\u2705 Users control which tools can access their data</li> <li>\u2705 Tools require authentication for sensitive operations</li> <li>\u2705 System enforces rate limits and quotas</li> <li>\u2705 Audit logs track tool usage</li> </ul>"},{"location":"tools/overview/#data-privacy","title":"Data Privacy","text":"<p>Tool data handling:</p> <ul> <li>Memory Server: User data is isolated per user</li> <li>Notifications: Only sent to authenticated user</li> <li>Calendar: Requires OAuth consent</li> <li>Web Search: No personal data in queries</li> </ul>"},{"location":"tools/overview/#best-practices","title":"Best Practices","text":"<p>Secure tool usage: <pre><code>instructions:\n  - |\n      Privacy guidelines:\n      - Don't store sensitive data (passwords, payment info)\n      - Don't include personal data in web searches\n      - Don't send sensitive info via notifications\n      - Request minimal permissions needed\n</code></pre></p>"},{"location":"tools/overview/#tool-availability","title":"Tool Availability","text":""},{"location":"tools/overview/#built-in-tools","title":"Built-in Tools","text":"<p>Available in all MyAgents deployments: - <code>memory-server</code> - Built-in data persistence - <code>notification-server</code> - Built-in notifications</p>"},{"location":"tools/overview/#standard-tools","title":"Standard Tools","text":"<p>Configured per deployment: - <code>duckduckgo</code> - Web search - <code>weather-tool</code> - Weather data - <code>google-calendar</code> - Calendar integration</p>"},{"location":"tools/overview/#administrator-deployed-tools","title":"Administrator-Deployed Tools","text":"<p>Your organization's administrator may deploy additional tools for specific business needs: - Product catalog integrations - Internal API access - Custom integrations - Domain-specific services</p> <p>Check with your administrator for available tools.</p>"},{"location":"tools/overview/#performance-considerations","title":"Performance Considerations","text":""},{"location":"tools/overview/#tool-call-latency","title":"Tool Call Latency","text":"<p>Tool calls add processing time:</p> Tool Typical Latency <code>memory-server</code> 10-50ms <code>duckduckgo</code> 500-2000ms <code>weather-tool</code> 200-800ms <code>google-calendar</code> 300-1000ms <code>notification-server</code> 50-200ms"},{"location":"tools/overview/#optimization-tips","title":"Optimization Tips","text":"<p>Parallel tool calls: Agents can call multiple tools concurrently when results don't depend on each other.</p> <p>Caching: Store frequently-accessed data in memory-server to reduce repeated tool calls.</p> <p>Lazy loading: Only call tools when absolutely needed, not preemptively.</p> <p>Example - Optimized: <pre><code>instructions:\n  - |\n      Optimization strategy:\n      1. Check memory-server cache first\n      2. If cache miss or stale, call duckduckgo\n      3. Update cache with fresh results\n      4. Use cached data for subsequent requests\n</code></pre></p>"},{"location":"tools/overview/#tool-limitations","title":"Tool Limitations","text":""},{"location":"tools/overview/#rate-limits","title":"Rate Limits","text":"<p>Most tools have rate limits: - Web search: Limited queries per minute - Calendar: API quota limits - Notifications: Send frequency limits</p>"},{"location":"tools/overview/#data-freshness","title":"Data Freshness","text":"<p>Tool data has varying freshness: - Web search: Minutes to hours old - Weather: Updated hourly - Calendar: Real-time - Memory: Depends on last update</p>"},{"location":"tools/overview/#availability","title":"Availability","text":"<p>Tools may be temporarily unavailable: - Network issues - API outages - Rate limit exceeded - Authentication failures</p> <p>Design for resilience: <pre><code>instructions:\n  - |\n      Graceful degradation:\n      - Always have a fallback if tool unavailable\n      - Don't block user request on tool failure\n      - Communicate limitations to user\n      - Retry with exponential backoff\n</code></pre></p>"},{"location":"tools/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Available Tools - Complete tool catalog with examples</li> <li>Using Tools - Best practices and patterns</li> <li>Agent Examples - Teams with tool integration</li> </ul> <p>Related: Getting Started | Creating Teams | Configuration</p>"},{"location":"tools/using-tools/","title":"Using Tools","text":"<p>Best practices and patterns for integrating tools into your agent teams.</p>"},{"location":"tools/using-tools/#getting-started-with-tools","title":"Getting Started with Tools","text":""},{"location":"tools/using-tools/#basic-tool-integration","title":"Basic Tool Integration","text":"<p>The simplest tool integration:</p> <pre><code>agents:\n  weather_helper:\n    type: llm\n    toolsets:\n      - weather-tool\n    instructions:\n      - |\n          When users ask about weather, use the weather tool to get current \n          conditions or forecasts. Present the information clearly.\n</code></pre> <p>That's it! The agent automatically: - Receives tool descriptions - Knows when to use the tool - Invokes the tool correctly - Processes tool results - Incorporates results into responses</p>"},{"location":"tools/using-tools/#adding-multiple-tools","title":"Adding Multiple Tools","text":"<pre><code>agents:\n  research_assistant:\n    type: llm\n    toolsets:\n      - duckduckgo       # Web search\n      - memory-server    # Data storage\n    instructions:\n      - |\n          Research topics using web search.\n          Store important findings in memory for future reference.\n</code></pre>"},{"location":"tools/using-tools/#tool-usage-patterns","title":"Tool Usage Patterns","text":""},{"location":"tools/using-tools/#research-pattern","title":"Research Pattern","text":"<p>Search, analyze, and store findings.</p> <pre><code>researcher:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Research workflow:\n\n        1. **Search Phase**\n           - Use duckduckgo to search for topic\n           - Gather information from top results\n           - Cross-reference multiple sources\n\n        2. **Analysis Phase**\n           - Synthesize findings\n           - Identify key insights\n           - Note any conflicts or gaps\n\n        3. **Storage Phase**\n           - Store key findings in memory-server\n           - Use descriptive keys: \"research_{topic}_{date}\"\n           - Include source citations\n\n        4. **Presentation Phase**\n           - Present organized summary to user\n           - Cite sources\n           - Note confidence level\n</code></pre> <p>Key benefits: - Systematic information gathering - Persistent knowledge base - Source traceability - Reusable research</p>"},{"location":"tools/using-tools/#personalization-pattern","title":"Personalization Pattern","text":"<p>Retrieve and apply user preferences.</p> <pre><code>personal_assistant:\n  toolsets:\n    - memory-server\n  instructions:\n    - |\n        Personalization workflow:\n\n        **Session Start:**\n        1. Retrieve \"user_preferences\" from memory-server\n        2. Load \"conversation_context\" if continuing work\n        3. Apply preferences to behavior\n\n        **During Conversation:**\n        1. Note new preferences user expresses\n        2. Update \"user_preferences\" immediately\n        3. Apply new preferences to current and future responses\n\n        **Session End:**\n        1. Store \"conversation_context\" for continuity\n        2. Save any preference updates\n        3. Store \"session_summary_{timestamp}\"\n\n        **Preference Types:**\n        - Communication style (formal/casual)\n        - Output format (detailed/concise)\n        - Topics of interest\n        - Dietary restrictions\n        - Timezone and locale\n</code></pre> <p>Key benefits: - Consistent experience across sessions - Adaptive behavior - User doesn't repeat preferences - Context continuity</p>"},{"location":"tools/using-tools/#notification-pattern","title":"Notification Pattern","text":"<p>Monitor and alert users.</p> <pre><code>reminder_service:\n  toolsets:\n    - google-calendar\n    - notification-server\n    - memory-server\n  instructions:\n    - |\n        Reminder workflow:\n\n        **Monitoring Loop:**\n        Every 15 minutes:\n        1. Check google-calendar for upcoming events (next 60 min)\n        2. Load \"notified_events\" from memory-server\n        3. Filter out already-notified events\n\n        **Notification Decision:**\n        For each unnotified upcoming event:\n        - 60 min before: Optional heads-up\n        - 15 min before: Always notify\n        - 5 min before: Urgent reminder\n\n        **Send Notification:**\n        1. Send via notification-server with:\n           - Event title and time\n           - Location (if any)\n           - Action button: \"View Details\"\n        2. Add event ID to \"notified_events\" in memory-server\n        3. Log notification for tracking\n\n        **Error Handling:**\n        - If notification fails, retry once after 1 minute\n        - If still fails, log error but don't block\n</code></pre> <p>Key benefits: - Timely alerts - No duplicate notifications - Persistent tracking - Graceful failures</p>"},{"location":"tools/using-tools/#orchestration-pattern","title":"Orchestration Pattern","text":"<p>Coordinate multiple tools for complex workflows.</p> <pre><code>travel_planner:\n  toolsets:\n    - google-calendar\n    - weather-tool\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Travel planning workflow:\n\n        **Phase 1: Information Gathering**\n        1. Get trip dates from user or google-calendar\n        2. Get destination weather forecast via weather-tool\n        3. Research destination via duckduckgo:\n           - Attractions and activities\n           - Restaurants and hotels\n           - Local transportation\n           - Current events\n\n        **Phase 2: Personalization**\n        1. Load \"travel_preferences\" from memory-server:\n           - Budget level\n           - Activity preferences\n           - Dietary restrictions\n           - Accommodation preferences\n        2. Filter recommendations by preferences\n\n        **Phase 3: Itinerary Creation**\n        1. Create day-by-day plan considering:\n           - Weather forecast\n           - User preferences\n           - Travel time between locations\n        2. Store itinerary in memory-server: \"trip_{destination}_{date}\"\n\n        **Phase 4: Calendar Integration**\n        1. Offer to add to google-calendar\n        2. Create events for:\n           - Flight times\n           - Hotel check-in/out\n           - Reserved activities\n           - Restaurant reservations\n\n        **Phase 5: Ongoing Support**\n        1. Store plan in memory-server for later reference\n        2. Offer to send reminders day-of\n        3. Provide packing checklist based on weather\n</code></pre> <p>Key benefits: - Comprehensive planning - Personalized recommendations - Integrated schedule - Persistent itinerary</p>"},{"location":"tools/using-tools/#tool-instruction-patterns","title":"Tool Instruction Patterns","text":""},{"location":"tools/using-tools/#explicit-tool-guidance","title":"Explicit Tool Guidance","text":"<p>Specify exactly when and how to use each tool.</p> <pre><code>instructions:\n  - |\n      Tool Usage Guidelines:\n\n      **duckduckgo (Web Search)**\n      When to use:\n      - User asks about current events\n      - Need facts not in training data\n      - Research required\n\n      How to use:\n      - Formulate specific, targeted queries\n      - Review top 5-10 results\n      - Cross-reference information\n      - Cite sources in response\n\n      When NOT to use:\n      - Information in training data\n      - Personal opinions (no factual answer)\n      - Already searched recently (check memory first)\n\n      **memory-server (Data Persistence)**\n      When to use:\n      - Storing user preferences\n      - Saving research findings\n      - Preserving conversation context\n      - Tracking user data\n\n      How to use:\n      - Use descriptive keys\n      - Store as JSON for complex data\n      - Include timestamps\n      - Update rather than duplicate\n\n      Keys to use:\n      - \"user_preferences\": General preferences\n      - \"research_{topic}\": Research findings\n      - \"context_{session_id}\": Conversation context\n</code></pre>"},{"location":"tools/using-tools/#tool-combination-strategies","title":"Tool Combination Strategies","text":"<p>Guide agents on using tools together.</p> <pre><code>instructions:\n  - |\n      Multi-Tool Strategies:\n\n      **Cache-Then-Fetch Pattern:**\n      1. Check memory-server for cached data\n      2. If cache hit and fresh \u2192 use cached data\n      3. If cache miss or stale \u2192 fetch from source tool\n      4. Update cache in memory-server\n      5. Use fresh data\n\n      Example:\n      - Check memory-server for \"weather_{location}_{date}\"\n      - If found and &lt; 1 hour old, use it\n      - Otherwise, call weather-tool\n      - Store result in memory-server\n\n      **Research-and-Store Pattern:**\n      1. Search with duckduckgo\n      2. Analyze results\n      3. Store findings in memory-server\n      4. Return synthesized response\n\n      **Notify-and-Log Pattern:**\n      1. Send notification via notification-server\n      2. Store notification details in memory-server\n      3. Track success/failure\n      4. Don't duplicate notifications\n</code></pre>"},{"location":"tools/using-tools/#error-handling-instructions","title":"Error Handling Instructions","text":"<p>Guide agents on tool failures.</p> <pre><code>instructions:\n  - |\n      Tool Error Handling:\n\n      **If duckduckgo fails:**\n      - Inform user: \"Web search is temporarily unavailable\"\n      - Use training data knowledge where appropriate\n      - Add caveat: \"This information may not be current\"\n      - Don't block the response completely\n\n      **If memory-server fails:**\n      - Continue without stored preferences\n      - Ask user for preferences directly\n      - Log the error\n      - Retry important operations once\n      - Don't fail the entire request\n\n      **If notification-server fails:**\n      - Present information in chat instead\n      - Retry once after brief delay\n      - Log the failure\n      - Inform user if notification couldn't be sent\n\n      **If weather-tool fails:**\n      - Inform user: \"Weather data unavailable\"\n      - Offer to try again\n      - Provide last known data if available\n      - Don't speculate about weather\n\n      **General Principle:**\n      Degrade gracefully - never block the entire user request due to \n      a single tool failure. Provide the best possible experience with \n      available tools.\n</code></pre>"},{"location":"tools/using-tools/#tool-performance-optimization","title":"Tool Performance Optimization","text":""},{"location":"tools/using-tools/#caching-strategy","title":"Caching Strategy","text":"<p>Reduce redundant tool calls with caching.</p> <pre><code>cached_researcher:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Smart Caching Strategy:\n\n        **Before web search:**\n        1. Check memory-server for \"search_cache_{query_hash}\"\n        2. If found and &lt; 24 hours old:\n           - Use cached results\n           - Note to user: \"Based on recent search\"\n        3. If not found or stale:\n           - Perform new search\n           - Cache results with timestamp\n           - Use fresh results\n\n        **Cache Management:**\n        - TTL: 24 hours for general searches\n        - TTL: 1 hour for news/current events\n        - TTL: 1 week for static reference information\n        - Store: query, results, timestamp, source\n\n        **Benefits:**\n        - Faster responses\n        - Reduced API costs\n        - Consistent results within session\n</code></pre>"},{"location":"tools/using-tools/#parallel-tool-calls","title":"Parallel Tool Calls","text":"<p>Use tools concurrently when possible.</p> <pre><code>parallel_data_gatherer:\n  toolsets:\n    - weather-tool\n    - google-calendar\n    - memory-server\n  instructions:\n    - |\n        Parallel Tool Usage:\n\n        **When tools are independent:**\n        Make calls concurrently to reduce latency.\n\n        Example - Morning Briefing:\n        Fetch simultaneously:\n        - Today's calendar from google-calendar\n        - Today's weather from weather-tool\n        - User preferences from memory-server\n\n        Then synthesize all data into briefing.\n\n        **When tools depend on each other:**\n        Call sequentially.\n\n        Example - Personalized Weather:\n        1. First: Get location from memory-server\n        2. Then: Get weather-tool forecast for that location\n</code></pre>"},{"location":"tools/using-tools/#lazy-loading","title":"Lazy Loading","text":"<p>Only call tools when absolutely needed.</p> <pre><code>lazy_assistant:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Lazy Tool Loading:\n\n        **Don't preemptively call tools \"just in case\"**\n\n        \u274c Bad:\n        - Load all preferences at start\n        - Search web for every topic mentioned\n        - Store everything in memory\n\n        \u2705 Good:\n        - Load preferences only when needed for decision\n        - Search web only when training data insufficient\n        - Store only important/reusable information\n\n        **Example:**\n        User: \"What's 2 + 2?\"\n        - Don't search web (simple math)\n        - Don't load preferences (not relevant)\n        - Just respond: \"4\"\n\n        User: \"What are current mortgage rates?\"\n        - Do search web (current data needed)\n        - Don't load preferences (first mention of finance)\n        - Respond with findings\n\n        User: \"Find me a recipe for dinner\"\n        - Do load dietary preferences from memory\n        - Do search web for recipes\n        - Filter results by preferences\n</code></pre>"},{"location":"tools/using-tools/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"tools/using-tools/#tool-chaining","title":"Tool Chaining","text":"<p>Create sequences of tool operations.</p> <pre><code>content_creator:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Content Creation Chain:\n\n        **Step 1: Research**\n        - Search duckduckgo for topic\n        - Gather facts, statistics, quotes\n        - Store in memory-server: \"research_{topic}\"\n\n        **Step 2: Outline**\n        - Load research from memory-server\n        - Create content outline\n        - Store in memory-server: \"outline_{topic}\"\n\n        **Step 3: Draft**\n        - Load outline from memory-server\n        - Load research from memory-server\n        - Write full draft\n        - Store in memory-server: \"draft_{topic}_v1\"\n\n        **Step 4: Revision**\n        - Load draft from memory-server\n        - Apply improvements\n        - Store in memory-server: \"draft_{topic}_v2\"\n\n        Each step builds on previous via memory-server.\n</code></pre>"},{"location":"tools/using-tools/#conditional-tool-usage","title":"Conditional Tool Usage","text":"<p>Use tools based on settings or context.</p> <pre><code>adaptive_assistant:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - if: \"settings.research_mode\"\n      content: |\n        RESEARCH MODE ACTIVE\n\n        - Use duckduckgo liberally for fact-checking\n        - Store all findings in memory-server\n        - Provide extensive citations\n        - Cross-reference multiple sources\n\n    - \"!settings.research_mode\": |\n        STANDARD MODE\n\n        - Use duckduckgo only when necessary\n        - Focus on concise responses\n        - Store only important context in memory-server\n\n    - |\n        Adaptive tool usage based on mode setting.\n</code></pre>"},{"location":"tools/using-tools/#tool-feedback-loops","title":"Tool Feedback Loops","text":"<p>Use tool results to guide further tool usage.</p> <pre><code>iterative_researcher:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Iterative Research:\n\n        **Initial Search:**\n        1. Search duckduckgo for main topic\n        2. Analyze results for:\n           - Sufficient information?\n           - Conflicting information?\n           - Gaps in coverage?\n           - Related subtopics?\n\n        **Follow-up Searches:**\n        Based on initial results:\n        - If conflicts found: Search for authoritative sources\n        - If gaps identified: Search specific subtopics\n        - If outdated: Add date filters to search\n        - If insufficient: Try alternative search terms\n\n        **Convergence:**\n        Continue until:\n        - Sufficient information gathered\n        - No significant conflicts\n        - All key aspects covered\n        - Or maximum 5 searches reached\n\n        **Store in memory-server:**\n        - All search queries tried\n        - Key findings from each\n        - Final synthesized research\n</code></pre>"},{"location":"tools/using-tools/#tool-result-validation","title":"Tool Result Validation","text":"<p>Verify and validate tool results.</p> <pre><code>validated_assistant:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Tool Result Validation:\n\n        **For duckduckgo results:**\n        Validate:\n        - Are sources credible? (check domains)\n        - Is information consistent across sources?\n        - Are dates recent enough?\n        - Are there conflicts?\n\n        Quality tiers:\n        - High: .edu, .gov, major news, peer-reviewed\n        - Medium: Established publications, recognized experts\n        - Low: Blogs, forums, unknown sources\n\n        Prefer high-quality sources. Note when only low-quality available.\n\n        **For memory-server results:**\n        Validate:\n        - Is data format correct?\n        - Is timestamp reasonable (not too old)?\n        - Is data complete (no missing fields)?\n\n        If validation fails:\n        - Fetch fresh data\n        - Update cache\n        - Log validation failure\n</code></pre>"},{"location":"tools/using-tools/#tool-security-best-practices","title":"Tool Security Best Practices","text":""},{"location":"tools/using-tools/#data-privacy","title":"Data Privacy","text":"<p>Protect user data when using tools.</p> <pre><code>privacy_conscious_agent:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Privacy Guidelines:\n\n        **Web Search (duckduckgo):**\n        \u274c Never include in search queries:\n        - User names\n        - Email addresses\n        - Phone numbers\n        - Credit card info\n        - Personal identifiers\n\n        \u2705 Generalize queries:\n        - \"Best Italian restaurants\" not \"Best near John Smith\"\n        - \"Child nutrition\" not \"nutrition for 8-year-old Jenny\"\n\n        **Data Storage (memory-server):**\n        \u274c Never store:\n        - Passwords or credentials\n        - Credit card numbers\n        - Social security numbers\n        - Health records\n        - Other sensitive PII\n\n        \u2705 Safe to store:\n        - User preferences\n        - Settings and configuration\n        - Non-sensitive context\n        - Pseudonymized data\n</code></pre>"},{"location":"tools/using-tools/#rate-limiting","title":"Rate Limiting","text":"<p>Respect tool rate limits.</p> <pre><code>rate_limited_agent:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Rate Limiting:\n\n        **Track usage:**\n        Store in memory-server:\n        - \"tool_usage_duckduckgo\": Array of timestamps\n        - \"tool_usage_weather\": Array of timestamps\n\n        **Before tool call:**\n        1. Load usage history from memory-server\n        2. Count calls in last minute\n        3. If limit reached:\n           - Wait or return error\n           - Inform user of limit\n           - Suggest alternative\n        4. If under limit:\n           - Make call\n           - Add timestamp to history\n           - Store updated history\n\n        **Rate Limits:**\n        - duckduckgo: 10 calls/minute\n        - weather-tool: 60 calls/minute\n        - memory-server: 100 calls/minute\n        - notification-server: 10 calls/minute\n</code></pre>"},{"location":"tools/using-tools/#error-recovery","title":"Error Recovery","text":"<p>Handle tool errors gracefully.</p> <pre><code>resilient_agent:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Error Recovery Strategy:\n\n        **Retry Logic:**\n        - Network errors: Retry once after 1 second\n        - Rate limit errors: Wait and retry\n        - Auth errors: Don't retry, report issue\n        - Other errors: Retry once\n\n        **Fallback Strategy:**\n        Level 1: Try primary tool\n        Level 2: Try cached data (if available)\n        Level 3: Use training data knowledge\n        Level 4: Inform user of limitation\n\n        **Never:**\n        - Fail silently\n        - Block entire response\n        - Retry endlessly\n        - Expose internal error details to user\n\n        **Always:**\n        - Log errors for debugging\n        - Inform user gracefully\n        - Provide best alternative\n        - Continue with available capabilities\n</code></pre>"},{"location":"tools/using-tools/#testing-tools","title":"Testing Tools","text":""},{"location":"tools/using-tools/#tool-integration-testing","title":"Tool Integration Testing","text":"<p>Test tools work as expected.</p> <pre><code>tool_test_agent:\n  toolsets:\n    - duckduckgo\n    - memory-server\n  instructions:\n    - |\n        Tool Testing Checklist:\n\n        **Basic Functionality:**\n        - Can call tool successfully?\n        - Does tool return expected format?\n        - Are results reasonable?\n\n        **Error Handling:**\n        - What happens if tool times out?\n        - What happens if tool returns error?\n        - What happens if tool unavailable?\n\n        **Performance:**\n        - What is average response time?\n        - Does tool handle concurrent calls?\n        - Are there rate limits?\n\n        **Integration:**\n        - Can combine with other tools?\n        - Can chain tool calls?\n        - Can cache tool results?\n</code></pre>"},{"location":"tools/using-tools/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"tools/using-tools/#over-reliance-on-tools","title":"Over-reliance on Tools","text":"<p>\u274c Don't call tools unnecessarily:</p> <pre><code># Bad - searches web for everything\nbad_agent:\n  instructions:\n    - |\n        For every question, search the web for an answer.\n</code></pre> <p>\u2705 Use tools when needed:</p> <pre><code># Good - uses web search appropriately\ngood_agent:\n  instructions:\n    - |\n        Use web search when:\n        - Question requires current information\n        - Training data is insufficient\n        - Facts need verification\n\n        Otherwise, use training knowledge.\n</code></pre>"},{"location":"tools/using-tools/#ignoring-tool-failures","title":"Ignoring Tool Failures","text":"<p>\u274c Don't assume tools always work:</p> <pre><code># Bad - no error handling\nbad_agent:\n  instructions:\n    - |\n        Search web for answer. Present results.\n</code></pre> <p>\u2705 Handle errors gracefully:</p> <pre><code># Good - handles failures\ngood_agent:\n  instructions:\n    - |\n        Try to search web. If search fails:\n        - Inform user search is unavailable\n        - Provide answer from training data\n        - Note answer may not be current\n</code></pre>"},{"location":"tools/using-tools/#poor-key-management","title":"Poor Key Management","text":"<p>\u274c Don't use generic keys:</p> <pre><code># Bad - unclear keys\nbad_keys:\n  - \"data\"\n  - \"info\"\n  - \"stuff\"\n</code></pre> <p>\u2705 Use descriptive keys:</p> <pre><code># Good - clear, structured keys\ngood_keys:\n  - \"user_preferences\"\n  - \"research_ai_ethics_2024\"\n  - \"session_context_abc123\"\n</code></pre>"},{"location":"tools/using-tools/#next-steps","title":"Next Steps","text":"<ul> <li>Available Tools - Complete tool catalog</li> <li>Tools Overview - Understanding tools</li> <li>Agent Examples - Teams using tools</li> </ul> <p>Related: Overview | Available Tools | Creating Teams</p>"}]}